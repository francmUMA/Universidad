
practica4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003b2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007db  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000691  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a4  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00001720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b0  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034d  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001fd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c2 01 	call	0x384	; 0x384 <main>
  9e:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digitalWrite>:

static uint8_t counter = 0;
static uint8_t mode = 1;

void digitalWrite(unsigned char data){
	PORTB = ((data & 0x01) << PINB2) | (((data & 0x02) >> 1) << PINB1) | (((data & 0x04) >> 2) << PINB0);
  a6:	28 2f       	mov	r18, r24
  a8:	21 70       	andi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	a9 01       	movw	r20, r18
  ae:	44 0f       	add	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	98 2f       	mov	r25, r24
  b8:	94 70       	andi	r25, 0x04	; 4
  ba:	29 2f       	mov	r18, r25
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	35 95       	asr	r19
  c0:	27 95       	ror	r18
  c2:	35 95       	asr	r19
  c4:	27 95       	ror	r18
  c6:	98 2f       	mov	r25, r24
  c8:	92 70       	andi	r25, 0x02	; 2
  ca:	49 2b       	or	r20, r25
  cc:	24 2b       	or	r18, r20
  ce:	25 b9       	out	0x05, r18	; 5
	PORTD = (((data & 0x20) >> 5) << PIND4) | (((data & 0x10) >> 4) << PIND5) | (((data & 0x08) >> 3) << PIND7);
  d0:	48 2f       	mov	r20, r24
  d2:	40 72       	andi	r20, 0x20	; 32
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	55 95       	asr	r21
  d8:	47 95       	ror	r20
  da:	55 95       	asr	r21
  dc:	47 95       	ror	r20
  de:	55 95       	asr	r21
  e0:	47 95       	ror	r20
  e2:	55 95       	asr	r21
  e4:	47 95       	ror	r20
  e6:	55 95       	asr	r21
  e8:	47 95       	ror	r20
  ea:	ba 01       	movw	r22, r20
  ec:	62 95       	swap	r22
  ee:	72 95       	swap	r23
  f0:	70 7f       	andi	r23, 0xF0	; 240
  f2:	76 27       	eor	r23, r22
  f4:	60 7f       	andi	r22, 0xF0	; 240
  f6:	76 27       	eor	r23, r22
  f8:	98 2f       	mov	r25, r24
  fa:	90 71       	andi	r25, 0x10	; 16
  fc:	49 2f       	mov	r20, r25
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	55 95       	asr	r21
 102:	47 95       	ror	r20
 104:	55 95       	asr	r21
 106:	47 95       	ror	r20
 108:	55 95       	asr	r21
 10a:	47 95       	ror	r20
 10c:	55 95       	asr	r21
 10e:	47 95       	ror	r20
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	42 95       	swap	r20
 116:	52 95       	swap	r21
 118:	50 7f       	andi	r21, 0xF0	; 240
 11a:	54 27       	eor	r21, r20
 11c:	40 7f       	andi	r20, 0xF0	; 240
 11e:	54 27       	eor	r21, r20
 120:	98 2f       	mov	r25, r24
 122:	98 70       	andi	r25, 0x08	; 8
 124:	29 2f       	mov	r18, r25
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	35 95       	asr	r19
 12a:	27 95       	ror	r18
 12c:	35 95       	asr	r19
 12e:	27 95       	ror	r18
 130:	35 95       	asr	r19
 132:	27 95       	ror	r18
 134:	36 95       	lsr	r19
 136:	32 2f       	mov	r19, r18
 138:	22 27       	eor	r18, r18
 13a:	37 95       	ror	r19
 13c:	27 95       	ror	r18
 13e:	46 2b       	or	r20, r22
 140:	24 2b       	or	r18, r20
 142:	2b b9       	out	0x0b, r18	; 11
	PORTC = (((data & 0x80) >> 7) << PINC3) | (((data & 0x40) >> 6) << PINC4);
 144:	28 2f       	mov	r18, r24
 146:	22 1f       	adc	r18, r18
 148:	22 27       	eor	r18, r18
 14a:	22 1f       	adc	r18, r18
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	98 2f       	mov	r25, r24
 15c:	90 74       	andi	r25, 0x40	; 64
 15e:	89 2f       	mov	r24, r25
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 2e       	mov	r0, r24
 164:	89 2f       	mov	r24, r25
 166:	00 0c       	add	r0, r0
 168:	88 1f       	adc	r24, r24
 16a:	99 0b       	sbc	r25, r25
 16c:	00 0c       	add	r0, r0
 16e:	88 1f       	adc	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	82 95       	swap	r24
 174:	92 95       	swap	r25
 176:	90 7f       	andi	r25, 0xF0	; 240
 178:	98 27       	eor	r25, r24
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	98 27       	eor	r25, r24
 17e:	82 2b       	or	r24, r18
 180:	88 b9       	out	0x08, r24	; 8
 182:	08 95       	ret

00000184 <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB1) | (1 << PINB0);
 184:	84 b1       	in	r24, 0x04	; 4
 186:	87 60       	ori	r24, 0x07	; 7
 188:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 18a:	87 b1       	in	r24, 0x07	; 7
 18c:	88 61       	ori	r24, 0x18	; 24
 18e:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND4) | (1 << PIND5) | (1 << PIND7);
 190:	8a b1       	in	r24, 0x0a	; 10
 192:	80 6b       	ori	r24, 0xB0	; 176
 194:	8a b9       	out	0x0a, r24	; 10
 196:	08 95       	ret

00000198 <initTimers>:
}

void initTimers(){
	//Timer 0 en modo FastPWM
	TCCR0A = (1<<WGM01) | (1<<WGM00);						//FastPWM
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0A1);									//Non-Inverted
 19c:	84 b5       	in	r24, 0x24	; 36
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	84 bd       	out	0x24, r24	; 36
	OCR0A = 16;												//256 microsgs
 1a2:	80 e1       	ldi	r24, 0x10	; 16
 1a4:	87 bd       	out	0x27, r24	; 39
	PORTD |= (1 << PIND6);									//Salida de la onda pwm
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	8b b9       	out	0x0b, r24	; 11
	
	//Timer 1 en modo CTC
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);			//Preescalado = 1024 y top en OCR1A	
 1ac:	8d e0       	ldi	r24, 0x0D	; 13
 1ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1<<OCIE1A);
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	OCR1A = 46875;											//3s
 1b8:	2b e1       	ldi	r18, 0x1B	; 27
 1ba:	37 eb       	ldi	r19, 0xB7	; 183
 1bc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//Timer 2 en modo CTC
	TCCR2A = (1<<WGM21);									//Modo CTC con top en OCRA
 1c4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TIMSK2 = (1<<OCIE2A);
 1c8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	OCR2A = 157;											//10ms
 1cc:	8d e9       	ldi	r24, 0x9D	; 157
 1ce:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1d2:	08 95       	ret

000001d4 <__vector_1>:
	
}

ISR(INT0_vect){
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
		mode = 3;
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		digitalWrite(0x00);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
		
		//Deshabilitar Timer 1 y volverlo a activar
		TCCR1B = 0;
 202:	e1 e8       	ldi	r30, 0x81	; 129
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	10 82       	st	Z, r1
		OCR2A = 0;
 208:	a3 eb       	ldi	r26, 0xB3	; 179
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	1c 92       	st	X, r1
		OCR2A = 157;
 20e:	8d e9       	ldi	r24, 0x9D	; 157
 210:	8c 93       	st	X, r24
		TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);
 212:	8d e0       	ldi	r24, 0x0D	; 13
 214:	80 83       	st	Z, r24
		
		//Deshabilitar timer 2
		TCCR2B = 0;
 216:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		
		//Habilitar timer 0
		TCCR0B |= (1<<CS02);									//Preescalado de 256
 21a:	85 b5       	in	r24, 0x25	; 37
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	85 bd       	out	0x25, r24	; 37
}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	if (mode == 1){
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	39 f4       	brne	.+14     	; 0x27a <__vector_11+0x38>
		//Habilito timer 2
		 TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);				//Preescalado de 1024
 26c:	87 e0       	ldi	r24, 0x07	; 7
 26e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		 mode = 2;
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 278:	14 c0       	rjmp	.+40     	; 0x2a2 <__vector_11+0x60>
	} else if (mode == 2) {
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	49 f4       	brne	.+18     	; 0x290 <__vector_11+0x4e>
		digitalWrite(0xFF);
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
		//Deshabilitar timer 2
		TCCR2B = 0;
 284:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		mode = 1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <__vector_11+0x60>
	} else if (mode == 3){
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	39 f4       	brne	.+14     	; 0x2a2 <__vector_11+0x60>
		mode = 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TCCR0B = 0;
 29a:	15 bc       	out	0x25, r1	; 37
		digitalWrite(0xFF);
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
	}
	
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
	counter += 1;
 2e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	digitalWrite(counter);
 2f0:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <__vector_3>:

ISR(PCINT0_vect){
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
	mode = 3;
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	digitalWrite(0x00);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
	
	//Deshabilitar Timer 1 y volverlo a activar
	TCCR1B = 0;
 344:	e1 e8       	ldi	r30, 0x81	; 129
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	10 82       	st	Z, r1
	OCR2A = 0;
 34a:	a3 eb       	ldi	r26, 0xB3	; 179
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	1c 92       	st	X, r1
	OCR2A = 157;
 350:	8d e9       	ldi	r24, 0x9D	; 157
 352:	8c 93       	st	X, r24
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);
 354:	8d e0       	ldi	r24, 0x0D	; 13
 356:	80 83       	st	Z, r24
	
	//Deshabilitar timer 2
	TCCR2B = 0;
 358:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//Habilitar timer 0
	TCCR0B |= (1<<CS02);									//Preescalado de 256
 35c:	85 b5       	in	r24, 0x25	; 37
 35e:	84 60       	ori	r24, 0x04	; 4
 360:	85 bd       	out	0x25, r24	; 37
}
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <main>:

int main(void)
{
    //Deshabilitar interrupciones
    cli(); 
 384:	f8 94       	cli
    
    /*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
    //Mascara para INT0
    EIMSK = 0x01;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	8d bb       	out	0x1d, r24	; 29
    
    //Activacion por flanco de bajada
    EICRA = 0x02;
 38a:	92 e0       	ldi	r25, 0x02	; 2
 38c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    
    //Limpieza del registro de flag
    EIFR = 0x00;
 390:	1c ba       	out	0x1c, r1	; 28
    
    /*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
    PCICR = (1<<PCIE0);
 392:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK0 = (1<<PCINT4) | (1<<PCINT3);			//Boton B y A
 396:	88 e1       	ldi	r24, 0x18	; 24
 398:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
    initLEDS();
 39c:	0e 94 c2 00 	call	0x184	; 0x184 <initLEDS>
	initTimers();
 3a0:	0e 94 cc 00 	call	0x198	; 0x198 <initTimers>
    
    //Activar interrupciones
    sei();
 3a4:	78 94       	sei
	
	//Arrancan los LEDs 3 segundos
	digitalWrite(0xFF);
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <main+0x28>

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
