
ascensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  0000066a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092a  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000685  00000000  00000000  00001076  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ec  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00001ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e9  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b0  00000000  00000000  00002271  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002521  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ca 02 	call	0x594	; 0x594 <main>
  9e:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <print_open_doors>:
volatile uint8_t people = 0;				//hay gente dentro del ascensor
volatile uint8_t elevator = 0;				//Parado = 0, Moviendose = 1
volatile uint8_t is_free = 1;

void print_open_doors(unsigned char data){		
	PORTB = ((data & 0x01) << PINB2) | (((PORTB >> PINB1) & 0x01) << PINB1) | (((data & 0x02) >> 1) << PINB0);
  a6:	48 2f       	mov	r20, r24
  a8:	41 70       	andi	r20, 0x01	; 1
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	44 0f       	add	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	91 fb       	bst	r25, 1
  b8:	22 27       	eor	r18, r18
  ba:	20 f9       	bld	r18, 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	82 70       	andi	r24, 0x02	; 2
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	24 2b       	or	r18, r20
  cc:	82 2b       	or	r24, r18
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	08 95       	ret

000000d2 <print_current_floor>:
}

void print_current_floor(unsigned char data){
	PORTD = (((PORTD >> PIND4) & 0x01) << PIND4) | (((data & 0x02) >> 1) << PIND5) | ((data & 0x01) << PIND7);
  d2:	9b b1       	in	r25, 0x0b	; 11
  d4:	94 fb       	bst	r25, 4
  d6:	22 27       	eor	r18, r18
  d8:	20 f9       	bld	r18, 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	a9 01       	movw	r20, r18
  de:	42 95       	swap	r20
  e0:	52 95       	swap	r21
  e2:	50 7f       	andi	r21, 0xF0	; 240
  e4:	54 27       	eor	r21, r20
  e6:	40 7f       	andi	r20, 0xF0	; 240
  e8:	54 27       	eor	r21, r20
  ea:	98 2f       	mov	r25, r24
  ec:	92 70       	andi	r25, 0x02	; 2
  ee:	29 2f       	mov	r18, r25
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	35 95       	asr	r19
  f4:	27 95       	ror	r18
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	22 95       	swap	r18
  fc:	32 95       	swap	r19
  fe:	30 7f       	andi	r19, 0xF0	; 240
 100:	32 27       	eor	r19, r18
 102:	20 7f       	andi	r18, 0xF0	; 240
 104:	32 27       	eor	r19, r18
 106:	60 e8       	ldi	r22, 0x80	; 128
 108:	86 9f       	mul	r24, r22
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	24 2b       	or	r18, r20
 110:	28 2b       	or	r18, r24
 112:	2b b9       	out	0x0b, r18	; 11
 114:	08 95       	ret

00000116 <print_target_floor>:
}

void print_target_floor(unsigned char data){
	PORTC = (((data & 0x02) >> 1) << PINC3) | ((data & 0x01) << PINC4);
 116:	28 2f       	mov	r18, r24
 118:	22 70       	andi	r18, 0x02	; 2
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	35 95       	asr	r19
 11e:	27 95       	ror	r18
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	48 2f       	mov	r20, r24
 12e:	41 70       	andi	r20, 0x01	; 1
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	42 95       	swap	r20
 134:	52 95       	swap	r21
 136:	50 7f       	andi	r21, 0xF0	; 240
 138:	54 27       	eor	r21, r20
 13a:	40 7f       	andi	r20, 0xF0	; 240
 13c:	54 27       	eor	r21, r20
 13e:	42 2b       	or	r20, r18
 140:	48 b9       	out	0x08, r20	; 8
 142:	08 95       	ret

00000144 <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB0);
 144:	84 b1       	in	r24, 0x04	; 4
 146:	85 60       	ori	r24, 0x05	; 5
 148:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 14a:	87 b1       	in	r24, 0x07	; 7
 14c:	88 61       	ori	r24, 0x18	; 24
 14e:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND5) | (1 << PIND7);
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	80 6a       	ori	r24, 0xA0	; 160
 154:	8a b9       	out	0x0a, r24	; 10
 156:	08 95       	ret

00000158 <initTimers>:
}

void initTimers(){
	//Timer 0 en modo CTC usando la se?al generada por la pwm como reloj.
	TCCR0A = (1 << WGM01);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 250;											//5s
 15c:	8a ef       	ldi	r24, 0xFA	; 250
 15e:	87 bd       	out	0x27, r24	; 39
	
	
	//Timer 1 en modo FastPWM, non inverted con canal A, preescalado de 8 y carga del valor 40000
	//Se carga por defecto 1ms
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 160:	82 e8       	ldi	r24, 0x82	; 130
 162:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 166:	8a e1       	ldi	r24, 0x1A	; 26
 168:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1H = (40000 >> 8) & 0xFF;
 16c:	8c e9       	ldi	r24, 0x9C	; 156
 16e:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 40000 & 0x00FF;
 172:	80 e4       	ldi	r24, 0x40	; 64
 174:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1AH = (PARADO >> 8) & 0xFF;
 178:	87 e2       	ldi	r24, 0x27	; 39
 17a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = PARADO & 0x00FF;
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//Asignar salida de la se?al pwm como reloj del timer0
	DDRB |= (1 << PINB1);
 184:	84 b1       	in	r24, 0x04	; 4
 186:	82 60       	ori	r24, 0x02	; 2
 188:	84 b9       	out	0x04, r24	; 4
 18a:	08 95       	ret

0000018c <start_timer0>:
}

void start_timer0(){
	TCCR0B = (1 << CS02) | (1 << CS01) | (1 << CS00);
 18c:	87 e0       	ldi	r24, 0x07	; 7
 18e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << OCIE0A);
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 196:	08 95       	ret

00000198 <stop_timer0>:
}

void stop_timer0(){
	TCCR0B = 0;
 198:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
 19a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 0;
 19e:	16 bc       	out	0x26, r1	; 38
 1a0:	08 95       	ret

000001a2 <__vector_1>:
}

//Boton C
ISR(INT0_vect){
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	if (!elevator){
 1c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1c8:	81 11       	cpse	r24, r1
 1ca:	67 c0       	rjmp	.+206    	; 0x29a <__vector_1+0xf8>
		if (people && doors == STOPPED){
 1cc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <people>
 1d0:	88 23       	and	r24, r24
 1d2:	61 f1       	breq	.+88     	; 0x22c <__vector_1+0x8a>
 1d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 1d8:	81 11       	cpse	r24, r1
 1da:	28 c0       	rjmp	.+80     	; 0x22c <__vector_1+0x8a>
			target_floor = FLOOR_2;
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
			stop_timer0();
 1e2:	0e 94 cc 00 	call	0x198	; 0x198 <stop_timer0>
			if (target_floor == current_floor){
 1e6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 1ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 1ee:	98 17       	cp	r25, r24
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <__vector_1+0x52>
 1f2:	53 c0       	rjmp	.+166    	; 0x29a <__vector_1+0xf8>
				//NO SE HACE NADA
				;
			} else{
				// Sabemos que solo se puede ascender
				target_floor = FLOOR_2;
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
				print_target_floor(target_floor);
 1fa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 1fe:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
				OCR1AH = (ASCIENDE >> 8) & 0xFF;
 202:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
				OCR1AL = ASCIENDE & 0x00FF;
 206:	88 ec       	ldi	r24, 0xC8	; 200
 208:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			
				// Se carga el delay correspondiente
				OCR0A  = 50 * (target_floor - current_floor);
 20c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 210:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <current_floor>
 214:	89 1b       	sub	r24, r25
 216:	92 e3       	ldi	r25, 0x32	; 50
 218:	89 9f       	mul	r24, r25
 21a:	80 2d       	mov	r24, r0
 21c:	11 24       	eor	r1, r1
 21e:	87 bd       	out	0x27, r24	; 39
				elevator = 1;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				start_timer0();
 226:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 22a:	37 c0       	rjmp	.+110    	; 0x29a <__vector_1+0xf8>
			}
		}else if(is_free){
 22c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 230:	88 23       	and	r24, r24
 232:	99 f1       	breq	.+102    	; 0x29a <__vector_1+0xf8>
			target_floor = FLOOR_2;
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
			is_free = 0;
 23a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			if (target_floor == current_floor){
 23e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 242:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 246:	98 13       	cpse	r25, r24
 248:	0d c0       	rjmp	.+26     	; 0x264 <__vector_1+0xc2>
				// El ascensor se abre para que entre gente
				people = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <people>
				doors = FLOOR_2;
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <doors>
				print_open_doors(doors);
 256:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 25a:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
				start_timer0();
 25e:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 262:	1b c0       	rjmp	.+54     	; 0x29a <__vector_1+0xf8>
			} else{
				// Sabemos que solo se puede ascender
				target_floor = FLOOR_2;
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
				print_target_floor(target_floor);
 26a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 26e:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
				OCR1AH = (ASCIENDE >> 8) & 0xFF;
 272:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
				OCR1AL = ASCIENDE & 0x00FF;
 276:	88 ec       	ldi	r24, 0xC8	; 200
 278:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			
				// Se carga el delay correspondiente
				OCR0A  = 50 * (target_floor - current_floor);
 27c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 280:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <current_floor>
 284:	89 1b       	sub	r24, r25
 286:	92 e3       	ldi	r25, 0x32	; 50
 288:	89 9f       	mul	r24, r25
 28a:	80 2d       	mov	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	87 bd       	out	0x27, r24	; 39
				elevator = 1;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				start_timer0();
 296:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
			}
		}
	}
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_14>:

ISR(TIMER0_COMPA_vect){
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	if (elevator == 0){
 2de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2e2:	81 11       	cpse	r24, r1
 2e4:	13 c0       	rjmp	.+38     	; 0x30c <__vector_14+0x50>
		if (doors != STOPPED) {
 2e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 2ea:	88 23       	and	r24, r24
 2ec:	39 f0       	breq	.+14     	; 0x2fc <__vector_14+0x40>
			doors = STOPPED;
 2ee:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <doors>
			print_open_doors(doors);
 2f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 2f6:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
 2fa:	32 c0       	rjmp	.+100    	; 0x360 <__vector_14+0xa4>
		} else {
			stop_timer0();
 2fc:	0e 94 cc 00 	call	0x198	; 0x198 <stop_timer0>
			is_free = 1;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			people = 0;
 306:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <people>
 30a:	2a c0       	rjmp	.+84     	; 0x360 <__vector_14+0xa4>
		}
	} else {
		current_floor = target_floor;
 30c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 310:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_floor>
		print_current_floor(current_floor);
 314:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 318:	0e 94 69 00 	call	0xd2	; 0xd2 <print_current_floor>
		target_floor = STOPPED;
 31c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <target_floor>
		print_target_floor(target_floor);
 320:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 324:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
		
		//Parar ascensor
		OCR1AH = (PARADO >> 8) & 0xFF;
 328:	87 e2       	ldi	r24, 0x27	; 39
 32a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		OCR1AL = PARADO & 0x00FF;
 32e:	80 e1       	ldi	r24, 0x10	; 16
 330:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		
		//Abrir puertas
		elevator = 0;
 334:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		doors = current_floor;
 338:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 33c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <doors>
		print_open_doors(doors);
 340:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 344:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
		OCR0A = 250;
 348:	8a ef       	ldi	r24, 0xFA	; 250
 34a:	87 bd       	out	0x27, r24	; 39
		if (people) people = 0;
 34c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <people>
 350:	88 23       	and	r24, r24
 352:	19 f0       	breq	.+6      	; 0x35a <__vector_14+0x9e>
 354:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <people>
 358:	03 c0       	rjmp	.+6      	; 0x360 <__vector_14+0xa4>
		else people = 1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <people>
	}
}
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <__vector_3>:

ISR(PCINT0_vect){
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
 38c:	2f 93       	push	r18
 38e:	3f 93       	push	r19
 390:	4f 93       	push	r20
 392:	5f 93       	push	r21
 394:	6f 93       	push	r22
 396:	7f 93       	push	r23
 398:	8f 93       	push	r24
 39a:	9f 93       	push	r25
 39c:	af 93       	push	r26
 39e:	bf 93       	push	r27
 3a0:	cf 93       	push	r28
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
	if (!elevator){
 3a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3aa:	81 11       	cpse	r24, r1
 3ac:	e1 c0       	rjmp	.+450    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
		if (PINB & (1 << PINB3)){			//Boton A
 3ae:	1b 9b       	sbis	0x03, 3	; 3
 3b0:	66 c0       	rjmp	.+204    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
			if (people && doors == STOPPED){
 3b2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <people>
 3b6:	88 23       	and	r24, r24
 3b8:	51 f1       	breq	.+84     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 3be:	81 11       	cpse	r24, r1
 3c0:	26 c0       	rjmp	.+76     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				target_floor = FLOOR_0;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
				stop_timer0();
 3c8:	0e 94 cc 00 	call	0x198	; 0x198 <stop_timer0>
				if (target_floor == current_floor){
 3cc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 3d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 3d4:	98 17       	cp	r25, r24
 3d6:	09 f4       	brne	.+2      	; 0x3da <__vector_3+0x58>
 3d8:	cb c0       	rjmp	.+406    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
					//NO SE HACE NADA
					;
				} else{
					// Sabemos que solo se puede descender
					print_target_floor(target_floor);
 3da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 3de:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
					OCR1AH = (DESCIENDE >> 8) & 0xFF;
 3e2:	8e e4       	ldi	r24, 0x4E	; 78
 3e4:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
					OCR1AL = DESCIENDE & 0x00FF;
 3e8:	80 e2       	ldi	r24, 0x20	; 32
 3ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				
					// Se carga el delay correspondiente
					OCR0A  = 50 * (current_floor - target_floor);
 3ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 3f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 3f6:	89 1b       	sub	r24, r25
 3f8:	92 e3       	ldi	r25, 0x32	; 50
 3fa:	89 9f       	mul	r24, r25
 3fc:	80 2d       	mov	r24, r0
 3fe:	11 24       	eor	r1, r1
 400:	87 bd       	out	0x27, r24	; 39
					elevator = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
					start_timer0();
 408:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 40c:	b1 c0       	rjmp	.+354    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
				}
			}else if(is_free){
 40e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 412:	88 23       	and	r24, r24
 414:	09 f4       	brne	.+2      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 416:	ac c0       	rjmp	.+344    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
				target_floor = FLOOR_0;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
				is_free = 0;
 41e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				if (target_floor == current_floor){
 422:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 426:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 42a:	98 13       	cpse	r25, r24
 42c:	0c c0       	rjmp	.+24     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					// El ascensor se abre para que entre gente
					people = 1;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <people>
					doors = FLOOR_0;
 434:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <doors>
					print_open_doors(doors);
 438:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 43c:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
					start_timer0();
 440:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 444:	95 c0       	rjmp	.+298    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
				} else{
					// Sabemos que solo se puede descender
					target_floor = FLOOR_0;
 446:	c1 e0       	ldi	r28, 0x01	; 1
 448:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <target_floor>
					print_target_floor(target_floor);
 44c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 450:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
					OCR1AH = (DESCIENDE >> 8) & 0xFF;
 454:	8e e4       	ldi	r24, 0x4E	; 78
 456:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
					OCR1AL = DESCIENDE & 0x00FF;
 45a:	80 e2       	ldi	r24, 0x20	; 32
 45c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				
					// Se carga el delay correspondiente
					OCR0A  = 50 * (current_floor - target_floor);
 460:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 464:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 468:	89 1b       	sub	r24, r25
 46a:	92 e3       	ldi	r25, 0x32	; 50
 46c:	89 9f       	mul	r24, r25
 46e:	80 2d       	mov	r24, r0
 470:	11 24       	eor	r1, r1
 472:	87 bd       	out	0x27, r24	; 39
					elevator = 1;
 474:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
					start_timer0();
 478:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 47c:	79 c0       	rjmp	.+242    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
				}
			}
		}
	
	
		else if (PINB & (1<<PINB4)){		//Boton B
 47e:	1c 9b       	sbis	0x03, 4	; 3
 480:	77 c0       	rjmp	.+238    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
			if (people && doors == STOPPED){
 482:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <people>
 486:	88 23       	and	r24, r24
 488:	71 f1       	breq	.+92     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 48a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 48e:	81 11       	cpse	r24, r1
 490:	2a c0       	rjmp	.+84     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
				target_floor = FLOOR_1;
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
				stop_timer0();
 498:	0e 94 cc 00 	call	0x198	; 0x198 <stop_timer0>
				if (target_floor == current_floor){
 49c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 4a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 4a4:	98 17       	cp	r25, r24
 4a6:	09 f4       	brne	.+2      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4a8:	63 c0       	rjmp	.+198    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
					//NO SE HACE NADA
					;
				} else{
					// Tenemos que averiguar si hay que ascender o descender
					print_target_floor(target_floor);
 4aa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 4ae:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
					if (target_floor > current_floor){
 4b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 4b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 4ba:	89 17       	cp	r24, r25
 4bc:	30 f4       	brcc	.+12     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
						OCR1AH = (ASCIENDE >> 8) & 0xFF;
 4be:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
						OCR1AL = ASCIENDE & 0x00FF;
 4c2:	88 ec       	ldi	r24, 0xC8	; 200
 4c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
					} else {
						OCR1AH = (DESCIENDE >> 8) & 0xFF;
 4ca:	8e e4       	ldi	r24, 0x4E	; 78
 4cc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
						OCR1AL = DESCIENDE & 0x00FF;
 4d0:	80 e2       	ldi	r24, 0x20	; 32
 4d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
					}
				
					// Se carga el delay correspondiente
					OCR0A  = 50;
 4d6:	82 e3       	ldi	r24, 0x32	; 50
 4d8:	87 bd       	out	0x27, r24	; 39
					elevator = 1;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
					start_timer0();
 4e0:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 4e4:	45 c0       	rjmp	.+138    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
				}
			}else if (is_free){
 4e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ea:	88 23       	and	r24, r24
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4ee:	40 c0       	rjmp	.+128    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
				target_floor = FLOOR_1;
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
				is_free = 0;
 4f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				if (target_floor == current_floor){
 4fa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 4fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 502:	98 13       	cpse	r25, r24
 504:	0d c0       	rjmp	.+26     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
					// El ascensor se abre para que entre gente
					people = 1;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <people>
					doors = FLOOR_1;
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <doors>
					print_open_doors(doors);
 512:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 516:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
					start_timer0();
 51a:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 51e:	28 c0       	rjmp	.+80     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
				} else{
					// Tenemos que averiguar si hay que subir o bajar
					target_floor = FLOOR_1;
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
					print_target_floor(target_floor);
 526:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 52a:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
					if (target_floor > current_floor){
 52e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 532:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 536:	89 17       	cp	r24, r25
 538:	30 f4       	brcc	.+12     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
						OCR1AH = (ASCIENDE >> 8) & 0xFF;
 53a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
						OCR1AL = ASCIENDE & 0x00FF;
 53e:	88 ec       	ldi	r24, 0xC8	; 200
 540:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 544:	06 c0       	rjmp	.+12     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
					} else {
						OCR1AH = (DESCIENDE >> 8) & 0xFF;
 546:	8e e4       	ldi	r24, 0x4E	; 78
 548:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
						OCR1AL = DESCIENDE & 0x00FF;
 54c:	80 e2       	ldi	r24, 0x20	; 32
 54e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
					}
				
					// Se carga el delay correspondiente
					OCR0A  = 50 * (target_floor - current_floor);
 552:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 556:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <current_floor>
 55a:	89 1b       	sub	r24, r25
 55c:	92 e3       	ldi	r25, 0x32	; 50
 55e:	89 9f       	mul	r24, r25
 560:	80 2d       	mov	r24, r0
 562:	11 24       	eor	r1, r1
 564:	87 bd       	out	0x27, r24	; 39
					elevator = 1;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
					start_timer0();
 56c:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
				}
			}
		}
	}
}
 570:	ff 91       	pop	r31
 572:	ef 91       	pop	r30
 574:	cf 91       	pop	r28
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	7f 91       	pop	r23
 580:	6f 91       	pop	r22
 582:	5f 91       	pop	r21
 584:	4f 91       	pop	r20
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <main>:

int main(void)
{
	//Deshabilitar interrupciones
	cli();
 594:	f8 94       	cli
	
	/*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
	//Mascara para INT0
	EIMSK = 0x01;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	8d bb       	out	0x1d, r24	; 29
	
	//Activacion por flanco de bajada
	EICRA = 0x02;
 59a:	92 e0       	ldi	r25, 0x02	; 2
 59c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	
	//Limpieza del registro de flag
	EIFR = 0x00;
 5a0:	1c ba       	out	0x1c, r1	; 28
	
	/*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
	PCICR = (1<<PCIE0);
 5a2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = (1<<PCINT4) | (1<<PCINT3);							//Boton B y A
 5a6:	88 e1       	ldi	r24, 0x18	; 24
 5a8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
	initLEDS();
 5ac:	0e 94 a2 00 	call	0x144	; 0x144 <initLEDS>
	initTimers();
 5b0:	0e 94 ac 00 	call	0x158	; 0x158 <initTimers>
	
	//Activar interrupciones
	sei();
 5b4:	78 94       	sei
	
	// Estado por defecto
	print_current_floor(current_floor);
 5b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_floor>
 5ba:	0e 94 69 00 	call	0xd2	; 0xd2 <print_current_floor>
	print_target_floor(target_floor);
 5be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 5c2:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
	print_open_doors(doors);
 5c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 5ca:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <main+0x3a>

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
