
ascensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ac  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068d  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000311  00000000  00000000  00001145  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_3>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  78:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <print_open_doors>:
#define FLOOR_1 0x10
#define FLOOR_2 0x11
#define STOPPED 0x00

void print_open_doors(unsigned char data){		
	PORTB = (((data & 0x02) >> 1) << PINB0) | ((data & 0x01) << PINB2) | (((PORTB >> PINB1) & 0x01) << PINB1);
  80:	68 2f       	mov	r22, r24
  82:	62 70       	andi	r22, 0x02	; 2
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	75 95       	asr	r23
  88:	67 95       	ror	r22
  8a:	48 2f       	mov	r20, r24
  8c:	41 70       	andi	r20, 0x01	; 1
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	44 0f       	add	r20, r20
  92:	55 1f       	adc	r21, r21
  94:	44 0f       	add	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	81 fb       	bst	r24, 1
  9c:	22 27       	eor	r18, r18
  9e:	20 f9       	bld	r18, 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	46 2b       	or	r20, r22
  a8:	24 2b       	or	r18, r20
  aa:	25 b9       	out	0x05, r18	; 5
  ac:	08 95       	ret

000000ae <print_current_floor>:
}

void print_current_floor(unsigned char data){
	PORTD = (((PORTD >> PIND4) & 0x01) << PIND4) | (((data & 0x02) >> 1) << PIND5) | ((data & 0x01) << PIND7);
  ae:	9b b1       	in	r25, 0x0b	; 11
  b0:	94 fb       	bst	r25, 4
  b2:	22 27       	eor	r18, r18
  b4:	20 f9       	bld	r18, 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	a9 01       	movw	r20, r18
  ba:	42 95       	swap	r20
  bc:	52 95       	swap	r21
  be:	50 7f       	andi	r21, 0xF0	; 240
  c0:	54 27       	eor	r21, r20
  c2:	40 7f       	andi	r20, 0xF0	; 240
  c4:	54 27       	eor	r21, r20
  c6:	98 2f       	mov	r25, r24
  c8:	92 70       	andi	r25, 0x02	; 2
  ca:	29 2f       	mov	r18, r25
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	35 95       	asr	r19
  d0:	27 95       	ror	r18
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	22 95       	swap	r18
  d8:	32 95       	swap	r19
  da:	30 7f       	andi	r19, 0xF0	; 240
  dc:	32 27       	eor	r19, r18
  de:	20 7f       	andi	r18, 0xF0	; 240
  e0:	32 27       	eor	r19, r18
  e2:	60 e8       	ldi	r22, 0x80	; 128
  e4:	86 9f       	mul	r24, r22
  e6:	c0 01       	movw	r24, r0
  e8:	11 24       	eor	r1, r1
  ea:	24 2b       	or	r18, r20
  ec:	28 2b       	or	r18, r24
  ee:	2b b9       	out	0x0b, r18	; 11
  f0:	08 95       	ret

000000f2 <print_target_floor>:
}

void print_target_floor(unsigned char data){
	PORTC = (((data & 0x02) >> 1) << PINC3) | ((data & 0x01) << PINC4);
  f2:	28 2f       	mov	r18, r24
  f4:	22 70       	andi	r18, 0x02	; 2
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	35 95       	asr	r19
  fa:	27 95       	ror	r18
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	48 2f       	mov	r20, r24
 10a:	41 70       	andi	r20, 0x01	; 1
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	42 95       	swap	r20
 110:	52 95       	swap	r21
 112:	50 7f       	andi	r21, 0xF0	; 240
 114:	54 27       	eor	r21, r20
 116:	40 7f       	andi	r20, 0xF0	; 240
 118:	54 27       	eor	r21, r20
 11a:	42 2b       	or	r20, r18
 11c:	48 b9       	out	0x08, r20	; 8
 11e:	08 95       	ret

00000120 <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB0);
 120:	84 b1       	in	r24, 0x04	; 4
 122:	85 60       	ori	r24, 0x05	; 5
 124:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 126:	87 b1       	in	r24, 0x07	; 7
 128:	88 61       	ori	r24, 0x18	; 24
 12a:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND5) | (1 << PIND7);
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	80 6a       	ori	r24, 0xA0	; 160
 130:	8a b9       	out	0x0a, r24	; 10
 132:	08 95       	ret

00000134 <initTimers>:
}

void initTimers(){
	//Timer 0 en modo CTC usando la se?al generada por la pwm como reloj.
	TCCR0A = (1 << WGM01);
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	84 bd       	out	0x24, r24	; 36
	OCR0A = 5;											//0.1s
 138:	85 e0       	ldi	r24, 0x05	; 5
 13a:	87 bd       	out	0x27, r24	; 39
	
	
	//Timer 1 en modo FastPWM, non inverted con canal A, preescalado de 8 y carga del valor 40000
	//Se carga por defecto 1ms
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 13c:	82 e8       	ldi	r24, 0x82	; 130
 13e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 142:	8a e1       	ldi	r24, 0x1A	; 26
 144:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1H = (40000 >> 8) & 0xFF;
 148:	8c e9       	ldi	r24, 0x9C	; 156
 14a:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 40000 & 0x00FF;
 14e:	80 e4       	ldi	r24, 0x40	; 64
 150:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1AH = (2000 >> 8) & 0xFF;
 154:	87 e0       	ldi	r24, 0x07	; 7
 156:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 2000 & 0x00FF;
 15a:	80 ed       	ldi	r24, 0xD0	; 208
 15c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//Asignar salida de la se?al pwm como reloj del timer0
	DDRB |= (1 << PINB1);
 160:	84 b1       	in	r24, 0x04	; 4
 162:	82 60       	ori	r24, 0x02	; 2
 164:	84 b9       	out	0x04, r24	; 4
 166:	08 95       	ret

00000168 <__vector_1>:
}

ISR(INT0_vect){
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
	;
}
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_14>:

ISR(TIMER0_COMPA_vect){
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
	;
}
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <__vector_3>:

ISR(PCINT0_vect){
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	8f 93       	push	r24
	if (PINB & (1 << PINB3)){			//Boton A
 19c:	1b 9b       	sbis	0x03, 3	; 3
		;
	}else if (PINB & (1<<PINB4)){		//Boton B
 19e:	83 b1       	in	r24, 0x03	; 3
		;
	}
}
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <main>:

int main(void)
{
	//Deshabilitar interrupciones
	cli();
 1ac:	f8 94       	cli
	
	/*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
	//Mascara para INT0
	EIMSK = 0x01;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	8d bb       	out	0x1d, r24	; 29
	
	//Activacion por flanco de bajada
	EICRA = 0x02;
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	
	//Limpieza del registro de flag
	EIFR = 0x00;
 1b8:	1c ba       	out	0x1c, r1	; 28
	
	/*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
	PCICR = (1<<PCIE0);
 1ba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = (1<<PCINT4) | (1<<PCINT3);							//Boton B y A
 1be:	88 e1       	ldi	r24, 0x18	; 24
 1c0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
	initLEDS();
 1c4:	0e 94 90 00 	call	0x120	; 0x120 <initLEDS>
	initTimers();
 1c8:	0e 94 9a 00 	call	0x134	; 0x134 <initTimers>
	
	//Activar interrupciones
	sei();
 1cc:	78 94       	sei
	
	// Estado por defecto
	print_current_floor(FLOOR_0);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 57 00 	call	0xae	; 0xae <print_current_floor>
	print_target_floor(STOPPED);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 79 00 	call	0xf2	; 0xf2 <print_target_floor>
	print_open_doors(CLOSED);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 40 00 	call	0x80	; 0x80 <print_open_doors>
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <main+0x34>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
