
ascensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000055a  000005ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  000005f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fd  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000685  00000000  00000000  00000fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000568  00000000  00000000  00001652  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b0  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000023ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 02 	call	0x51a	; 0x51a <main>
  9e:	0c 94 ab 02 	jmp	0x556	; 0x556 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <print_open_doors>:
volatile uint8_t doors = STOPPED;
volatile uint8_t people = 0;				//hay gente dentro del ascensor
volatile uint8_t elevator = 0;				//Parado = 0, Moviendose = 1

void print_open_doors(unsigned char data){		
	PORTB = ((data & 0x01) << PINB2) | (((PORTB >> PINB1) & 0x01) << PINB1) | (((data & 0x02) >> 1) << PINB0);
  a6:	48 2f       	mov	r20, r24
  a8:	41 70       	andi	r20, 0x01	; 1
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	44 0f       	add	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	91 fb       	bst	r25, 1
  b8:	22 27       	eor	r18, r18
  ba:	20 f9       	bld	r18, 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	82 70       	andi	r24, 0x02	; 2
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	24 2b       	or	r18, r20
  cc:	82 2b       	or	r24, r18
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	08 95       	ret

000000d2 <print_current_floor>:
}

void print_current_floor(unsigned char data){
	PORTD = (((PORTD >> PIND4) & 0x01) << PIND4) | (((data & 0x02) >> 1) << PIND5) | ((data & 0x01) << PIND7);
  d2:	9b b1       	in	r25, 0x0b	; 11
  d4:	94 fb       	bst	r25, 4
  d6:	22 27       	eor	r18, r18
  d8:	20 f9       	bld	r18, 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	a9 01       	movw	r20, r18
  de:	42 95       	swap	r20
  e0:	52 95       	swap	r21
  e2:	50 7f       	andi	r21, 0xF0	; 240
  e4:	54 27       	eor	r21, r20
  e6:	40 7f       	andi	r20, 0xF0	; 240
  e8:	54 27       	eor	r21, r20
  ea:	98 2f       	mov	r25, r24
  ec:	92 70       	andi	r25, 0x02	; 2
  ee:	29 2f       	mov	r18, r25
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	35 95       	asr	r19
  f4:	27 95       	ror	r18
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	22 95       	swap	r18
  fc:	32 95       	swap	r19
  fe:	30 7f       	andi	r19, 0xF0	; 240
 100:	32 27       	eor	r19, r18
 102:	20 7f       	andi	r18, 0xF0	; 240
 104:	32 27       	eor	r19, r18
 106:	60 e8       	ldi	r22, 0x80	; 128
 108:	86 9f       	mul	r24, r22
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	24 2b       	or	r18, r20
 110:	28 2b       	or	r18, r24
 112:	2b b9       	out	0x0b, r18	; 11
 114:	08 95       	ret

00000116 <print_target_floor>:
}

void print_target_floor(unsigned char data){
	PORTC = (((data & 0x02) >> 1) << PINC3) | ((data & 0x01) << PINC4);
 116:	28 2f       	mov	r18, r24
 118:	22 70       	andi	r18, 0x02	; 2
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	35 95       	asr	r19
 11e:	27 95       	ror	r18
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	48 2f       	mov	r20, r24
 12e:	41 70       	andi	r20, 0x01	; 1
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	42 95       	swap	r20
 134:	52 95       	swap	r21
 136:	50 7f       	andi	r21, 0xF0	; 240
 138:	54 27       	eor	r21, r20
 13a:	40 7f       	andi	r20, 0xF0	; 240
 13c:	54 27       	eor	r21, r20
 13e:	42 2b       	or	r20, r18
 140:	48 b9       	out	0x08, r20	; 8
 142:	08 95       	ret

00000144 <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB0);
 144:	84 b1       	in	r24, 0x04	; 4
 146:	85 60       	ori	r24, 0x05	; 5
 148:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 14a:	87 b1       	in	r24, 0x07	; 7
 14c:	88 61       	ori	r24, 0x18	; 24
 14e:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND5) | (1 << PIND7);
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	80 6a       	ori	r24, 0xA0	; 160
 154:	8a b9       	out	0x0a, r24	; 10
 156:	08 95       	ret

00000158 <initTimers>:
}

void initTimers(){
	//Timer 0 en modo CTC usando la se?al generada por la pwm como reloj.
	TCCR0A = (1 << WGM01);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 250;											//5s
 15c:	8a ef       	ldi	r24, 0xFA	; 250
 15e:	87 bd       	out	0x27, r24	; 39
	
	
	//Timer 1 en modo FastPWM, non inverted con canal A, preescalado de 8 y carga del valor 40000
	//Se carga por defecto 1ms
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 160:	82 e8       	ldi	r24, 0x82	; 130
 162:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 166:	8a e1       	ldi	r24, 0x1A	; 26
 168:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1H = (40000 >> 8) & 0xFF;
 16c:	8c e9       	ldi	r24, 0x9C	; 156
 16e:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 40000 & 0x00FF;
 172:	80 e4       	ldi	r24, 0x40	; 64
 174:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1AH = (PARADO >> 8) & 0xFF;
 178:	87 e2       	ldi	r24, 0x27	; 39
 17a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = PARADO & 0x00FF;
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//Asignar salida de la se?al pwm como reloj del timer0
	DDRB |= (1 << PINB1);
 184:	84 b1       	in	r24, 0x04	; 4
 186:	82 60       	ori	r24, 0x02	; 2
 188:	84 b9       	out	0x04, r24	; 4
 18a:	08 95       	ret

0000018c <start_timer0>:
}

void start_timer0(){
	TCCR0B = (1 << CS02) | (1 << CS01) | (1 << CS00);
 18c:	87 e0       	ldi	r24, 0x07	; 7
 18e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << OCIE0A);
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 196:	08 95       	ret

00000198 <stop_timer0>:
}

void stop_timer0(){
	TCCR0B = 0;
 198:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
 19a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 0;
 19e:	16 bc       	out	0x26, r1	; 38
 1a0:	08 95       	ret

000001a2 <__vector_1>:
}

//Boton C
ISR(INT0_vect){
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	target_floor = FLOOR_2;
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
	if (people){
 1ca:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <people>
 1ce:	88 23       	and	r24, r24
 1d0:	19 f1       	breq	.+70     	; 0x218 <__vector_1+0x76>
		if (target_floor == current_floor){
 1d2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1da:	98 17       	cp	r25, r24
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <__vector_1+0x3e>
 1de:	4a c0       	rjmp	.+148    	; 0x274 <__vector_1+0xd2>
			//NO SE HACE NADA
			;
		} else{
			// Sabemos que solo se puede ascender
			target_floor = FLOOR_2;
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
			print_target_floor(target_floor);
 1e6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 1ea:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
			OCR1AH = (ASCIENDE >> 8) & 0xFF;
 1ee:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = ASCIENDE & 0x00FF;
 1f2:	88 ec       	ldi	r24, 0xC8	; 200
 1f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			
			// Se carga el delay correspondiente
			OCR0A  = 50 * (target_floor - current_floor);
 1f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 1fc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 200:	89 1b       	sub	r24, r25
 202:	92 e3       	ldi	r25, 0x32	; 50
 204:	89 9f       	mul	r24, r25
 206:	80 2d       	mov	r24, r0
 208:	11 24       	eor	r1, r1
 20a:	87 bd       	out	0x27, r24	; 39
			elevator = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			start_timer0();
 212:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 216:	2e c0       	rjmp	.+92     	; 0x274 <__vector_1+0xd2>
		}
	}else{
		if (target_floor == current_floor){
 218:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 21c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 220:	98 13       	cpse	r25, r24
 222:	0d c0       	rjmp	.+26     	; 0x23e <__vector_1+0x9c>
			// El ascensor se abre para que entre gente
			people = 1;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <people>
			doors = FLOOR_2;
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <doors>
			print_open_doors(doors);
 230:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 234:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
			start_timer0();
 238:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 23c:	1b c0       	rjmp	.+54     	; 0x274 <__vector_1+0xd2>
		} else{
			// Sabemos que solo se puede ascender
			target_floor = FLOOR_2;
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
			print_target_floor(target_floor);
 244:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 248:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
			OCR1AH = (ASCIENDE >> 8) & 0xFF;
 24c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = ASCIENDE & 0x00FF;
 250:	88 ec       	ldi	r24, 0xC8	; 200
 252:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			
			// Se carga el delay correspondiente
			OCR0A  = 50 * (target_floor - current_floor);
 256:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 25a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25e:	89 1b       	sub	r24, r25
 260:	92 e3       	ldi	r25, 0x32	; 50
 262:	89 9f       	mul	r24, r25
 264:	80 2d       	mov	r24, r0
 266:	11 24       	eor	r1, r1
 268:	87 bd       	out	0x27, r24	; 39
			elevator = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			start_timer0();
 270:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
		}
	}
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	if (elevator == 0){
 2b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2bc:	81 11       	cpse	r24, r1
 2be:	0d c0       	rjmp	.+26     	; 0x2da <__vector_14+0x44>
		if (doors != STOPPED) {
 2c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 2c4:	88 23       	and	r24, r24
 2c6:	99 f1       	breq	.+102    	; 0x32e <__vector_14+0x98>
			doors = STOPPED;
 2c8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <doors>
			print_open_doors(doors);
 2cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 2d0:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
			stop_timer0();
 2d4:	0e 94 cc 00 	call	0x198	; 0x198 <stop_timer0>
 2d8:	2a c0       	rjmp	.+84     	; 0x32e <__vector_14+0x98>
		} else {
			;//stop_timer0();
		}
	} else {
		current_floor = target_floor;
 2da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 2de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		print_current_floor(current_floor);
 2e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e6:	0e 94 69 00 	call	0xd2	; 0xd2 <print_current_floor>
		target_floor = STOPPED;
 2ea:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <target_floor>
		print_target_floor(target_floor);
 2ee:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 2f2:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
		
		//Parar ascensor
		OCR1AH = (PARADO >> 8) & 0xFF;
 2f6:	87 e2       	ldi	r24, 0x27	; 39
 2f8:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		OCR1AL = PARADO & 0x00FF;
 2fc:	80 e1       	ldi	r24, 0x10	; 16
 2fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		
		//Abrir puertas
		elevator = 0;
 302:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		doors = current_floor;
 306:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 30a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <doors>
		print_open_doors(doors);
 30e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 312:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
		OCR0A = 250;
 316:	8a ef       	ldi	r24, 0xFA	; 250
 318:	87 bd       	out	0x27, r24	; 39
		if (people) people = 0;
 31a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <people>
 31e:	88 23       	and	r24, r24
 320:	19 f0       	breq	.+6      	; 0x328 <__vector_14+0x92>
 322:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <people>
 326:	03 c0       	rjmp	.+6      	; 0x32e <__vector_14+0x98>
		else people = 1;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <people>
	}
}
 32e:	ff 91       	pop	r31
 330:	ef 91       	pop	r30
 332:	bf 91       	pop	r27
 334:	af 91       	pop	r26
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	7f 91       	pop	r23
 33c:	6f 91       	pop	r22
 33e:	5f 91       	pop	r21
 340:	4f 91       	pop	r20
 342:	3f 91       	pop	r19
 344:	2f 91       	pop	r18
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <__vector_3>:

ISR(PCINT0_vect){
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	4f 93       	push	r20
 360:	5f 93       	push	r21
 362:	6f 93       	push	r22
 364:	7f 93       	push	r23
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	cf 93       	push	r28
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
	if (PINB & (1 << PINB3)){			//Boton A
 374:	1b 9b       	sbis	0x03, 3	; 3
 376:	56 c0       	rjmp	.+172    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		target_floor = FLOOR_0;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
		if (people){
 37e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <people>
 382:	88 23       	and	r24, r24
 384:	09 f1       	breq	.+66     	; 0x3c8 <__vector_3+0x78>
			if (target_floor == current_floor){
 386:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 38a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 38e:	98 17       	cp	r25, r24
 390:	09 f4       	brne	.+2      	; 0x394 <__vector_3+0x44>
 392:	b1 c0       	rjmp	.+354    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
				//NO SE HACE NADA
				;
			} else{
				// Sabemos que solo se puede descender
				print_target_floor(target_floor);
 394:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 398:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
				OCR1AH = (DESCIENDE >> 8) & 0xFF;
 39c:	8e e4       	ldi	r24, 0x4E	; 78
 39e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
				OCR1AL = DESCIENDE & 0x00FF;
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				
				// Se carga el delay correspondiente
				OCR0A  = 50 * (current_floor - target_floor);
 3a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ac:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 3b0:	89 1b       	sub	r24, r25
 3b2:	92 e3       	ldi	r25, 0x32	; 50
 3b4:	89 9f       	mul	r24, r25
 3b6:	80 2d       	mov	r24, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	87 bd       	out	0x27, r24	; 39
				elevator = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				start_timer0();
 3c2:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 3c6:	97 c0       	rjmp	.+302    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			}
		}else{
			if (target_floor == current_floor){
 3c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 3cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d0:	98 13       	cpse	r25, r24
 3d2:	0c c0       	rjmp	.+24     	; 0x3ec <__vector_3+0x9c>
				// El ascensor se abre para que entre gente
				people = 1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <people>
				doors = FLOOR_0;
 3da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <doors>
				print_open_doors(doors);
 3de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 3e2:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
				start_timer0();
 3e6:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 3ea:	85 c0       	rjmp	.+266    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			} else{
				// Sabemos que solo se puede descender
				target_floor = FLOOR_0;
 3ec:	c1 e0       	ldi	r28, 0x01	; 1
 3ee:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <target_floor>
				print_target_floor(target_floor);
 3f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 3f6:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
				OCR1AH = (DESCIENDE >> 8) & 0xFF;
 3fa:	8e e4       	ldi	r24, 0x4E	; 78
 3fc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
				OCR1AL = DESCIENDE & 0x00FF;
 400:	80 e2       	ldi	r24, 0x20	; 32
 402:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				
				// Se carga el delay correspondiente
				OCR0A  = 50 * (current_floor - target_floor);
 406:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 40a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 40e:	89 1b       	sub	r24, r25
 410:	92 e3       	ldi	r25, 0x32	; 50
 412:	89 9f       	mul	r24, r25
 414:	80 2d       	mov	r24, r0
 416:	11 24       	eor	r1, r1
 418:	87 bd       	out	0x27, r24	; 39
				elevator = 1;
 41a:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
				start_timer0();
 41e:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 422:	69 c0       	rjmp	.+210    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			}
		}
	}
	
	
	else if (PINB & (1<<PINB4)){		//Boton B
 424:	1c 9b       	sbis	0x03, 4	; 3
 426:	67 c0       	rjmp	.+206    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
		target_floor = FLOOR_1;
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
		if (people){
 42e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <people>
 432:	88 23       	and	r24, r24
 434:	29 f1       	breq	.+74     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			if (target_floor == current_floor){
 436:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 43a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43e:	98 17       	cp	r25, r24
 440:	09 f4       	brne	.+2      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 442:	59 c0       	rjmp	.+178    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
				//NO SE HACE NADA
				;
			} else{
				// Tenemos que averiguar si hay que ascender o descender
				print_target_floor(target_floor);
 444:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 448:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
				if (target_floor > current_floor){
 44c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 450:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 454:	89 17       	cp	r24, r25
 456:	30 f4       	brcc	.+12     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
					OCR1AH = (ASCIENDE >> 8) & 0xFF;
 458:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
					OCR1AL = ASCIENDE & 0x00FF;
 45c:	88 ec       	ldi	r24, 0xC8	; 200
 45e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 462:	06 c0       	rjmp	.+12     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
				} else {
					OCR1AH = (DESCIENDE >> 8) & 0xFF;
 464:	8e e4       	ldi	r24, 0x4E	; 78
 466:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
					OCR1AL = DESCIENDE & 0x00FF;
 46a:	80 e2       	ldi	r24, 0x20	; 32
 46c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				}
				
				// Se carga el delay correspondiente
				OCR0A  = 50;
 470:	82 e3       	ldi	r24, 0x32	; 50
 472:	87 bd       	out	0x27, r24	; 39
				elevator = 1;
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				start_timer0();
 47a:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 47e:	3b c0       	rjmp	.+118    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			}
			}else{
			if (target_floor == current_floor){
 480:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 484:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 488:	98 13       	cpse	r25, r24
 48a:	0d c0       	rjmp	.+26     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				// El ascensor se abre para que entre gente
				people = 1;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <people>
				doors = FLOOR_1;
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <doors>
				print_open_doors(doors);
 498:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 49c:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
				start_timer0();
 4a0:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
 4a4:	28 c0       	rjmp	.+80     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			} else{
				// Tenemos que averiguar si hay que subir o bajar
				target_floor = FLOOR_1;
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <target_floor>
				print_target_floor(target_floor);
 4ac:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 4b0:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
				if (target_floor > current_floor){
 4b4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <target_floor>
 4b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4bc:	89 17       	cp	r24, r25
 4be:	30 f4       	brcc	.+12     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
					OCR1AH = (ASCIENDE >> 8) & 0xFF;
 4c0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
					OCR1AL = ASCIENDE & 0x00FF;
 4c4:	88 ec       	ldi	r24, 0xC8	; 200
 4c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				} else {
					OCR1AH = (DESCIENDE >> 8) & 0xFF;
 4cc:	8e e4       	ldi	r24, 0x4E	; 78
 4ce:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
					OCR1AL = DESCIENDE & 0x00FF;
 4d2:	80 e2       	ldi	r24, 0x20	; 32
 4d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				}
				
				// Se carga el delay correspondiente
				OCR0A  = 50 * (target_floor - current_floor);
 4d8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 4dc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4e0:	89 1b       	sub	r24, r25
 4e2:	92 e3       	ldi	r25, 0x32	; 50
 4e4:	89 9f       	mul	r24, r25
 4e6:	80 2d       	mov	r24, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	87 bd       	out	0x27, r24	; 39
				elevator = 1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				start_timer0();
 4f2:	0e 94 c6 00 	call	0x18c	; 0x18c <start_timer0>
			}
		}
	}
}
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	cf 91       	pop	r28
 4fc:	bf 91       	pop	r27
 4fe:	af 91       	pop	r26
 500:	9f 91       	pop	r25
 502:	8f 91       	pop	r24
 504:	7f 91       	pop	r23
 506:	6f 91       	pop	r22
 508:	5f 91       	pop	r21
 50a:	4f 91       	pop	r20
 50c:	3f 91       	pop	r19
 50e:	2f 91       	pop	r18
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <main>:

int main(void)
{
	//Deshabilitar interrupciones
	cli();
 51a:	f8 94       	cli
	
	/*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
	//Mascara para INT0
	EIMSK = 0x01;
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	8d bb       	out	0x1d, r24	; 29
	
	//Activacion por flanco de bajada
	EICRA = 0x02;
 520:	92 e0       	ldi	r25, 0x02	; 2
 522:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	
	//Limpieza del registro de flag
	EIFR = 0x00;
 526:	1c ba       	out	0x1c, r1	; 28
	
	/*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
	PCICR = (1<<PCIE0);
 528:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = (1<<PCINT4) | (1<<PCINT3);							//Boton B y A
 52c:	88 e1       	ldi	r24, 0x18	; 24
 52e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
	initLEDS();
 532:	0e 94 a2 00 	call	0x144	; 0x144 <initLEDS>
	initTimers();
 536:	0e 94 ac 00 	call	0x158	; 0x158 <initTimers>
	
	//Activar interrupciones
	sei();
 53a:	78 94       	sei
	
	// Estado por defecto
	print_current_floor(current_floor);
 53c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 540:	0e 94 69 00 	call	0xd2	; 0xd2 <print_current_floor>
	print_target_floor(target_floor);
 544:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <target_floor>
 548:	0e 94 8b 00 	call	0x116	; 0x116 <print_target_floor>
	print_open_doors(doors);
 54c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <doors>
 550:	0e 94 53 00 	call	0xa6	; 0xa6 <print_open_doors>
 554:	ff cf       	rjmp	.-2      	; 0x554 <main+0x3a>

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
