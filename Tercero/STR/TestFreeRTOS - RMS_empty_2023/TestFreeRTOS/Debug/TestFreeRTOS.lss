
TestFreeRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00002b28  00002bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000673  00800160  00800160  00002c1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00002cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002762  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f1d  00000000  00000000  0000576a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002423  00000000  00000000  00006687  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b88  00000000  00000000  00008aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001344  00000000  00000000  00009634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001713  00000000  00000000  0000a978  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000c08b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e2       	ldi	r30, 0x28	; 40
      7c:	fb e2       	ldi	r31, 0x2B	; 43
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 36       	cpi	r26, 0x60	; 96
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a0 e6       	ldi	r26, 0x60	; 96
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 3d       	cpi	r26, 0xD3	; 211
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <main>
      9e:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DigitalInit>:
/*===============================================================================================*\
 *	DIGITAL I/O
\*===============================================================================================*/

void DigitalInit(void)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	// CONFIGURE LEDS AS OUTPUT
	MS_DIGITAL_OUT_BIT_0_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_0_PIN);
      ae:	84 e2       	ldi	r24, 0x24	; 36
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	24 e2       	ldi	r18, 0x24	; 36
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	24 60       	ori	r18, 0x04	; 4
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_1_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_1_PIN);
      c0:	84 e2       	ldi	r24, 0x24	; 36
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	24 e2       	ldi	r18, 0x24	; 36
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	22 60       	ori	r18, 0x02	; 2
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_2_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_2_PIN);
      d2:	84 e2       	ldi	r24, 0x24	; 36
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	24 e2       	ldi	r18, 0x24	; 36
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	21 60       	ori	r18, 0x01	; 1
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_3_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_3_PIN);
      e4:	8a e2       	ldi	r24, 0x2A	; 42
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	2a e2       	ldi	r18, 0x2A	; 42
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	20 68       	ori	r18, 0x80	; 128
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_4_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_4_PIN);
      f6:	8a e2       	ldi	r24, 0x2A	; 42
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2a e2       	ldi	r18, 0x2A	; 42
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	20 81       	ld	r18, Z
     102:	20 62       	ori	r18, 0x20	; 32
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_5_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_5_PIN);
     108:	8a e2       	ldi	r24, 0x2A	; 42
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	2a e2       	ldi	r18, 0x2A	; 42
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	f9 01       	movw	r30, r18
     112:	20 81       	ld	r18, Z
     114:	20 61       	ori	r18, 0x10	; 16
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_6_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_6_PIN);
     11a:	87 e2       	ldi	r24, 0x27	; 39
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	27 e2       	ldi	r18, 0x27	; 39
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	20 61       	ori	r18, 0x10	; 16
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_7_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_7_PIN);
     12c:	87 e2       	ldi	r24, 0x27	; 39
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	27 e2       	ldi	r18, 0x27	; 39
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	f9 01       	movw	r30, r18
     136:	20 81       	ld	r18, Z
     138:	28 60       	ori	r18, 0x08	; 8
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
	
	// CONFIGURE DAC WR
	MS_DIGITAL_OUT_BIT_WR_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_WR_PIN);
     13e:	87 e2       	ldi	r24, 0x27	; 39
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	27 e2       	ldi	r18, 0x27	; 39
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	21 60       	ori	r18, 0x01	; 1
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
	
	// CONFIGURE BUTTONS
	//MS_BUTTON_A_DIR &= ~(0x01 << MS_BUTTON_A_PIN);
	//MS_BUTTON_B_DIR &= ~(0x01 << MS_BUTTON_B_PIN);
	//MS_BUTTON_C_DIR &= ~(0x01 << MS_BUTTON_C_PIN);
}
     150:	00 00       	nop
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <DACWRdisable>:


void DACWRdisable(void)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
	MS_DIGITAL_OUT_BIT_WR_PORT |= (0x01 << MS_DIGITAL_OUT_BIT_WR_PIN);
     160:	88 e2       	ldi	r24, 0x28	; 40
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	28 e2       	ldi	r18, 0x28	; 40
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	f9 01       	movw	r30, r18
     16a:	20 81       	ld	r18, Z
     16c:	21 60       	ori	r18, 0x01	; 1
     16e:	fc 01       	movw	r30, r24
     170:	20 83       	st	Z, r18
}
     172:	00 00       	nop
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <DACWRenable>:


void DACWRenable(void)
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
	MS_DIGITAL_OUT_BIT_WR_PORT &=  ~(0x01 << MS_DIGITAL_OUT_BIT_WR_PIN);
     182:	88 e2       	ldi	r24, 0x28	; 40
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	28 e2       	ldi	r18, 0x28	; 40
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	f9 01       	movw	r30, r18
     18c:	20 81       	ld	r18, Z
     18e:	2e 7f       	andi	r18, 0xFE	; 254
     190:	fc 01       	movw	r30, r24
     192:	20 83       	st	Z, r18
}
     194:	00 00       	nop
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <DigitalWrite>:


void DigitalWrite(unsigned char byte)
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <DigitalWrite+0x6>
     1a2:	1f 92       	push	r1
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char bit;
	unsigned char mask;
	
	DACWRdisable();
     1aa:	0e 94 ac 00 	call	0x158	; 0x158 <DACWRdisable>
	
	bit = (byte >> 0) & 0x01;
     1ae:	8b 81       	ldd	r24, Y+3	; 0x03
     1b0:	81 70       	andi	r24, 0x01	; 1
     1b2:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_0_PIN);
     1b4:	8b ef       	ldi	r24, 0xFB	; 251
     1b6:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_0_PORT = (MS_DIGITAL_OUT_BIT_0_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_0_PIN);
     1b8:	85 e2       	ldi	r24, 0x25	; 37
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	25 e2       	ldi	r18, 0x25	; 37
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	f9 01       	movw	r30, r18
     1c2:	30 81       	ld	r19, Z
     1c4:	2a 81       	ldd	r18, Y+2	; 0x02
     1c6:	23 23       	and	r18, r19
     1c8:	42 2f       	mov	r20, r18
     1ca:	29 81       	ldd	r18, Y+1	; 0x01
     1cc:	22 2f       	mov	r18, r18
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	22 0f       	add	r18, r18
     1d2:	33 1f       	adc	r19, r19
     1d4:	22 0f       	add	r18, r18
     1d6:	33 1f       	adc	r19, r19
     1d8:	24 2b       	or	r18, r20
     1da:	fc 01       	movw	r30, r24
     1dc:	20 83       	st	Z, r18
	
	bit = (byte >> 1) & 0x01;
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	86 95       	lsr	r24
     1e2:	81 70       	andi	r24, 0x01	; 1
     1e4:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_1_PIN);
     1e6:	8d ef       	ldi	r24, 0xFD	; 253
     1e8:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_1_PORT = (MS_DIGITAL_OUT_BIT_1_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_1_PIN);
     1ea:	85 e2       	ldi	r24, 0x25	; 37
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	25 e2       	ldi	r18, 0x25	; 37
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	f9 01       	movw	r30, r18
     1f4:	30 81       	ld	r19, Z
     1f6:	2a 81       	ldd	r18, Y+2	; 0x02
     1f8:	23 23       	and	r18, r19
     1fa:	42 2f       	mov	r20, r18
     1fc:	29 81       	ldd	r18, Y+1	; 0x01
     1fe:	22 2f       	mov	r18, r18
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	22 0f       	add	r18, r18
     204:	33 1f       	adc	r19, r19
     206:	24 2b       	or	r18, r20
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18

	bit = (byte >> 2) & 0x01;
     20c:	8b 81       	ldd	r24, Y+3	; 0x03
     20e:	86 95       	lsr	r24
     210:	86 95       	lsr	r24
     212:	81 70       	andi	r24, 0x01	; 1
     214:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_2_PIN);
     216:	8e ef       	ldi	r24, 0xFE	; 254
     218:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_2_PORT = (MS_DIGITAL_OUT_BIT_2_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_2_PIN);
     21a:	85 e2       	ldi	r24, 0x25	; 37
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	25 e2       	ldi	r18, 0x25	; 37
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	f9 01       	movw	r30, r18
     224:	30 81       	ld	r19, Z
     226:	2a 81       	ldd	r18, Y+2	; 0x02
     228:	32 23       	and	r19, r18
     22a:	29 81       	ldd	r18, Y+1	; 0x01
     22c:	23 2b       	or	r18, r19
     22e:	fc 01       	movw	r30, r24
     230:	20 83       	st	Z, r18

	bit = (byte >> 3) & 0x01;
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	86 95       	lsr	r24
     236:	86 95       	lsr	r24
     238:	86 95       	lsr	r24
     23a:	81 70       	andi	r24, 0x01	; 1
     23c:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_3_PIN);
     23e:	8f e7       	ldi	r24, 0x7F	; 127
     240:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_3_PORT = (MS_DIGITAL_OUT_BIT_3_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_3_PIN);
     242:	8b e2       	ldi	r24, 0x2B	; 43
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	2b e2       	ldi	r18, 0x2B	; 43
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	f9 01       	movw	r30, r18
     24c:	30 81       	ld	r19, Z
     24e:	2a 81       	ldd	r18, Y+2	; 0x02
     250:	23 23       	and	r18, r19
     252:	42 2f       	mov	r20, r18
     254:	29 81       	ldd	r18, Y+1	; 0x01
     256:	22 2f       	mov	r18, r18
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	36 95       	lsr	r19
     25c:	32 2f       	mov	r19, r18
     25e:	22 27       	eor	r18, r18
     260:	37 95       	ror	r19
     262:	27 95       	ror	r18
     264:	24 2b       	or	r18, r20
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18

	bit = (byte >> 4) & 0x01;
     26a:	8b 81       	ldd	r24, Y+3	; 0x03
     26c:	82 95       	swap	r24
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	81 70       	andi	r24, 0x01	; 1
     272:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_4_PIN);
     274:	8f ed       	ldi	r24, 0xDF	; 223
     276:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_4_PORT = (MS_DIGITAL_OUT_BIT_4_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_4_PIN);
     278:	8b e2       	ldi	r24, 0x2B	; 43
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	2b e2       	ldi	r18, 0x2B	; 43
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	30 81       	ld	r19, Z
     284:	2a 81       	ldd	r18, Y+2	; 0x02
     286:	23 23       	and	r18, r19
     288:	42 2f       	mov	r20, r18
     28a:	29 81       	ldd	r18, Y+1	; 0x01
     28c:	22 2f       	mov	r18, r18
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	22 0f       	add	r18, r18
     292:	33 1f       	adc	r19, r19
     294:	22 95       	swap	r18
     296:	32 95       	swap	r19
     298:	30 7f       	andi	r19, 0xF0	; 240
     29a:	32 27       	eor	r19, r18
     29c:	20 7f       	andi	r18, 0xF0	; 240
     29e:	32 27       	eor	r19, r18
     2a0:	24 2b       	or	r18, r20
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 83       	st	Z, r18

	bit = (byte >> 5) & 0x01;
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	82 95       	swap	r24
     2aa:	86 95       	lsr	r24
     2ac:	87 70       	andi	r24, 0x07	; 7
     2ae:	81 70       	andi	r24, 0x01	; 1
     2b0:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_5_PIN);
     2b2:	8f ee       	ldi	r24, 0xEF	; 239
     2b4:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_5_PORT = (MS_DIGITAL_OUT_BIT_5_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_5_PIN);
     2b6:	8b e2       	ldi	r24, 0x2B	; 43
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	2b e2       	ldi	r18, 0x2B	; 43
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	f9 01       	movw	r30, r18
     2c0:	30 81       	ld	r19, Z
     2c2:	2a 81       	ldd	r18, Y+2	; 0x02
     2c4:	23 23       	and	r18, r19
     2c6:	42 2f       	mov	r20, r18
     2c8:	29 81       	ldd	r18, Y+1	; 0x01
     2ca:	22 2f       	mov	r18, r18
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	22 95       	swap	r18
     2d0:	32 95       	swap	r19
     2d2:	30 7f       	andi	r19, 0xF0	; 240
     2d4:	32 27       	eor	r19, r18
     2d6:	20 7f       	andi	r18, 0xF0	; 240
     2d8:	32 27       	eor	r19, r18
     2da:	24 2b       	or	r18, r20
     2dc:	fc 01       	movw	r30, r24
     2de:	20 83       	st	Z, r18

	bit = (byte >> 6) & 0x01;
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	82 95       	swap	r24
     2e4:	86 95       	lsr	r24
     2e6:	86 95       	lsr	r24
     2e8:	83 70       	andi	r24, 0x03	; 3
     2ea:	81 70       	andi	r24, 0x01	; 1
     2ec:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_6_PIN);
     2ee:	8f ee       	ldi	r24, 0xEF	; 239
     2f0:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_6_PORT = (MS_DIGITAL_OUT_BIT_6_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_6_PIN);
     2f2:	88 e2       	ldi	r24, 0x28	; 40
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	28 e2       	ldi	r18, 0x28	; 40
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	f9 01       	movw	r30, r18
     2fc:	30 81       	ld	r19, Z
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	23 23       	and	r18, r19
     302:	42 2f       	mov	r20, r18
     304:	29 81       	ldd	r18, Y+1	; 0x01
     306:	22 2f       	mov	r18, r18
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	22 95       	swap	r18
     30c:	32 95       	swap	r19
     30e:	30 7f       	andi	r19, 0xF0	; 240
     310:	32 27       	eor	r19, r18
     312:	20 7f       	andi	r18, 0xF0	; 240
     314:	32 27       	eor	r19, r18
     316:	24 2b       	or	r18, r20
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
	
	bit = (byte >> 7) & 0x01;
     31c:	8b 81       	ldd	r24, Y+3	; 0x03
     31e:	88 1f       	adc	r24, r24
     320:	88 27       	eor	r24, r24
     322:	88 1f       	adc	r24, r24
     324:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_7_PIN);
     326:	87 ef       	ldi	r24, 0xF7	; 247
     328:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_7_PORT = (MS_DIGITAL_OUT_BIT_7_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_7_PIN);
     32a:	88 e2       	ldi	r24, 0x28	; 40
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	28 e2       	ldi	r18, 0x28	; 40
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	f9 01       	movw	r30, r18
     334:	30 81       	ld	r19, Z
     336:	2a 81       	ldd	r18, Y+2	; 0x02
     338:	23 23       	and	r18, r19
     33a:	42 2f       	mov	r20, r18
     33c:	29 81       	ldd	r18, Y+1	; 0x01
     33e:	22 2f       	mov	r18, r18
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	22 0f       	add	r18, r18
     348:	33 1f       	adc	r19, r19
     34a:	22 0f       	add	r18, r18
     34c:	33 1f       	adc	r19, r19
     34e:	24 2b       	or	r18, r20
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
	
	DACWRenable();
     354:	0e 94 bd 00 	call	0x17a	; 0x17a <DACWRenable>
}
     358:	00 00       	nop
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <vListInitialise>:
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	00 d0       	rcall	.+0      	; 0x36c <vListInitialise+0x6>
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	9a 83       	std	Y+2, r25	; 0x02
     372:	89 83       	std	Y+1, r24	; 0x01
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	9c 01       	movw	r18, r24
     37a:	2d 5f       	subi	r18, 0xFD	; 253
     37c:	3f 4f       	sbci	r19, 0xFF	; 255
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	fc 01       	movw	r30, r24
     384:	32 83       	std	Z+2, r19	; 0x02
     386:	21 83       	std	Z+1, r18	; 0x01
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	3f ef       	ldi	r19, 0xFF	; 255
     390:	fc 01       	movw	r30, r24
     392:	34 83       	std	Z+4, r19	; 0x04
     394:	23 83       	std	Z+3, r18	; 0x03
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	9c 01       	movw	r18, r24
     39c:	2d 5f       	subi	r18, 0xFD	; 253
     39e:	3f 4f       	sbci	r19, 0xFF	; 255
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	fc 01       	movw	r30, r24
     3a6:	36 83       	std	Z+6, r19	; 0x06
     3a8:	25 83       	std	Z+5, r18	; 0x05
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	9c 01       	movw	r18, r24
     3b0:	2d 5f       	subi	r18, 0xFD	; 253
     3b2:	3f 4f       	sbci	r19, 0xFF	; 255
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	9a 81       	ldd	r25, Y+2	; 0x02
     3b8:	fc 01       	movw	r30, r24
     3ba:	30 87       	std	Z+8, r19	; 0x08
     3bc:	27 83       	std	Z+7, r18	; 0x07
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	fc 01       	movw	r30, r24
     3c4:	10 82       	st	Z, r1
     3c6:	00 00       	nop
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <vListInitialiseItem>:
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <vListInitialiseItem+0x6>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	fc 01       	movw	r30, r24
     3e6:	11 86       	std	Z+9, r1	; 0x09
     3e8:	10 86       	std	Z+8, r1	; 0x08
     3ea:	00 00       	nop
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <vListInsertEnd>:
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <vListInsertEnd+0x6>
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <vListInsertEnd+0x8>
     3fe:	00 d0       	rcall	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	9c 83       	std	Y+4, r25	; 0x04
     406:	8b 83       	std	Y+3, r24	; 0x03
     408:	7e 83       	std	Y+6, r23	; 0x06
     40a:	6d 83       	std	Y+5, r22	; 0x05
     40c:	8b 81       	ldd	r24, Y+3	; 0x03
     40e:	9c 81       	ldd	r25, Y+4	; 0x04
     410:	fc 01       	movw	r30, r24
     412:	81 81       	ldd	r24, Z+1	; 0x01
     414:	92 81       	ldd	r25, Z+2	; 0x02
     416:	9a 83       	std	Y+2, r25	; 0x02
     418:	89 83       	std	Y+1, r24	; 0x01
     41a:	8d 81       	ldd	r24, Y+5	; 0x05
     41c:	9e 81       	ldd	r25, Y+6	; 0x06
     41e:	29 81       	ldd	r18, Y+1	; 0x01
     420:	3a 81       	ldd	r19, Y+2	; 0x02
     422:	fc 01       	movw	r30, r24
     424:	33 83       	std	Z+3, r19	; 0x03
     426:	22 83       	std	Z+2, r18	; 0x02
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	fc 01       	movw	r30, r24
     42e:	24 81       	ldd	r18, Z+4	; 0x04
     430:	35 81       	ldd	r19, Z+5	; 0x05
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	9e 81       	ldd	r25, Y+6	; 0x06
     436:	fc 01       	movw	r30, r24
     438:	35 83       	std	Z+5, r19	; 0x05
     43a:	24 83       	std	Z+4, r18	; 0x04
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	fc 01       	movw	r30, r24
     442:	84 81       	ldd	r24, Z+4	; 0x04
     444:	95 81       	ldd	r25, Z+5	; 0x05
     446:	2d 81       	ldd	r18, Y+5	; 0x05
     448:	3e 81       	ldd	r19, Y+6	; 0x06
     44a:	fc 01       	movw	r30, r24
     44c:	33 83       	std	Z+3, r19	; 0x03
     44e:	22 83       	std	Z+2, r18	; 0x02
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	2d 81       	ldd	r18, Y+5	; 0x05
     456:	3e 81       	ldd	r19, Y+6	; 0x06
     458:	fc 01       	movw	r30, r24
     45a:	35 83       	std	Z+5, r19	; 0x05
     45c:	24 83       	std	Z+4, r18	; 0x04
     45e:	8d 81       	ldd	r24, Y+5	; 0x05
     460:	9e 81       	ldd	r25, Y+6	; 0x06
     462:	2b 81       	ldd	r18, Y+3	; 0x03
     464:	3c 81       	ldd	r19, Y+4	; 0x04
     466:	fc 01       	movw	r30, r24
     468:	31 87       	std	Z+9, r19	; 0x09
     46a:	20 87       	std	Z+8, r18	; 0x08
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	9c 81       	ldd	r25, Y+4	; 0x04
     470:	fc 01       	movw	r30, r24
     472:	80 81       	ld	r24, Z
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	28 0f       	add	r18, r24
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	9c 81       	ldd	r25, Y+4	; 0x04
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
     480:	00 00       	nop
     482:	26 96       	adiw	r28, 0x06	; 6
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <vListInsert>:
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	28 97       	sbiw	r28, 0x08	; 8
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	9e 83       	std	Y+6, r25	; 0x06
     4aa:	8d 83       	std	Y+5, r24	; 0x05
     4ac:	78 87       	std	Y+8, r23	; 0x08
     4ae:	6f 83       	std	Y+7, r22	; 0x07
     4b0:	8f 81       	ldd	r24, Y+7	; 0x07
     4b2:	98 85       	ldd	r25, Y+8	; 0x08
     4b4:	fc 01       	movw	r30, r24
     4b6:	80 81       	ld	r24, Z
     4b8:	91 81       	ldd	r25, Z+1	; 0x01
     4ba:	9c 83       	std	Y+4, r25	; 0x04
     4bc:	8b 83       	std	Y+3, r24	; 0x03
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	9c 81       	ldd	r25, Y+4	; 0x04
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	41 f4       	brne	.+16     	; 0x4d6 <vListInsert+0x42>
     4c6:	8d 81       	ldd	r24, Y+5	; 0x05
     4c8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ca:	fc 01       	movw	r30, r24
     4cc:	87 81       	ldd	r24, Z+7	; 0x07
     4ce:	90 85       	ldd	r25, Z+8	; 0x08
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	1a c0       	rjmp	.+52     	; 0x50a <vListInsert+0x76>
     4d6:	8d 81       	ldd	r24, Y+5	; 0x05
     4d8:	9e 81       	ldd	r25, Y+6	; 0x06
     4da:	03 96       	adiw	r24, 0x03	; 3
     4dc:	9a 83       	std	Y+2, r25	; 0x02
     4de:	89 83       	std	Y+1, r24	; 0x01
     4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <vListInsert+0x5c>
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	fc 01       	movw	r30, r24
     4e8:	82 81       	ldd	r24, Z+2	; 0x02
     4ea:	93 81       	ldd	r25, Z+3	; 0x03
     4ec:	9a 83       	std	Y+2, r25	; 0x02
     4ee:	89 83       	std	Y+1, r24	; 0x01
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
     4f4:	fc 01       	movw	r30, r24
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 81       	ld	r18, Z
     4fe:	31 81       	ldd	r19, Z+1	; 0x01
     500:	8b 81       	ldd	r24, Y+3	; 0x03
     502:	9c 81       	ldd	r25, Y+4	; 0x04
     504:	82 17       	cp	r24, r18
     506:	93 07       	cpc	r25, r19
     508:	60 f7       	brcc	.-40     	; 0x4e2 <vListInsert+0x4e>
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	9a 81       	ldd	r25, Y+2	; 0x02
     50e:	fc 01       	movw	r30, r24
     510:	22 81       	ldd	r18, Z+2	; 0x02
     512:	33 81       	ldd	r19, Z+3	; 0x03
     514:	8f 81       	ldd	r24, Y+7	; 0x07
     516:	98 85       	ldd	r25, Y+8	; 0x08
     518:	fc 01       	movw	r30, r24
     51a:	33 83       	std	Z+3, r19	; 0x03
     51c:	22 83       	std	Z+2, r18	; 0x02
     51e:	8f 81       	ldd	r24, Y+7	; 0x07
     520:	98 85       	ldd	r25, Y+8	; 0x08
     522:	fc 01       	movw	r30, r24
     524:	82 81       	ldd	r24, Z+2	; 0x02
     526:	93 81       	ldd	r25, Z+3	; 0x03
     528:	2f 81       	ldd	r18, Y+7	; 0x07
     52a:	38 85       	ldd	r19, Y+8	; 0x08
     52c:	fc 01       	movw	r30, r24
     52e:	35 83       	std	Z+5, r19	; 0x05
     530:	24 83       	std	Z+4, r18	; 0x04
     532:	8f 81       	ldd	r24, Y+7	; 0x07
     534:	98 85       	ldd	r25, Y+8	; 0x08
     536:	29 81       	ldd	r18, Y+1	; 0x01
     538:	3a 81       	ldd	r19, Y+2	; 0x02
     53a:	fc 01       	movw	r30, r24
     53c:	35 83       	std	Z+5, r19	; 0x05
     53e:	24 83       	std	Z+4, r18	; 0x04
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	2f 81       	ldd	r18, Y+7	; 0x07
     546:	38 85       	ldd	r19, Y+8	; 0x08
     548:	fc 01       	movw	r30, r24
     54a:	33 83       	std	Z+3, r19	; 0x03
     54c:	22 83       	std	Z+2, r18	; 0x02
     54e:	8f 81       	ldd	r24, Y+7	; 0x07
     550:	98 85       	ldd	r25, Y+8	; 0x08
     552:	2d 81       	ldd	r18, Y+5	; 0x05
     554:	3e 81       	ldd	r19, Y+6	; 0x06
     556:	fc 01       	movw	r30, r24
     558:	31 87       	std	Z+9, r19	; 0x09
     55a:	20 87       	std	Z+8, r18	; 0x08
     55c:	8d 81       	ldd	r24, Y+5	; 0x05
     55e:	9e 81       	ldd	r25, Y+6	; 0x06
     560:	fc 01       	movw	r30, r24
     562:	80 81       	ld	r24, Z
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	28 0f       	add	r18, r24
     568:	8d 81       	ldd	r24, Y+5	; 0x05
     56a:	9e 81       	ldd	r25, Y+6	; 0x06
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
     570:	00 00       	nop
     572:	28 96       	adiw	r28, 0x08	; 8
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <uxListRemove>:
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	00 d0       	rcall	.+0      	; 0x58a <uxListRemove+0x6>
     58a:	00 d0       	rcall	.+0      	; 0x58c <uxListRemove+0x8>
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	8b 83       	std	Y+3, r24	; 0x03
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	9c 81       	ldd	r25, Y+4	; 0x04
     598:	fc 01       	movw	r30, r24
     59a:	80 85       	ldd	r24, Z+8	; 0x08
     59c:	91 85       	ldd	r25, Z+9	; 0x09
     59e:	9a 83       	std	Y+2, r25	; 0x02
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	2b 81       	ldd	r18, Y+3	; 0x03
     5ae:	3c 81       	ldd	r19, Y+4	; 0x04
     5b0:	f9 01       	movw	r30, r18
     5b2:	24 81       	ldd	r18, Z+4	; 0x04
     5b4:	35 81       	ldd	r19, Z+5	; 0x05
     5b6:	fc 01       	movw	r30, r24
     5b8:	35 83       	std	Z+5, r19	; 0x05
     5ba:	24 83       	std	Z+4, r18	; 0x04
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	fc 01       	movw	r30, r24
     5c2:	84 81       	ldd	r24, Z+4	; 0x04
     5c4:	95 81       	ldd	r25, Z+5	; 0x05
     5c6:	2b 81       	ldd	r18, Y+3	; 0x03
     5c8:	3c 81       	ldd	r19, Y+4	; 0x04
     5ca:	f9 01       	movw	r30, r18
     5cc:	22 81       	ldd	r18, Z+2	; 0x02
     5ce:	33 81       	ldd	r19, Z+3	; 0x03
     5d0:	fc 01       	movw	r30, r24
     5d2:	33 83       	std	Z+3, r19	; 0x03
     5d4:	22 83       	std	Z+2, r18	; 0x02
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	fc 01       	movw	r30, r24
     5dc:	21 81       	ldd	r18, Z+1	; 0x01
     5de:	32 81       	ldd	r19, Z+2	; 0x02
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	28 17       	cp	r18, r24
     5e6:	39 07       	cpc	r19, r25
     5e8:	51 f4       	brne	.+20     	; 0x5fe <uxListRemove+0x7a>
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	9c 81       	ldd	r25, Y+4	; 0x04
     5ee:	fc 01       	movw	r30, r24
     5f0:	24 81       	ldd	r18, Z+4	; 0x04
     5f2:	35 81       	ldd	r19, Z+5	; 0x05
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	fc 01       	movw	r30, r24
     5fa:	32 83       	std	Z+2, r19	; 0x02
     5fc:	21 83       	std	Z+1, r18	; 0x01
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	9c 81       	ldd	r25, Y+4	; 0x04
     602:	fc 01       	movw	r30, r24
     604:	11 86       	std	Z+9, r1	; 0x09
     606:	10 86       	std	Z+8, r1	; 0x08
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	9a 81       	ldd	r25, Y+2	; 0x02
     60c:	fc 01       	movw	r30, r24
     60e:	80 81       	ld	r24, Z
     610:	2f ef       	ldi	r18, 0xFF	; 255
     612:	28 0f       	add	r18, r24
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	9a 81       	ldd	r25, Y+2	; 0x02
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	fc 01       	movw	r30, r24
     622:	80 81       	ld	r24, Z
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <pvPortMalloc>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	2e 97       	sbiw	r28, 0x0e	; 14
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	9e 87       	std	Y+14, r25	; 0x0e
     648:	8d 87       	std	Y+13, r24	; 0x0d
     64a:	1e 82       	std	Y+6, r1	; 0x06
     64c:	1d 82       	std	Y+5, r1	; 0x05
     64e:	0e 94 12 0a 	call	0x1424	; 0x1424 <vTaskSuspendAll>
     652:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <xHeapHasBeenInitialised.2340>
     656:	88 23       	and	r24, r24
     658:	29 f4       	brne	.+10     	; 0x664 <pvPortMalloc+0x32>
     65a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <prvHeapInit>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <xHeapHasBeenInitialised.2340>
     664:	8d 85       	ldd	r24, Y+13	; 0x0d
     666:	9e 85       	ldd	r25, Y+14	; 0x0e
     668:	89 2b       	or	r24, r25
     66a:	41 f0       	breq	.+16     	; 0x67c <pvPortMalloc+0x4a>
     66c:	84 e0       	ldi	r24, 0x04	; 4
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2d 85       	ldd	r18, Y+13	; 0x0d
     672:	3e 85       	ldd	r19, Y+14	; 0x0e
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
     678:	9e 87       	std	Y+14, r25	; 0x0e
     67a:	8d 87       	std	Y+13, r24	; 0x0d
     67c:	8d 85       	ldd	r24, Y+13	; 0x0d
     67e:	9e 85       	ldd	r25, Y+14	; 0x0e
     680:	89 2b       	or	r24, r25
     682:	09 f4       	brne	.+2      	; 0x686 <pvPortMalloc+0x54>
     684:	b8 c0       	rjmp	.+368    	; 0x7f6 <pvPortMalloc+0x1c4>
     686:	8d 85       	ldd	r24, Y+13	; 0x0d
     688:	9e 85       	ldd	r25, Y+14	; 0x0e
     68a:	8b 3d       	cpi	r24, 0xDB	; 219
     68c:	95 40       	sbci	r25, 0x05	; 5
     68e:	08 f0       	brcs	.+2      	; 0x692 <pvPortMalloc+0x60>
     690:	b2 c0       	rjmp	.+356    	; 0x7f6 <pvPortMalloc+0x1c4>
     692:	8c e3       	ldi	r24, 0x3C	; 60
     694:	97 e0       	ldi	r25, 0x07	; 7
     696:	9c 83       	std	Y+4, r25	; 0x04
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <xStart>
     69e:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <xStart+0x1>
     6a2:	9a 83       	std	Y+2, r25	; 0x02
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	0b c0       	rjmp	.+22     	; 0x6be <pvPortMalloc+0x8c>
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	9c 83       	std	Y+4, r25	; 0x04
     6ae:	8b 83       	std	Y+3, r24	; 0x03
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	9a 83       	std	Y+2, r25	; 0x02
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	fc 01       	movw	r30, r24
     6c4:	22 81       	ldd	r18, Z+2	; 0x02
     6c6:	33 81       	ldd	r19, Z+3	; 0x03
     6c8:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ca:	9e 85       	ldd	r25, Y+14	; 0x0e
     6cc:	28 17       	cp	r18, r24
     6ce:	39 07       	cpc	r19, r25
     6d0:	38 f4       	brcc	.+14     	; 0x6e0 <pvPortMalloc+0xae>
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	fc 01       	movw	r30, r24
     6d8:	80 81       	ld	r24, Z
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	89 2b       	or	r24, r25
     6de:	21 f7       	brne	.-56     	; 0x6a8 <pvPortMalloc+0x76>
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	9a 81       	ldd	r25, Y+2	; 0x02
     6e4:	80 54       	subi	r24, 0x40	; 64
     6e6:	97 40       	sbci	r25, 0x07	; 7
     6e8:	09 f4       	brne	.+2      	; 0x6ec <pvPortMalloc+0xba>
     6ea:	85 c0       	rjmp	.+266    	; 0x7f6 <pvPortMalloc+0x1c4>
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 81       	ld	r18, Z
     6f4:	31 81       	ldd	r19, Z+1	; 0x01
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	82 0f       	add	r24, r18
     6fc:	93 1f       	adc	r25, r19
     6fe:	9e 83       	std	Y+6, r25	; 0x06
     700:	8d 83       	std	Y+5, r24	; 0x05
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02
     706:	fc 01       	movw	r30, r24
     708:	20 81       	ld	r18, Z
     70a:	31 81       	ldd	r19, Z+1	; 0x01
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	9c 81       	ldd	r25, Y+4	; 0x04
     710:	fc 01       	movw	r30, r24
     712:	31 83       	std	Z+1, r19	; 0x01
     714:	20 83       	st	Z, r18
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	fc 01       	movw	r30, r24
     71c:	22 81       	ldd	r18, Z+2	; 0x02
     71e:	33 81       	ldd	r19, Z+3	; 0x03
     720:	8d 85       	ldd	r24, Y+13	; 0x0d
     722:	9e 85       	ldd	r25, Y+14	; 0x0e
     724:	28 1b       	sub	r18, r24
     726:	39 0b       	sbc	r19, r25
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	82 17       	cp	r24, r18
     732:	93 07       	cpc	r25, r19
     734:	08 f0       	brcs	.+2      	; 0x738 <pvPortMalloc+0x106>
     736:	4e c0       	rjmp	.+156    	; 0x7d4 <pvPortMalloc+0x1a2>
     738:	29 81       	ldd	r18, Y+1	; 0x01
     73a:	3a 81       	ldd	r19, Y+2	; 0x02
     73c:	8d 85       	ldd	r24, Y+13	; 0x0d
     73e:	9e 85       	ldd	r25, Y+14	; 0x0e
     740:	82 0f       	add	r24, r18
     742:	93 1f       	adc	r25, r19
     744:	9a 87       	std	Y+10, r25	; 0x0a
     746:	89 87       	std	Y+9, r24	; 0x09
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	fc 01       	movw	r30, r24
     74e:	22 81       	ldd	r18, Z+2	; 0x02
     750:	33 81       	ldd	r19, Z+3	; 0x03
     752:	8d 85       	ldd	r24, Y+13	; 0x0d
     754:	9e 85       	ldd	r25, Y+14	; 0x0e
     756:	28 1b       	sub	r18, r24
     758:	39 0b       	sbc	r19, r25
     75a:	89 85       	ldd	r24, Y+9	; 0x09
     75c:	9a 85       	ldd	r25, Y+10	; 0x0a
     75e:	fc 01       	movw	r30, r24
     760:	33 83       	std	Z+3, r19	; 0x03
     762:	22 83       	std	Z+2, r18	; 0x02
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	9a 81       	ldd	r25, Y+2	; 0x02
     768:	2d 85       	ldd	r18, Y+13	; 0x0d
     76a:	3e 85       	ldd	r19, Y+14	; 0x0e
     76c:	fc 01       	movw	r30, r24
     76e:	33 83       	std	Z+3, r19	; 0x03
     770:	22 83       	std	Z+2, r18	; 0x02
     772:	89 85       	ldd	r24, Y+9	; 0x09
     774:	9a 85       	ldd	r25, Y+10	; 0x0a
     776:	fc 01       	movw	r30, r24
     778:	82 81       	ldd	r24, Z+2	; 0x02
     77a:	93 81       	ldd	r25, Z+3	; 0x03
     77c:	9c 87       	std	Y+12, r25	; 0x0c
     77e:	8b 87       	std	Y+11, r24	; 0x0b
     780:	8c e3       	ldi	r24, 0x3C	; 60
     782:	97 e0       	ldi	r25, 0x07	; 7
     784:	98 87       	std	Y+8, r25	; 0x08
     786:	8f 83       	std	Y+7, r24	; 0x07
     788:	07 c0       	rjmp	.+14     	; 0x798 <pvPortMalloc+0x166>
     78a:	8f 81       	ldd	r24, Y+7	; 0x07
     78c:	98 85       	ldd	r25, Y+8	; 0x08
     78e:	fc 01       	movw	r30, r24
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	98 87       	std	Y+8, r25	; 0x08
     796:	8f 83       	std	Y+7, r24	; 0x07
     798:	8f 81       	ldd	r24, Y+7	; 0x07
     79a:	98 85       	ldd	r25, Y+8	; 0x08
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	fc 01       	movw	r30, r24
     7a4:	22 81       	ldd	r18, Z+2	; 0x02
     7a6:	33 81       	ldd	r19, Z+3	; 0x03
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 17       	cp	r18, r24
     7ae:	39 07       	cpc	r19, r25
     7b0:	60 f3       	brcs	.-40     	; 0x78a <pvPortMalloc+0x158>
     7b2:	8f 81       	ldd	r24, Y+7	; 0x07
     7b4:	98 85       	ldd	r25, Y+8	; 0x08
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 81       	ld	r18, Z
     7ba:	31 81       	ldd	r19, Z+1	; 0x01
     7bc:	89 85       	ldd	r24, Y+9	; 0x09
     7be:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c0:	fc 01       	movw	r30, r24
     7c2:	31 83       	std	Z+1, r19	; 0x01
     7c4:	20 83       	st	Z, r18
     7c6:	8f 81       	ldd	r24, Y+7	; 0x07
     7c8:	98 85       	ldd	r25, Y+8	; 0x08
     7ca:	29 85       	ldd	r18, Y+9	; 0x09
     7cc:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ce:	fc 01       	movw	r30, r24
     7d0:	31 83       	std	Z+1, r19	; 0x01
     7d2:	20 83       	st	Z, r18
     7d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	fc 01       	movw	r30, r24
     7e2:	82 81       	ldd	r24, Z+2	; 0x02
     7e4:	93 81       	ldd	r25, Z+3	; 0x03
     7e6:	a9 01       	movw	r20, r18
     7e8:	48 1b       	sub	r20, r24
     7ea:	59 0b       	sbc	r21, r25
     7ec:	ca 01       	movw	r24, r20
     7ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     7f6:	0e 94 1f 0a 	call	0x143e	; 0x143e <xTaskResumeAll>
     7fa:	8d 81       	ldd	r24, Y+5	; 0x05
     7fc:	9e 81       	ldd	r25, Y+6	; 0x06
     7fe:	2e 96       	adiw	r28, 0x0e	; 14
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <vPortFree>:
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	2a 97       	sbiw	r28, 0x0a	; 10
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	9a 87       	std	Y+10, r25	; 0x0a
     826:	89 87       	std	Y+9, r24	; 0x09
     828:	89 85       	ldd	r24, Y+9	; 0x09
     82a:	9a 85       	ldd	r25, Y+10	; 0x0a
     82c:	9c 83       	std	Y+4, r25	; 0x04
     82e:	8b 83       	std	Y+3, r24	; 0x03
     830:	89 85       	ldd	r24, Y+9	; 0x09
     832:	9a 85       	ldd	r25, Y+10	; 0x0a
     834:	89 2b       	or	r24, r25
     836:	09 f4       	brne	.+2      	; 0x83a <vPortFree+0x2a>
     838:	53 c0       	rjmp	.+166    	; 0x8e0 <vPortFree+0xd0>
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	91 95       	neg	r25
     840:	81 95       	neg	r24
     842:	91 09       	sbc	r25, r1
     844:	2b 81       	ldd	r18, Y+3	; 0x03
     846:	3c 81       	ldd	r19, Y+4	; 0x04
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	8b 83       	std	Y+3, r24	; 0x03
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	9e 83       	std	Y+6, r25	; 0x06
     856:	8d 83       	std	Y+5, r24	; 0x05
     858:	0e 94 12 0a 	call	0x1424	; 0x1424 <vTaskSuspendAll>
     85c:	8d 81       	ldd	r24, Y+5	; 0x05
     85e:	9e 81       	ldd	r25, Y+6	; 0x06
     860:	fc 01       	movw	r30, r24
     862:	82 81       	ldd	r24, Z+2	; 0x02
     864:	93 81       	ldd	r25, Z+3	; 0x03
     866:	98 87       	std	Y+8, r25	; 0x08
     868:	8f 83       	std	Y+7, r24	; 0x07
     86a:	8c e3       	ldi	r24, 0x3C	; 60
     86c:	97 e0       	ldi	r25, 0x07	; 7
     86e:	9a 83       	std	Y+2, r25	; 0x02
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	07 c0       	rjmp	.+14     	; 0x882 <vPortFree+0x72>
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	9a 81       	ldd	r25, Y+2	; 0x02
     878:	fc 01       	movw	r30, r24
     87a:	80 81       	ld	r24, Z
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	fc 01       	movw	r30, r24
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	fc 01       	movw	r30, r24
     88e:	22 81       	ldd	r18, Z+2	; 0x02
     890:	33 81       	ldd	r19, Z+3	; 0x03
     892:	8f 81       	ldd	r24, Y+7	; 0x07
     894:	98 85       	ldd	r25, Y+8	; 0x08
     896:	28 17       	cp	r18, r24
     898:	39 07       	cpc	r19, r25
     89a:	60 f3       	brcs	.-40     	; 0x874 <vPortFree+0x64>
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	9a 81       	ldd	r25, Y+2	; 0x02
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 81       	ld	r18, Z
     8a4:	31 81       	ldd	r19, Z+1	; 0x01
     8a6:	8d 81       	ldd	r24, Y+5	; 0x05
     8a8:	9e 81       	ldd	r25, Y+6	; 0x06
     8aa:	fc 01       	movw	r30, r24
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
     8b4:	2d 81       	ldd	r18, Y+5	; 0x05
     8b6:	3e 81       	ldd	r19, Y+6	; 0x06
     8b8:	fc 01       	movw	r30, r24
     8ba:	31 83       	std	Z+1, r19	; 0x01
     8bc:	20 83       	st	Z, r18
     8be:	8d 81       	ldd	r24, Y+5	; 0x05
     8c0:	9e 81       	ldd	r25, Y+6	; 0x06
     8c2:	fc 01       	movw	r30, r24
     8c4:	22 81       	ldd	r18, Z+2	; 0x02
     8c6:	33 81       	ldd	r19, Z+3	; 0x03
     8c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8d0:	82 0f       	add	r24, r18
     8d2:	93 1f       	adc	r25, r19
     8d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     8dc:	0e 94 1f 0a 	call	0x143e	; 0x143e <xTaskResumeAll>
     8e0:	00 00       	nop
     8e2:	2a 96       	adiw	r28, 0x0a	; 10
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <prvHeapInit>:
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <prvHeapInit+0x6>
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <prvHeapInit+0x8>
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	81 e6       	ldi	r24, 0x61	; 97
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	9a 83       	std	Y+2, r25	; 0x02
     906:	89 83       	std	Y+1, r24	; 0x01
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <xStart+0x1>
     910:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <xStart>
     914:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <xStart+0x3>
     918:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <xStart+0x2>
     91c:	8b ed       	ldi	r24, 0xDB	; 219
     91e:	95 e0       	ldi	r25, 0x05	; 5
     920:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <xEnd+0x3>
     924:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <xEnd+0x2>
     928:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <xEnd+0x1>
     92c:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <xEnd>
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	9c 83       	std	Y+4, r25	; 0x04
     936:	8b 83       	std	Y+3, r24	; 0x03
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	2b ed       	ldi	r18, 0xDB	; 219
     93e:	35 e0       	ldi	r19, 0x05	; 5
     940:	fc 01       	movw	r30, r24
     942:	33 83       	std	Z+3, r19	; 0x03
     944:	22 83       	std	Z+2, r18	; 0x02
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	9c 81       	ldd	r25, Y+4	; 0x04
     94a:	20 e4       	ldi	r18, 0x40	; 64
     94c:	37 e0       	ldi	r19, 0x07	; 7
     94e:	fc 01       	movw	r30, r24
     950:	31 83       	std	Z+1, r19	; 0x01
     952:	20 83       	st	Z, r18
     954:	00 00       	nop
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <pxPortInitialiseStack>:
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	28 97       	sbiw	r28, 0x08	; 8
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	7e 83       	std	Y+6, r23	; 0x06
     97e:	6d 83       	std	Y+5, r22	; 0x05
     980:	58 87       	std	Y+8, r21	; 0x08
     982:	4f 83       	std	Y+7, r20	; 0x07
     984:	8b 81       	ldd	r24, Y+3	; 0x03
     986:	9c 81       	ldd	r25, Y+4	; 0x04
     988:	21 e1       	ldi	r18, 0x11	; 17
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	9c 81       	ldd	r25, Y+4	; 0x04
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	9c 83       	std	Y+4, r25	; 0x04
     996:	8b 83       	std	Y+3, r24	; 0x03
     998:	8b 81       	ldd	r24, Y+3	; 0x03
     99a:	9c 81       	ldd	r25, Y+4	; 0x04
     99c:	22 e2       	ldi	r18, 0x22	; 34
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	23 e3       	ldi	r18, 0x33	; 51
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	8d 81       	ldd	r24, Y+5	; 0x05
     9c2:	9e 81       	ldd	r25, Y+6	; 0x06
     9c4:	9a 83       	std	Y+2, r25	; 0x02
     9c6:	89 83       	std	Y+1, r24	; 0x01
     9c8:	29 81       	ldd	r18, Y+1	; 0x01
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
     9d2:	8b 81       	ldd	r24, Y+3	; 0x03
     9d4:	9c 81       	ldd	r25, Y+4	; 0x04
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	8b 83       	std	Y+3, r24	; 0x03
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	9a 81       	ldd	r25, Y+2	; 0x02
     9e0:	89 2f       	mov	r24, r25
     9e2:	99 27       	eor	r25, r25
     9e4:	9a 83       	std	Y+2, r25	; 0x02
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	29 81       	ldd	r18, Y+1	; 0x01
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	9c 81       	ldd	r25, Y+4	; 0x04
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	fc 01       	movw	r30, r24
     a02:	10 82       	st	Z, r1
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 83       	std	Y+3, r24	; 0x03
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	9c 81       	ldd	r25, Y+4	; 0x04
     a12:	20 e8       	ldi	r18, 0x80	; 128
     a14:	fc 01       	movw	r30, r24
     a16:	20 83       	st	Z, r18
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	9c 81       	ldd	r25, Y+4	; 0x04
     a26:	fc 01       	movw	r30, r24
     a28:	10 82       	st	Z, r1
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	9c 83       	std	Y+4, r25	; 0x04
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	8b 81       	ldd	r24, Y+3	; 0x03
     a36:	9c 81       	ldd	r25, Y+4	; 0x04
     a38:	22 e0       	ldi	r18, 0x02	; 2
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
     a3e:	8b 81       	ldd	r24, Y+3	; 0x03
     a40:	9c 81       	ldd	r25, Y+4	; 0x04
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	9c 83       	std	Y+4, r25	; 0x04
     a46:	8b 83       	std	Y+3, r24	; 0x03
     a48:	8b 81       	ldd	r24, Y+3	; 0x03
     a4a:	9c 81       	ldd	r25, Y+4	; 0x04
     a4c:	23 e0       	ldi	r18, 0x03	; 3
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9c 81       	ldd	r25, Y+4	; 0x04
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	8b 83       	std	Y+3, r24	; 0x03
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	24 e0       	ldi	r18, 0x04	; 4
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
     a68:	9c 81       	ldd	r25, Y+4	; 0x04
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	9c 83       	std	Y+4, r25	; 0x04
     a6e:	8b 83       	std	Y+3, r24	; 0x03
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	9c 81       	ldd	r25, Y+4	; 0x04
     a74:	25 e0       	ldi	r18, 0x05	; 5
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	26 e0       	ldi	r18, 0x06	; 6
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	8b 83       	std	Y+3, r24	; 0x03
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	27 e0       	ldi	r18, 0x07	; 7
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 83       	st	Z, r18
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	8b 83       	std	Y+3, r24	; 0x03
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	9c 81       	ldd	r25, Y+4	; 0x04
     ab0:	28 e0       	ldi	r18, 0x08	; 8
     ab2:	fc 01       	movw	r30, r24
     ab4:	20 83       	st	Z, r18
     ab6:	8b 81       	ldd	r24, Y+3	; 0x03
     ab8:	9c 81       	ldd	r25, Y+4	; 0x04
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	9c 83       	std	Y+4, r25	; 0x04
     abe:	8b 83       	std	Y+3, r24	; 0x03
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	9c 81       	ldd	r25, Y+4	; 0x04
     ac4:	29 e0       	ldi	r18, 0x09	; 9
     ac6:	fc 01       	movw	r30, r24
     ac8:	20 83       	st	Z, r18
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	9c 83       	std	Y+4, r25	; 0x04
     ad2:	8b 83       	std	Y+3, r24	; 0x03
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	20 e1       	ldi	r18, 0x10	; 16
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	9c 83       	std	Y+4, r25	; 0x04
     ae6:	8b 83       	std	Y+3, r24	; 0x03
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	21 e1       	ldi	r18, 0x11	; 17
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	9c 81       	ldd	r25, Y+4	; 0x04
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	9c 83       	std	Y+4, r25	; 0x04
     afa:	8b 83       	std	Y+3, r24	; 0x03
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	22 e1       	ldi	r18, 0x12	; 18
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	9c 81       	ldd	r25, Y+4	; 0x04
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	9c 83       	std	Y+4, r25	; 0x04
     b0e:	8b 83       	std	Y+3, r24	; 0x03
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	9c 81       	ldd	r25, Y+4	; 0x04
     b14:	23 e1       	ldi	r18, 0x13	; 19
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
     b1a:	8b 81       	ldd	r24, Y+3	; 0x03
     b1c:	9c 81       	ldd	r25, Y+4	; 0x04
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	9c 81       	ldd	r25, Y+4	; 0x04
     b28:	24 e1       	ldi	r18, 0x14	; 20
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 83       	st	Z, r18
     b2e:	8b 81       	ldd	r24, Y+3	; 0x03
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	9c 83       	std	Y+4, r25	; 0x04
     b36:	8b 83       	std	Y+3, r24	; 0x03
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	25 e1       	ldi	r18, 0x15	; 21
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
     b42:	8b 81       	ldd	r24, Y+3	; 0x03
     b44:	9c 81       	ldd	r25, Y+4	; 0x04
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	9c 83       	std	Y+4, r25	; 0x04
     b4a:	8b 83       	std	Y+3, r24	; 0x03
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	26 e1       	ldi	r18, 0x16	; 22
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	9c 83       	std	Y+4, r25	; 0x04
     b5e:	8b 83       	std	Y+3, r24	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	27 e1       	ldi	r18, 0x17	; 23
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	9c 83       	std	Y+4, r25	; 0x04
     b72:	8b 83       	std	Y+3, r24	; 0x03
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	28 e1       	ldi	r18, 0x18	; 24
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	29 e1       	ldi	r18, 0x19	; 25
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	9c 81       	ldd	r25, Y+4	; 0x04
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	9c 83       	std	Y+4, r25	; 0x04
     b9a:	8b 83       	std	Y+3, r24	; 0x03
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	20 e2       	ldi	r18, 0x20	; 32
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	9c 83       	std	Y+4, r25	; 0x04
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	21 e2       	ldi	r18, 0x21	; 33
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	9c 83       	std	Y+4, r25	; 0x04
     bc2:	8b 83       	std	Y+3, r24	; 0x03
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	22 e2       	ldi	r18, 0x22	; 34
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	23 e2       	ldi	r18, 0x23	; 35
     bde:	fc 01       	movw	r30, r24
     be0:	20 83       	st	Z, r18
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	9c 83       	std	Y+4, r25	; 0x04
     bea:	8b 83       	std	Y+3, r24	; 0x03
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	29 81       	ldd	r18, Y+1	; 0x01
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	9c 83       	std	Y+4, r25	; 0x04
     c06:	8b 83       	std	Y+3, r24	; 0x03
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	89 2f       	mov	r24, r25
     c0e:	99 27       	eor	r25, r25
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	29 81       	ldd	r18, Y+1	; 0x01
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	26 e2       	ldi	r18, 0x26	; 38
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	9c 83       	std	Y+4, r25	; 0x04
     c3a:	8b 83       	std	Y+3, r24	; 0x03
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	27 e2       	ldi	r18, 0x27	; 39
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	28 e2       	ldi	r18, 0x28	; 40
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	9c 83       	std	Y+4, r25	; 0x04
     c62:	8b 83       	std	Y+3, r24	; 0x03
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	9c 81       	ldd	r25, Y+4	; 0x04
     c68:	29 e2       	ldi	r18, 0x29	; 41
     c6a:	fc 01       	movw	r30, r24
     c6c:	20 83       	st	Z, r18
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	9c 83       	std	Y+4, r25	; 0x04
     c76:	8b 83       	std	Y+3, r24	; 0x03
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	20 e3       	ldi	r18, 0x30	; 48
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	9c 83       	std	Y+4, r25	; 0x04
     c8a:	8b 83       	std	Y+3, r24	; 0x03
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	21 e3       	ldi	r18, 0x31	; 49
     c92:	fc 01       	movw	r30, r24
     c94:	20 83       	st	Z, r18
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	9c 81       	ldd	r25, Y+4	; 0x04
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	9c 83       	std	Y+4, r25	; 0x04
     c9e:	8b 83       	std	Y+3, r24	; 0x03
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	28 96       	adiw	r28, 0x08	; 8
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <xPortStartScheduler>:
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	0e 94 46 07 	call	0xe8c	; 0xe8c <prvSetupTimerInterrupt>
     cc2:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     cc6:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     cca:	cd 91       	ld	r28, X+
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	dd 91       	ld	r29, X+
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	ff 91       	pop	r31
     cd4:	ef 91       	pop	r30
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	9f 90       	pop	r9
     d00:	8f 90       	pop	r8
     d02:	7f 90       	pop	r7
     d04:	6f 90       	pop	r6
     d06:	5f 90       	pop	r5
     d08:	4f 90       	pop	r4
     d0a:	3f 90       	pop	r3
     d0c:	2f 90       	pop	r2
     d0e:	1f 90       	pop	r1
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	08 95       	ret
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <vPortYield>:
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	0f 92       	push	r0
     d28:	1f 92       	push	r1
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 92       	push	r2
     d2e:	3f 92       	push	r3
     d30:	4f 92       	push	r4
     d32:	5f 92       	push	r5
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
     d68:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     d6c:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     d70:	0d b6       	in	r0, 0x3d	; 61
     d72:	0d 92       	st	X+, r0
     d74:	0e b6       	in	r0, 0x3e	; 62
     d76:	0d 92       	st	X+, r0
     d78:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <vTaskSwitchContext>
     d7c:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     d80:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     d84:	cd 91       	ld	r28, X+
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	dd 91       	ld	r29, X+
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	df 90       	pop	r13
     db2:	cf 90       	pop	r12
     db4:	bf 90       	pop	r11
     db6:	af 90       	pop	r10
     db8:	9f 90       	pop	r9
     dba:	8f 90       	pop	r8
     dbc:	7f 90       	pop	r7
     dbe:	6f 90       	pop	r6
     dc0:	5f 90       	pop	r5
     dc2:	4f 90       	pop	r4
     dc4:	3f 90       	pop	r3
     dc6:	2f 90       	pop	r2
     dc8:	1f 90       	pop	r1
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	08 95       	ret
	...

00000dd4 <vPortYieldFromTick>:
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	0f 92       	push	r0
     ddc:	1f 92       	push	r1
     dde:	11 24       	eor	r1, r1
     de0:	2f 92       	push	r2
     de2:	3f 92       	push	r3
     de4:	4f 92       	push	r4
     de6:	5f 92       	push	r5
     de8:	6f 92       	push	r6
     dea:	7f 92       	push	r7
     dec:	8f 92       	push	r8
     dee:	9f 92       	push	r9
     df0:	af 92       	push	r10
     df2:	bf 92       	push	r11
     df4:	cf 92       	push	r12
     df6:	df 92       	push	r13
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	4f 93       	push	r20
     e06:	5f 93       	push	r21
     e08:	6f 93       	push	r22
     e0a:	7f 93       	push	r23
     e0c:	8f 93       	push	r24
     e0e:	9f 93       	push	r25
     e10:	af 93       	push	r26
     e12:	bf 93       	push	r27
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
     e1c:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     e20:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     e24:	0d b6       	in	r0, 0x3d	; 61
     e26:	0d 92       	st	X+, r0
     e28:	0e b6       	in	r0, 0x3e	; 62
     e2a:	0d 92       	st	X+, r0
     e2c:	0e 94 cd 0a 	call	0x159a	; 0x159a <xTaskIncrementTick>
     e30:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <vTaskSwitchContext>
     e34:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     e38:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     e3c:	cd 91       	ld	r28, X+
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	dd 91       	ld	r29, X+
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	bf 91       	pop	r27
     e4e:	af 91       	pop	r26
     e50:	9f 91       	pop	r25
     e52:	8f 91       	pop	r24
     e54:	7f 91       	pop	r23
     e56:	6f 91       	pop	r22
     e58:	5f 91       	pop	r21
     e5a:	4f 91       	pop	r20
     e5c:	3f 91       	pop	r19
     e5e:	2f 91       	pop	r18
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	9f 90       	pop	r9
     e72:	8f 90       	pop	r8
     e74:	7f 90       	pop	r7
     e76:	6f 90       	pop	r6
     e78:	5f 90       	pop	r5
     e7a:	4f 90       	pop	r4
     e7c:	3f 90       	pop	r3
     e7e:	2f 90       	pop	r2
     e80:	1f 90       	pop	r1
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0
     e88:	08 95       	ret
	...

00000e8c <prvSetupTimerInterrupt>:
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	00 d0       	rcall	.+0      	; 0xe92 <prvSetupTimerInterrupt+0x6>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <prvSetupTimerInterrupt+0x8>
     e94:	1f 92       	push	r1
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	80 e8       	ldi	r24, 0x80	; 128
     e9c:	9e e3       	ldi	r25, 0x3E	; 62
     e9e:	a0 e0       	ldi	r26, 0x00	; 0
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	ab 83       	std	Y+3, r26	; 0x03
     ea8:	bc 83       	std	Y+4, r27	; 0x04
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	ab 81       	ldd	r26, Y+3	; 0x03
     eb0:	bc 81       	ldd	r27, Y+4	; 0x04
     eb2:	68 94       	set
     eb4:	15 f8       	bld	r1, 5
     eb6:	b6 95       	lsr	r27
     eb8:	a7 95       	ror	r26
     eba:	97 95       	ror	r25
     ebc:	87 95       	ror	r24
     ebe:	16 94       	lsr	r1
     ec0:	d1 f7       	brne	.-12     	; 0xeb6 <prvSetupTimerInterrupt+0x2a>
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	ab 83       	std	Y+3, r26	; 0x03
     ec8:	bc 83       	std	Y+4, r27	; 0x04
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	ab 81       	ldd	r26, Y+3	; 0x03
     ed0:	bc 81       	ldd	r27, Y+4	; 0x04
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	a1 09       	sbc	r26, r1
     ed6:	b1 09       	sbc	r27, r1
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	ab 83       	std	Y+3, r26	; 0x03
     ede:	bc 83       	std	Y+4, r27	; 0x04
     ee0:	88 e8       	ldi	r24, 0x88	; 136
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	29 81       	ldd	r18, Y+1	; 0x01
     ee6:	3a 81       	ldd	r19, Y+2	; 0x02
     ee8:	fc 01       	movw	r30, r24
     eea:	31 83       	std	Z+1, r19	; 0x01
     eec:	20 83       	st	Z, r18
     eee:	80 e8       	ldi	r24, 0x80	; 128
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	20 e8       	ldi	r18, 0x80	; 128
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	f9 01       	movw	r30, r18
     ef8:	20 81       	ld	r18, Z
     efa:	2c 7f       	andi	r18, 0xFC	; 252
     efc:	fc 01       	movw	r30, r24
     efe:	20 83       	st	Z, r18
     f00:	8b e0       	ldi	r24, 0x0B	; 11
     f02:	8d 83       	std	Y+5, r24	; 0x05
     f04:	81 e8       	ldi	r24, 0x81	; 129
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	2d 81       	ldd	r18, Y+5	; 0x05
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18
     f0e:	8f e6       	ldi	r24, 0x6F	; 111
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	fc 01       	movw	r30, r24
     f14:	80 81       	ld	r24, Z
     f16:	8d 83       	std	Y+5, r24	; 0x05
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	82 60       	ori	r24, 0x02	; 2
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	8f e6       	ldi	r24, 0x6F	; 111
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	2d 81       	ldd	r18, Y+5	; 0x05
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
     f28:	00 00       	nop
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <__vector_11>:
     f3a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vPortYieldFromTick>
     f3e:	18 95       	reti
	...

00000f42 <xTaskCreate>:
     f42:	8f 92       	push	r8
     f44:	9f 92       	push	r9
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	60 97       	sbiw	r28, 0x10	; 16
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	9f 83       	std	Y+7, r25	; 0x07
     f6c:	8e 83       	std	Y+6, r24	; 0x06
     f6e:	79 87       	std	Y+9, r23	; 0x09
     f70:	68 87       	std	Y+8, r22	; 0x08
     f72:	5b 87       	std	Y+11, r21	; 0x0b
     f74:	4a 87       	std	Y+10, r20	; 0x0a
     f76:	3d 87       	std	Y+13, r19	; 0x0d
     f78:	2c 87       	std	Y+12, r18	; 0x0c
     f7a:	0e 87       	std	Y+14, r16	; 0x0e
     f7c:	f8 8a       	std	Y+16, r15	; 0x10
     f7e:	ef 86       	std	Y+15, r14	; 0x0f
     f80:	8a 85       	ldd	r24, Y+10	; 0x0a
     f82:	9b 85       	ldd	r25, Y+11	; 0x0b
     f84:	0e 94 19 03 	call	0x632	; 0x632 <pvPortMalloc>
     f88:	9d 83       	std	Y+5, r25	; 0x05
     f8a:	8c 83       	std	Y+4, r24	; 0x04
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	89 2b       	or	r24, r25
     f92:	b9 f0       	breq	.+46     	; 0xfc2 <xTaskCreate+0x80>
     f94:	84 e2       	ldi	r24, 0x24	; 36
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 19 03 	call	0x632	; 0x632 <pvPortMalloc>
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	89 2b       	or	r24, r25
     fa6:	41 f0       	breq	.+16     	; 0xfb8 <xTaskCreate+0x76>
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	fc 01       	movw	r30, r24
     fb2:	30 8f       	std	Z+24, r19	; 0x18
     fb4:	27 8b       	std	Z+23, r18	; 0x17
     fb6:	07 c0       	rjmp	.+14     	; 0xfc6 <xTaskCreate+0x84>
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	0e 94 08 04 	call	0x810	; 0x810 <vPortFree>
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <xTaskCreate+0x84>
     fc2:	1a 82       	std	Y+2, r1	; 0x02
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	89 2b       	or	r24, r25
     fcc:	09 f1       	breq	.+66     	; 0x1010 <xTaskCreate+0xce>
     fce:	8a 85       	ldd	r24, Y+10	; 0x0a
     fd0:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd2:	cc 01       	movw	r24, r24
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	09 81       	ldd	r16, Y+1	; 0x01
     fda:	1a 81       	ldd	r17, Y+2	; 0x02
     fdc:	4f 85       	ldd	r20, Y+15	; 0x0f
     fde:	58 89       	ldd	r21, Y+16	; 0x10
     fe0:	2c 85       	ldd	r18, Y+12	; 0x0c
     fe2:	3d 85       	ldd	r19, Y+13	; 0x0d
     fe4:	68 85       	ldd	r22, Y+8	; 0x08
     fe6:	79 85       	ldd	r23, Y+9	; 0x09
     fe8:	ee 81       	ldd	r30, Y+6	; 0x06
     fea:	ff 81       	ldd	r31, Y+7	; 0x07
     fec:	81 2c       	mov	r8, r1
     fee:	91 2c       	mov	r9, r1
     ff0:	58 01       	movw	r10, r16
     ff2:	6a 01       	movw	r12, r20
     ff4:	ee 84       	ldd	r14, Y+14	; 0x0e
     ff6:	89 01       	movw	r16, r18
     ff8:	9c 01       	movw	r18, r24
     ffa:	ad 01       	movw	r20, r26
     ffc:	cf 01       	movw	r24, r30
     ffe:	0e 94 1e 08 	call	0x103c	; 0x103c <prvInitialiseNewTask>
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	0e 94 e5 08 	call	0x11ca	; 0x11ca <prvAddNewTaskToReadyList>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	8b 83       	std	Y+3, r24	; 0x03
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <xTaskCreate+0xd2>
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	60 96       	adiw	r28, 0x10	; 16
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	8f 90       	pop	r8
    103a:	08 95       	ret

0000103c <prvInitialiseNewTask>:
    103c:	8f 92       	push	r8
    103e:	9f 92       	push	r9
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	64 97       	sbiw	r28, 0x14	; 20
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	9d 83       	std	Y+5, r25	; 0x05
    1064:	8c 83       	std	Y+4, r24	; 0x04
    1066:	7f 83       	std	Y+7, r23	; 0x07
    1068:	6e 83       	std	Y+6, r22	; 0x06
    106a:	28 87       	std	Y+8, r18	; 0x08
    106c:	39 87       	std	Y+9, r19	; 0x09
    106e:	4a 87       	std	Y+10, r20	; 0x0a
    1070:	5b 87       	std	Y+11, r21	; 0x0b
    1072:	1d 87       	std	Y+13, r17	; 0x0d
    1074:	0c 87       	std	Y+12, r16	; 0x0c
    1076:	ee 86       	std	Y+14, r14	; 0x0e
    1078:	d8 8a       	std	Y+16, r13	; 0x10
    107a:	cf 86       	std	Y+15, r12	; 0x0f
    107c:	ba 8a       	std	Y+18, r11	; 0x12
    107e:	a9 8a       	std	Y+17, r10	; 0x11
    1080:	9c 8a       	std	Y+20, r9	; 0x14
    1082:	8b 8a       	std	Y+19, r8	; 0x13
    1084:	89 89       	ldd	r24, Y+17	; 0x11
    1086:	9a 89       	ldd	r25, Y+18	; 0x12
    1088:	fc 01       	movw	r30, r24
    108a:	27 89       	ldd	r18, Z+23	; 0x17
    108c:	30 8d       	ldd	r19, Z+24	; 0x18
    108e:	88 85       	ldd	r24, Y+8	; 0x08
    1090:	99 85       	ldd	r25, Y+9	; 0x09
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	82 0f       	add	r24, r18
    1096:	93 1f       	adc	r25, r19
    1098:	9b 83       	std	Y+3, r25	; 0x03
    109a:	8a 83       	std	Y+2, r24	; 0x02
    109c:	19 82       	std	Y+1, r1	; 0x01
    109e:	21 c0       	rjmp	.+66     	; 0x10e2 <prvInitialiseNewTask+0xa6>
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	29 81       	ldd	r18, Y+1	; 0x01
    10a8:	22 2f       	mov	r18, r18
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4e 81       	ldd	r20, Y+6	; 0x06
    10ae:	5f 81       	ldd	r21, Y+7	; 0x07
    10b0:	24 0f       	add	r18, r20
    10b2:	35 1f       	adc	r19, r21
    10b4:	f9 01       	movw	r30, r18
    10b6:	40 81       	ld	r20, Z
    10b8:	29 89       	ldd	r18, Y+17	; 0x11
    10ba:	3a 89       	ldd	r19, Y+18	; 0x12
    10bc:	82 0f       	add	r24, r18
    10be:	93 1f       	adc	r25, r19
    10c0:	49 96       	adiw	r24, 0x19	; 25
    10c2:	fc 01       	movw	r30, r24
    10c4:	40 83       	st	Z, r20
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	2e 81       	ldd	r18, Y+6	; 0x06
    10ce:	3f 81       	ldd	r19, Y+7	; 0x07
    10d0:	82 0f       	add	r24, r18
    10d2:	93 1f       	adc	r25, r19
    10d4:	fc 01       	movw	r30, r24
    10d6:	80 81       	ld	r24, Z
    10d8:	88 23       	and	r24, r24
    10da:	39 f0       	breq	.+14     	; 0x10ea <prvInitialiseNewTask+0xae>
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	8f 5f       	subi	r24, 0xFF	; 255
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	84 30       	cpi	r24, 0x04	; 4
    10e6:	e0 f2       	brcs	.-72     	; 0x10a0 <prvInitialiseNewTask+0x64>
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <prvInitialiseNewTask+0xb0>
    10ea:	00 00       	nop
    10ec:	89 89       	ldd	r24, Y+17	; 0x11
    10ee:	9a 89       	ldd	r25, Y+18	; 0x12
    10f0:	fc 01       	movw	r30, r24
    10f2:	14 8e       	std	Z+28, r1	; 0x1c
    10f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    10f6:	86 30       	cpi	r24, 0x06	; 6
    10f8:	10 f0       	brcs	.+4      	; 0x10fe <prvInitialiseNewTask+0xc2>
    10fa:	85 e0       	ldi	r24, 0x05	; 5
    10fc:	8e 87       	std	Y+14, r24	; 0x0e
    10fe:	89 89       	ldd	r24, Y+17	; 0x11
    1100:	9a 89       	ldd	r25, Y+18	; 0x12
    1102:	2e 85       	ldd	r18, Y+14	; 0x0e
    1104:	fc 01       	movw	r30, r24
    1106:	26 8b       	std	Z+22, r18	; 0x16
    1108:	89 89       	ldd	r24, Y+17	; 0x11
    110a:	9a 89       	ldd	r25, Y+18	; 0x12
    110c:	02 96       	adiw	r24, 0x02	; 2
    110e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vListInitialiseItem>
    1112:	89 89       	ldd	r24, Y+17	; 0x11
    1114:	9a 89       	ldd	r25, Y+18	; 0x12
    1116:	0c 96       	adiw	r24, 0x0c	; 12
    1118:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vListInitialiseItem>
    111c:	89 89       	ldd	r24, Y+17	; 0x11
    111e:	9a 89       	ldd	r25, Y+18	; 0x12
    1120:	29 89       	ldd	r18, Y+17	; 0x11
    1122:	3a 89       	ldd	r19, Y+18	; 0x12
    1124:	fc 01       	movw	r30, r24
    1126:	31 87       	std	Z+9, r19	; 0x09
    1128:	20 87       	std	Z+8, r18	; 0x08
    112a:	8e 85       	ldd	r24, Y+14	; 0x0e
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	26 e0       	ldi	r18, 0x06	; 6
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	28 1b       	sub	r18, r24
    1136:	39 0b       	sbc	r19, r25
    1138:	89 89       	ldd	r24, Y+17	; 0x11
    113a:	9a 89       	ldd	r25, Y+18	; 0x12
    113c:	fc 01       	movw	r30, r24
    113e:	35 87       	std	Z+13, r19	; 0x0d
    1140:	24 87       	std	Z+12, r18	; 0x0c
    1142:	89 89       	ldd	r24, Y+17	; 0x11
    1144:	9a 89       	ldd	r25, Y+18	; 0x12
    1146:	29 89       	ldd	r18, Y+17	; 0x11
    1148:	3a 89       	ldd	r19, Y+18	; 0x12
    114a:	fc 01       	movw	r30, r24
    114c:	33 8b       	std	Z+19, r19	; 0x13
    114e:	22 8b       	std	Z+18, r18	; 0x12
    1150:	89 89       	ldd	r24, Y+17	; 0x11
    1152:	9a 89       	ldd	r25, Y+18	; 0x12
    1154:	fc 01       	movw	r30, r24
    1156:	16 8e       	std	Z+30, r1	; 0x1e
    1158:	15 8e       	std	Z+29, r1	; 0x1d
    115a:	89 89       	ldd	r24, Y+17	; 0x11
    115c:	9a 89       	ldd	r25, Y+18	; 0x12
    115e:	fc 01       	movw	r30, r24
    1160:	17 8e       	std	Z+31, r1	; 0x1f
    1162:	10 a2       	std	Z+32, r1	; 0x20
    1164:	11 a2       	std	Z+33, r1	; 0x21
    1166:	12 a2       	std	Z+34, r1	; 0x22
    1168:	89 89       	ldd	r24, Y+17	; 0x11
    116a:	9a 89       	ldd	r25, Y+18	; 0x12
    116c:	fc 01       	movw	r30, r24
    116e:	13 a2       	std	Z+35, r1	; 0x23
    1170:	4c 85       	ldd	r20, Y+12	; 0x0c
    1172:	5d 85       	ldd	r21, Y+13	; 0x0d
    1174:	2c 81       	ldd	r18, Y+4	; 0x04
    1176:	3d 81       	ldd	r19, Y+5	; 0x05
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	b9 01       	movw	r22, r18
    117e:	0e 94 b2 04 	call	0x964	; 0x964 <pxPortInitialiseStack>
    1182:	9c 01       	movw	r18, r24
    1184:	89 89       	ldd	r24, Y+17	; 0x11
    1186:	9a 89       	ldd	r25, Y+18	; 0x12
    1188:	fc 01       	movw	r30, r24
    118a:	31 83       	std	Z+1, r19	; 0x01
    118c:	20 83       	st	Z, r18
    118e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1190:	98 89       	ldd	r25, Y+16	; 0x10
    1192:	89 2b       	or	r24, r25
    1194:	39 f0       	breq	.+14     	; 0x11a4 <prvInitialiseNewTask+0x168>
    1196:	8f 85       	ldd	r24, Y+15	; 0x0f
    1198:	98 89       	ldd	r25, Y+16	; 0x10
    119a:	29 89       	ldd	r18, Y+17	; 0x11
    119c:	3a 89       	ldd	r19, Y+18	; 0x12
    119e:	fc 01       	movw	r30, r24
    11a0:	31 83       	std	Z+1, r19	; 0x01
    11a2:	20 83       	st	Z, r18
    11a4:	00 00       	nop
    11a6:	64 96       	adiw	r28, 0x14	; 20
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ef 90       	pop	r14
    11bc:	df 90       	pop	r13
    11be:	cf 90       	pop	r12
    11c0:	bf 90       	pop	r11
    11c2:	af 90       	pop	r10
    11c4:	9f 90       	pop	r9
    11c6:	8f 90       	pop	r8
    11c8:	08 95       	ret

000011ca <prvAddNewTaskToReadyList>:
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <prvAddNewTaskToReadyList+0x6>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	9a 83       	std	Y+2, r25	; 0x02
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	0f 92       	push	r0
    11de:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxCurrentNumberOfTasks>
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxCurrentNumberOfTasks>
    11e8:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    11ec:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    11f0:	89 2b       	or	r24, r25
    11f2:	69 f4       	brne	.+26     	; 0x120e <prvAddNewTaskToReadyList+0x44>
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pxCurrentTCB+0x1>
    11fc:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pxCurrentTCB>
    1200:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxCurrentNumberOfTasks>
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	c9 f4       	brne	.+50     	; 0x123a <prvAddNewTaskToReadyList+0x70>
    1208:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <prvInitialiseTaskLists>
    120c:	16 c0       	rjmp	.+44     	; 0x123a <prvAddNewTaskToReadyList+0x70>
    120e:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <xSchedulerRunning>
    1212:	88 23       	and	r24, r24
    1214:	91 f4       	brne	.+36     	; 0x123a <prvAddNewTaskToReadyList+0x70>
    1216:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    121a:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    121e:	fc 01       	movw	r30, r24
    1220:	26 89       	ldd	r18, Z+22	; 0x16
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	fc 01       	movw	r30, r24
    1228:	86 89       	ldd	r24, Z+22	; 0x16
    122a:	82 17       	cp	r24, r18
    122c:	30 f0       	brcs	.+12     	; 0x123a <prvAddNewTaskToReadyList+0x70>
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pxCurrentTCB+0x1>
    1236:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pxCurrentTCB>
    123a:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <uxTaskNumber>
    123e:	8f 5f       	subi	r24, 0xFF	; 255
    1240:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <uxTaskNumber>
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	fc 01       	movw	r30, r24
    124a:	96 89       	ldd	r25, Z+22	; 0x16
    124c:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <uxTopReadyPriority>
    1250:	89 17       	cp	r24, r25
    1252:	30 f4       	brcc	.+12     	; 0x1260 <prvAddNewTaskToReadyList+0x96>
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	fc 01       	movw	r30, r24
    125a:	86 89       	ldd	r24, Z+22	; 0x16
    125c:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <uxTopReadyPriority>
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	ac 01       	movw	r20, r24
    1266:	4e 5f       	subi	r20, 0xFE	; 254
    1268:	5f 4f       	sbci	r21, 0xFF	; 255
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	fc 01       	movw	r30, r24
    1270:	86 89       	ldd	r24, Z+22	; 0x16
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	c9 01       	movw	r24, r18
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	82 0f       	add	r24, r18
    1286:	93 1f       	adc	r25, r19
    1288:	89 5b       	subi	r24, 0xB9	; 185
    128a:	98 4f       	sbci	r25, 0xF8	; 248
    128c:	ba 01       	movw	r22, r20
    128e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <xSchedulerRunning>
    129a:	88 23       	and	r24, r24
    129c:	71 f0       	breq	.+28     	; 0x12ba <prvAddNewTaskToReadyList+0xf0>
    129e:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    12a2:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    12a6:	fc 01       	movw	r30, r24
    12a8:	26 89       	ldd	r18, Z+22	; 0x16
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	fc 01       	movw	r30, r24
    12b0:	86 89       	ldd	r24, Z+22	; 0x16
    12b2:	28 17       	cp	r18, r24
    12b4:	10 f4       	brcc	.+4      	; 0x12ba <prvAddNewTaskToReadyList+0xf0>
    12b6:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    12ba:	00 00       	nop
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	08 95       	ret

000012c6 <vTaskDelayUntil>:
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	2a 97       	sbiw	r28, 0x0a	; 10
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	98 87       	std	Y+8, r25	; 0x08
    12dc:	8f 83       	std	Y+7, r24	; 0x07
    12de:	7a 87       	std	Y+10, r23	; 0x0a
    12e0:	69 87       	std	Y+9, r22	; 0x09
    12e2:	19 82       	std	Y+1, r1	; 0x01
    12e4:	0e 94 12 0a 	call	0x1424	; 0x1424 <vTaskSuspendAll>
    12e8:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xTickCount>
    12ec:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <xTickCount+0x1>
    12f0:	9b 83       	std	Y+3, r25	; 0x03
    12f2:	8a 83       	std	Y+2, r24	; 0x02
    12f4:	8f 81       	ldd	r24, Y+7	; 0x07
    12f6:	98 85       	ldd	r25, Y+8	; 0x08
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 81       	ld	r18, Z
    12fc:	31 81       	ldd	r19, Z+1	; 0x01
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	9a 85       	ldd	r25, Y+10	; 0x0a
    1302:	82 0f       	add	r24, r18
    1304:	93 1f       	adc	r25, r19
    1306:	9d 83       	std	Y+5, r25	; 0x05
    1308:	8c 83       	std	Y+4, r24	; 0x04
    130a:	8f 81       	ldd	r24, Y+7	; 0x07
    130c:	98 85       	ldd	r25, Y+8	; 0x08
    130e:	fc 01       	movw	r30, r24
    1310:	20 81       	ld	r18, Z
    1312:	31 81       	ldd	r19, Z+1	; 0x01
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	9b 81       	ldd	r25, Y+3	; 0x03
    1318:	82 17       	cp	r24, r18
    131a:	93 07       	cpc	r25, r19
    131c:	a0 f4       	brcc	.+40     	; 0x1346 <vTaskDelayUntil+0x80>
    131e:	8f 81       	ldd	r24, Y+7	; 0x07
    1320:	98 85       	ldd	r25, Y+8	; 0x08
    1322:	fc 01       	movw	r30, r24
    1324:	20 81       	ld	r18, Z
    1326:	31 81       	ldd	r19, Z+1	; 0x01
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	82 17       	cp	r24, r18
    132e:	93 07       	cpc	r25, r19
    1330:	e8 f4       	brcc	.+58     	; 0x136c <vTaskDelayUntil+0xa6>
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	3d 81       	ldd	r19, Y+5	; 0x05
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	9b 81       	ldd	r25, Y+3	; 0x03
    133a:	82 17       	cp	r24, r18
    133c:	93 07       	cpc	r25, r19
    133e:	b0 f4       	brcc	.+44     	; 0x136c <vTaskDelayUntil+0xa6>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	13 c0       	rjmp	.+38     	; 0x136c <vTaskDelayUntil+0xa6>
    1346:	8f 81       	ldd	r24, Y+7	; 0x07
    1348:	98 85       	ldd	r25, Y+8	; 0x08
    134a:	fc 01       	movw	r30, r24
    134c:	20 81       	ld	r18, Z
    134e:	31 81       	ldd	r19, Z+1	; 0x01
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	82 17       	cp	r24, r18
    1356:	93 07       	cpc	r25, r19
    1358:	38 f0       	brcs	.+14     	; 0x1368 <vTaskDelayUntil+0xa2>
    135a:	2c 81       	ldd	r18, Y+4	; 0x04
    135c:	3d 81       	ldd	r19, Y+5	; 0x05
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	9b 81       	ldd	r25, Y+3	; 0x03
    1362:	82 17       	cp	r24, r18
    1364:	93 07       	cpc	r25, r19
    1366:	10 f4       	brcc	.+4      	; 0x136c <vTaskDelayUntil+0xa6>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	8f 81       	ldd	r24, Y+7	; 0x07
    136e:	98 85       	ldd	r25, Y+8	; 0x08
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	fc 01       	movw	r30, r24
    1376:	31 83       	std	Z+1, r19	; 0x01
    1378:	20 83       	st	Z, r18
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	88 23       	and	r24, r24
    137e:	59 f0       	breq	.+22     	; 0x1396 <vTaskDelayUntil+0xd0>
    1380:	2c 81       	ldd	r18, Y+4	; 0x04
    1382:	3d 81       	ldd	r19, Y+5	; 0x05
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	a9 01       	movw	r20, r18
    138a:	48 1b       	sub	r20, r24
    138c:	59 0b       	sbc	r21, r25
    138e:	ca 01       	movw	r24, r20
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <prvAddCurrentTaskToDelayedList>
    1396:	0e 94 1f 0a 	call	0x143e	; 0x143e <xTaskResumeAll>
    139a:	8e 83       	std	Y+6, r24	; 0x06
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	88 23       	and	r24, r24
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <vTaskDelayUntil+0xe0>
    13a2:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    13a6:	00 00       	nop
    13a8:	2a 96       	adiw	r28, 0x0a	; 10
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <vTaskStartScheduler>:
    13ba:	ef 92       	push	r14
    13bc:	ff 92       	push	r15
    13be:	0f 93       	push	r16
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	1f 92       	push	r1
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	0f 2e       	mov	r0, r31
    13cc:	f7 ea       	ldi	r31, 0xA7	; 167
    13ce:	ef 2e       	mov	r14, r31
    13d0:	f7 e0       	ldi	r31, 0x07	; 7
    13d2:	ff 2e       	mov	r15, r31
    13d4:	f0 2d       	mov	r31, r0
    13d6:	00 e0       	ldi	r16, 0x00	; 0
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	44 ec       	ldi	r20, 0xC4	; 196
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	63 e1       	ldi	r22, 0x13	; 19
    13e2:	71 e0       	ldi	r23, 0x01	; 1
    13e4:	8f e6       	ldi	r24, 0x6F	; 111
    13e6:	9c e0       	ldi	r25, 0x0C	; 12
    13e8:	0e 94 a1 07 	call	0xf42	; 0xf42 <xTaskCreate>
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	81 f4       	brne	.+32     	; 0x1414 <vTaskStartScheduler+0x5a>
    13f4:	f8 94       	cli
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
    13f8:	9f ef       	ldi	r25, 0xFF	; 255
    13fa:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <xNextTaskUnblockTime+0x1>
    13fe:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <xNextTaskUnblockTime>
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <xSchedulerRunning>
    1408:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <xTickCount+0x1>
    140c:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <xTickCount>
    1410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <xPortStartScheduler>
    1414:	00 00       	nop
    1416:	0f 90       	pop	r0
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	08 95       	ret

00001424 <vTaskSuspendAll>:
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxSchedulerSuspended>
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <uxSchedulerSuspended>
    1436:	00 00       	nop
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <xTaskResumeAll>:
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	00 d0       	rcall	.+0      	; 0x1444 <xTaskResumeAll+0x6>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <xTaskResumeAll+0x8>
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	1a 82       	std	Y+2, r1	; 0x02
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	1b 82       	std	Y+3, r1	; 0x03
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxSchedulerSuspended>
    145a:	81 50       	subi	r24, 0x01	; 1
    145c:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <uxSchedulerSuspended>
    1460:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxSchedulerSuspended>
    1464:	88 23       	and	r24, r24
    1466:	09 f0       	breq	.+2      	; 0x146a <xTaskResumeAll+0x2c>
    1468:	77 c0       	rjmp	.+238    	; 0x1558 <xTaskResumeAll+0x11a>
    146a:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxCurrentNumberOfTasks>
    146e:	88 23       	and	r24, r24
    1470:	09 f4       	brne	.+2      	; 0x1474 <xTaskResumeAll+0x36>
    1472:	72 c0       	rjmp	.+228    	; 0x1558 <xTaskResumeAll+0x11a>
    1474:	49 c0       	rjmp	.+146    	; 0x1508 <xTaskResumeAll+0xca>
    1476:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <xPendingReadyList+0x5>
    147a:	90 91 99 07 	lds	r25, 0x0799	; 0x800799 <xPendingReadyList+0x6>
    147e:	fc 01       	movw	r30, r24
    1480:	86 81       	ldd	r24, Z+6	; 0x06
    1482:	97 81       	ldd	r25, Z+7	; 0x07
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	0c 96       	adiw	r24, 0x0c	; 12
    148e:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	02 96       	adiw	r24, 0x02	; 2
    1498:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	fc 01       	movw	r30, r24
    14a2:	96 89       	ldd	r25, Z+22	; 0x16
    14a4:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <uxTopReadyPriority>
    14a8:	89 17       	cp	r24, r25
    14aa:	30 f4       	brcc	.+12     	; 0x14b8 <xTaskResumeAll+0x7a>
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	fc 01       	movw	r30, r24
    14b2:	86 89       	ldd	r24, Z+22	; 0x16
    14b4:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <uxTopReadyPriority>
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	ac 01       	movw	r20, r24
    14be:	4e 5f       	subi	r20, 0xFE	; 254
    14c0:	5f 4f       	sbci	r21, 0xFF	; 255
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	9a 81       	ldd	r25, Y+2	; 0x02
    14c6:	fc 01       	movw	r30, r24
    14c8:	86 89       	ldd	r24, Z+22	; 0x16
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	c9 01       	movw	r24, r18
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	82 0f       	add	r24, r18
    14de:	93 1f       	adc	r25, r19
    14e0:	89 5b       	subi	r24, 0xB9	; 185
    14e2:	98 4f       	sbci	r25, 0xF8	; 248
    14e4:	ba 01       	movw	r22, r20
    14e6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	fc 01       	movw	r30, r24
    14f0:	26 89       	ldd	r18, Z+22	; 0x16
    14f2:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    14f6:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    14fa:	fc 01       	movw	r30, r24
    14fc:	86 89       	ldd	r24, Z+22	; 0x16
    14fe:	28 17       	cp	r18, r24
    1500:	18 f0       	brcs	.+6      	; 0x1508 <xTaskResumeAll+0xca>
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xYieldPending>
    1508:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <xPendingReadyList>
    150c:	88 23       	and	r24, r24
    150e:	09 f0       	breq	.+2      	; 0x1512 <xTaskResumeAll+0xd4>
    1510:	b2 cf       	rjmp	.-156    	; 0x1476 <xTaskResumeAll+0x38>
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	89 2b       	or	r24, r25
    1518:	11 f0       	breq	.+4      	; 0x151e <xTaskResumeAll+0xe0>
    151a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <prvResetNextTaskUnblockTime>
    151e:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxPendedTicks>
    1522:	8c 83       	std	Y+4, r24	; 0x04
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	88 23       	and	r24, r24
    1528:	79 f0       	breq	.+30     	; 0x1548 <xTaskResumeAll+0x10a>
    152a:	0e 94 cd 0a 	call	0x159a	; 0x159a <xTaskIncrementTick>
    152e:	88 23       	and	r24, r24
    1530:	19 f0       	breq	.+6      	; 0x1538 <xTaskResumeAll+0xfa>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xYieldPending>
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	81 50       	subi	r24, 0x01	; 1
    153c:	8c 83       	std	Y+4, r24	; 0x04
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	88 23       	and	r24, r24
    1542:	99 f7       	brne	.-26     	; 0x152a <xTaskResumeAll+0xec>
    1544:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <uxPendedTicks>
    1548:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xYieldPending>
    154c:	88 23       	and	r24, r24
    154e:	21 f0       	breq	.+8      	; 0x1558 <xTaskResumeAll+0x11a>
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	8b 83       	std	Y+3, r24	; 0x03
    1554:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1558:	0f 90       	pop	r0
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	08 95       	ret

0000156c <xTaskGetTickCount>:
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	00 d0       	rcall	.+0      	; 0x1572 <xTaskGetTickCount+0x6>
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	0f 92       	push	r0
    157c:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xTickCount>
    1580:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <xTickCount+0x1>
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <xTaskIncrementTick>:
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	29 97       	sbiw	r28, 0x09	; 9
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	19 82       	std	Y+1, r1	; 0x01
    15b0:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxSchedulerSuspended>
    15b4:	88 23       	and	r24, r24
    15b6:	09 f0       	breq	.+2      	; 0x15ba <xTaskIncrementTick+0x20>
    15b8:	c8 c0       	rjmp	.+400    	; 0x174a <xTaskIncrementTick+0x1b0>
    15ba:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xTickCount>
    15be:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <xTickCount+0x1>
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	9b 83       	std	Y+3, r25	; 0x03
    15c6:	8a 83       	std	Y+2, r24	; 0x02
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	90 93 9e 07 	sts	0x079E, r25	; 0x80079e <xTickCount+0x1>
    15d0:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <xTickCount>
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	9b 81       	ldd	r25, Y+3	; 0x03
    15d8:	89 2b       	or	r24, r25
    15da:	d9 f4       	brne	.+54     	; 0x1612 <xTaskIncrementTick+0x78>
    15dc:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <pxDelayedTaskList>
    15e0:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <pxDelayedTaskList+0x1>
    15e4:	9d 83       	std	Y+5, r25	; 0x05
    15e6:	8c 83       	std	Y+4, r24	; 0x04
    15e8:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <pxOverflowDelayedTaskList>
    15ec:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <pxOverflowDelayedTaskList+0x1>
    15f0:	90 93 90 07 	sts	0x0790, r25	; 0x800790 <pxDelayedTaskList+0x1>
    15f4:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <pxDelayedTaskList>
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <pxOverflowDelayedTaskList+0x1>
    1600:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <pxOverflowDelayedTaskList>
    1604:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <xNumOfOverflows>
    1608:	8f 5f       	subi	r24, 0xFF	; 255
    160a:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <xNumOfOverflows>
    160e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <prvResetNextTaskUnblockTime>
    1612:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <xNextTaskUnblockTime>
    1616:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <xNextTaskUnblockTime+0x1>
    161a:	2a 81       	ldd	r18, Y+2	; 0x02
    161c:	3b 81       	ldd	r19, Y+3	; 0x03
    161e:	28 17       	cp	r18, r24
    1620:	39 07       	cpc	r19, r25
    1622:	08 f4       	brcc	.+2      	; 0x1626 <xTaskIncrementTick+0x8c>
    1624:	78 c0       	rjmp	.+240    	; 0x1716 <xTaskIncrementTick+0x17c>
    1626:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <pxDelayedTaskList>
    162a:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <pxDelayedTaskList+0x1>
    162e:	fc 01       	movw	r30, r24
    1630:	80 81       	ld	r24, Z
    1632:	88 23       	and	r24, r24
    1634:	39 f4       	brne	.+14     	; 0x1644 <xTaskIncrementTick+0xaa>
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	9f ef       	ldi	r25, 0xFF	; 255
    163a:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <xNextTaskUnblockTime+0x1>
    163e:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <xNextTaskUnblockTime>
    1642:	69 c0       	rjmp	.+210    	; 0x1716 <xTaskIncrementTick+0x17c>
    1644:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <pxDelayedTaskList>
    1648:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <pxDelayedTaskList+0x1>
    164c:	fc 01       	movw	r30, r24
    164e:	85 81       	ldd	r24, Z+5	; 0x05
    1650:	96 81       	ldd	r25, Z+6	; 0x06
    1652:	fc 01       	movw	r30, r24
    1654:	86 81       	ldd	r24, Z+6	; 0x06
    1656:	97 81       	ldd	r25, Z+7	; 0x07
    1658:	9f 83       	std	Y+7, r25	; 0x07
    165a:	8e 83       	std	Y+6, r24	; 0x06
    165c:	8e 81       	ldd	r24, Y+6	; 0x06
    165e:	9f 81       	ldd	r25, Y+7	; 0x07
    1660:	fc 01       	movw	r30, r24
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	99 87       	std	Y+9, r25	; 0x09
    1668:	88 87       	std	Y+8, r24	; 0x08
    166a:	2a 81       	ldd	r18, Y+2	; 0x02
    166c:	3b 81       	ldd	r19, Y+3	; 0x03
    166e:	88 85       	ldd	r24, Y+8	; 0x08
    1670:	99 85       	ldd	r25, Y+9	; 0x09
    1672:	28 17       	cp	r18, r24
    1674:	39 07       	cpc	r19, r25
    1676:	38 f4       	brcc	.+14     	; 0x1686 <xTaskIncrementTick+0xec>
    1678:	88 85       	ldd	r24, Y+8	; 0x08
    167a:	99 85       	ldd	r25, Y+9	; 0x09
    167c:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <xNextTaskUnblockTime+0x1>
    1680:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <xNextTaskUnblockTime>
    1684:	48 c0       	rjmp	.+144    	; 0x1716 <xTaskIncrementTick+0x17c>
    1686:	8e 81       	ldd	r24, Y+6	; 0x06
    1688:	9f 81       	ldd	r25, Y+7	; 0x07
    168a:	02 96       	adiw	r24, 0x02	; 2
    168c:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    1690:	8e 81       	ldd	r24, Y+6	; 0x06
    1692:	9f 81       	ldd	r25, Y+7	; 0x07
    1694:	fc 01       	movw	r30, r24
    1696:	84 89       	ldd	r24, Z+20	; 0x14
    1698:	95 89       	ldd	r25, Z+21	; 0x15
    169a:	89 2b       	or	r24, r25
    169c:	29 f0       	breq	.+10     	; 0x16a8 <xTaskIncrementTick+0x10e>
    169e:	8e 81       	ldd	r24, Y+6	; 0x06
    16a0:	9f 81       	ldd	r25, Y+7	; 0x07
    16a2:	0c 96       	adiw	r24, 0x0c	; 12
    16a4:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    16a8:	8e 81       	ldd	r24, Y+6	; 0x06
    16aa:	9f 81       	ldd	r25, Y+7	; 0x07
    16ac:	fc 01       	movw	r30, r24
    16ae:	96 89       	ldd	r25, Z+22	; 0x16
    16b0:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <uxTopReadyPriority>
    16b4:	89 17       	cp	r24, r25
    16b6:	30 f4       	brcc	.+12     	; 0x16c4 <xTaskIncrementTick+0x12a>
    16b8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ba:	9f 81       	ldd	r25, Y+7	; 0x07
    16bc:	fc 01       	movw	r30, r24
    16be:	86 89       	ldd	r24, Z+22	; 0x16
    16c0:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <uxTopReadyPriority>
    16c4:	8e 81       	ldd	r24, Y+6	; 0x06
    16c6:	9f 81       	ldd	r25, Y+7	; 0x07
    16c8:	ac 01       	movw	r20, r24
    16ca:	4e 5f       	subi	r20, 0xFE	; 254
    16cc:	5f 4f       	sbci	r21, 0xFF	; 255
    16ce:	8e 81       	ldd	r24, Y+6	; 0x06
    16d0:	9f 81       	ldd	r25, Y+7	; 0x07
    16d2:	fc 01       	movw	r30, r24
    16d4:	86 89       	ldd	r24, Z+22	; 0x16
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	c9 01       	movw	r24, r18
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	82 0f       	add	r24, r18
    16ea:	93 1f       	adc	r25, r19
    16ec:	89 5b       	subi	r24, 0xB9	; 185
    16ee:	98 4f       	sbci	r25, 0xF8	; 248
    16f0:	ba 01       	movw	r22, r20
    16f2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    16f6:	8e 81       	ldd	r24, Y+6	; 0x06
    16f8:	9f 81       	ldd	r25, Y+7	; 0x07
    16fa:	fc 01       	movw	r30, r24
    16fc:	26 89       	ldd	r18, Z+22	; 0x16
    16fe:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1702:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1706:	fc 01       	movw	r30, r24
    1708:	86 89       	ldd	r24, Z+22	; 0x16
    170a:	28 17       	cp	r18, r24
    170c:	08 f4       	brcc	.+2      	; 0x1710 <xTaskIncrementTick+0x176>
    170e:	8b cf       	rjmp	.-234    	; 0x1626 <xTaskIncrementTick+0x8c>
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	88 cf       	rjmp	.-240    	; 0x1626 <xTaskIncrementTick+0x8c>
    1716:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    171a:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    171e:	fc 01       	movw	r30, r24
    1720:	86 89       	ldd	r24, Z+22	; 0x16
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	c9 01       	movw	r24, r18
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	82 0f       	add	r24, r18
    1736:	93 1f       	adc	r25, r19
    1738:	89 5b       	subi	r24, 0xB9	; 185
    173a:	98 4f       	sbci	r25, 0xF8	; 248
    173c:	fc 01       	movw	r30, r24
    173e:	80 81       	ld	r24, Z
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	40 f0       	brcs	.+16     	; 0x1754 <xTaskIncrementTick+0x1ba>
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <xTaskIncrementTick+0x1ba>
    174a:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxPendedTicks>
    174e:	8f 5f       	subi	r24, 0xFF	; 255
    1750:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxPendedTicks>
    1754:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xYieldPending>
    1758:	88 23       	and	r24, r24
    175a:	11 f0       	breq	.+4      	; 0x1760 <xTaskIncrementTick+0x1c6>
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	29 96       	adiw	r28, 0x09	; 9
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <vTaskSetApplicationTaskTag>:
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	00 d0       	rcall	.+0      	; 0x177a <vTaskSetApplicationTaskTag+0x6>
    177a:	00 d0       	rcall	.+0      	; 0x177c <vTaskSetApplicationTaskTag+0x8>
    177c:	00 d0       	rcall	.+0      	; 0x177e <vTaskSetApplicationTaskTag+0xa>
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	9c 83       	std	Y+4, r25	; 0x04
    1784:	8b 83       	std	Y+3, r24	; 0x03
    1786:	7e 83       	std	Y+6, r23	; 0x06
    1788:	6d 83       	std	Y+5, r22	; 0x05
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	89 2b       	or	r24, r25
    1790:	39 f4       	brne	.+14     	; 0x17a0 <vTaskSetApplicationTaskTag+0x2c>
    1792:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1796:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	04 c0       	rjmp	.+8      	; 0x17a8 <vTaskSetApplicationTaskTag+0x34>
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	0f 92       	push	r0
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	2d 81       	ldd	r18, Y+5	; 0x05
    17b4:	3e 81       	ldd	r19, Y+6	; 0x06
    17b6:	fc 01       	movw	r30, r24
    17b8:	36 8f       	std	Z+30, r19	; 0x1e
    17ba:	25 8f       	std	Z+29, r18	; 0x1d
    17bc:	0f 90       	pop	r0
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	00 00       	nop
    17c2:	26 96       	adiw	r28, 0x06	; 6
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <vTaskSwitchContext>:
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	00 d0       	rcall	.+0      	; 0x17dc <vTaskSwitchContext+0x8>
    17dc:	1f 92       	push	r1
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxSchedulerSuspended>
    17e6:	88 23       	and	r24, r24
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <vTaskSwitchContext+0x1e>
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xYieldPending>
    17f0:	6e c0       	rjmp	.+220    	; 0x18ce <vTaskSwitchContext+0xfa>
    17f2:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <xYieldPending>
    17f6:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <uxTopReadyPriority>
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <vTaskSwitchContext+0x30>
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	81 50       	subi	r24, 0x01	; 1
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	c9 01       	movw	r24, r18
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	82 0f       	add	r24, r18
    181a:	93 1f       	adc	r25, r19
    181c:	89 5b       	subi	r24, 0xB9	; 185
    181e:	98 4f       	sbci	r25, 0xF8	; 248
    1820:	fc 01       	movw	r30, r24
    1822:	80 81       	ld	r24, Z
    1824:	88 23       	and	r24, r24
    1826:	59 f3       	breq	.-42     	; 0x17fe <vTaskSwitchContext+0x2a>
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	c9 01       	movw	r24, r18
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	82 0f       	add	r24, r18
    183e:	93 1f       	adc	r25, r19
    1840:	89 5b       	subi	r24, 0xB9	; 185
    1842:	98 4f       	sbci	r25, 0xF8	; 248
    1844:	9b 83       	std	Y+3, r25	; 0x03
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	9b 81       	ldd	r25, Y+3	; 0x03
    184c:	fc 01       	movw	r30, r24
    184e:	81 81       	ldd	r24, Z+1	; 0x01
    1850:	92 81       	ldd	r25, Z+2	; 0x02
    1852:	fc 01       	movw	r30, r24
    1854:	22 81       	ldd	r18, Z+2	; 0x02
    1856:	33 81       	ldd	r19, Z+3	; 0x03
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	fc 01       	movw	r30, r24
    185e:	32 83       	std	Z+2, r19	; 0x02
    1860:	21 83       	std	Z+1, r18	; 0x01
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	9b 81       	ldd	r25, Y+3	; 0x03
    1866:	fc 01       	movw	r30, r24
    1868:	21 81       	ldd	r18, Z+1	; 0x01
    186a:	32 81       	ldd	r19, Z+2	; 0x02
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	9b 81       	ldd	r25, Y+3	; 0x03
    1870:	03 96       	adiw	r24, 0x03	; 3
    1872:	28 17       	cp	r18, r24
    1874:	39 07       	cpc	r19, r25
    1876:	69 f4       	brne	.+26     	; 0x1892 <vTaskSwitchContext+0xbe>
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	fc 01       	movw	r30, r24
    187e:	81 81       	ldd	r24, Z+1	; 0x01
    1880:	92 81       	ldd	r25, Z+2	; 0x02
    1882:	fc 01       	movw	r30, r24
    1884:	22 81       	ldd	r18, Z+2	; 0x02
    1886:	33 81       	ldd	r19, Z+3	; 0x03
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	fc 01       	movw	r30, r24
    188e:	32 83       	std	Z+2, r19	; 0x02
    1890:	21 83       	std	Z+1, r18	; 0x01
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	9b 81       	ldd	r25, Y+3	; 0x03
    1896:	fc 01       	movw	r30, r24
    1898:	81 81       	ldd	r24, Z+1	; 0x01
    189a:	92 81       	ldd	r25, Z+2	; 0x02
    189c:	fc 01       	movw	r30, r24
    189e:	86 81       	ldd	r24, Z+6	; 0x06
    18a0:	97 81       	ldd	r25, Z+7	; 0x07
    18a2:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pxCurrentTCB+0x1>
    18a6:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pxCurrentTCB>
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <uxTopReadyPriority>
    18b0:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    18b4:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    18b8:	fc 01       	movw	r30, r24
    18ba:	85 8d       	ldd	r24, Z+29	; 0x1d
    18bc:	96 8d       	ldd	r25, Z+30	; 0x1e
    18be:	18 2f       	mov	r17, r24
    18c0:	0e 94 b6 0a 	call	0x156c	; 0x156c <xTaskGetTickCount>
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	61 2f       	mov	r22, r17
    18ca:	0e 94 9a 10 	call	0x2134	; 0x2134 <my_trace>
    18ce:	00 00       	nop
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	08 95       	ret

000018de <prvIdleTask>:
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <prvIdleTask+0x6>
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	0e 94 b9 0c 	call	0x1972	; 0x1972 <prvCheckTasksWaitingTermination>
    18f0:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <pxReadyTasksLists>
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	d0 f3       	brcs	.-12     	; 0x18ec <prvIdleTask+0xe>
    18f8:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    18fc:	f7 cf       	rjmp	.-18     	; 0x18ec <prvIdleTask+0xe>

000018fe <prvInitialiseTaskLists>:
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	1f 92       	push	r1
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	19 82       	std	Y+1, r1	; 0x01
    190a:	13 c0       	rjmp	.+38     	; 0x1932 <prvInitialiseTaskLists+0x34>
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	c9 01       	movw	r24, r18
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	82 0f       	add	r24, r18
    1922:	93 1f       	adc	r25, r19
    1924:	89 5b       	subi	r24, 0xB9	; 185
    1926:	98 4f       	sbci	r25, 0xF8	; 248
    1928:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	8f 5f       	subi	r24, 0xFF	; 255
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	86 30       	cpi	r24, 0x06	; 6
    1936:	50 f3       	brcs	.-44     	; 0x190c <prvInitialiseTaskLists+0xe>
    1938:	8d e7       	ldi	r24, 0x7D	; 125
    193a:	97 e0       	ldi	r25, 0x07	; 7
    193c:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    1940:	86 e8       	ldi	r24, 0x86	; 134
    1942:	97 e0       	ldi	r25, 0x07	; 7
    1944:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    1948:	83 e9       	ldi	r24, 0x93	; 147
    194a:	97 e0       	ldi	r25, 0x07	; 7
    194c:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    1950:	8d e7       	ldi	r24, 0x7D	; 125
    1952:	97 e0       	ldi	r25, 0x07	; 7
    1954:	90 93 90 07 	sts	0x0790, r25	; 0x800790 <pxDelayedTaskList+0x1>
    1958:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <pxDelayedTaskList>
    195c:	86 e8       	ldi	r24, 0x86	; 134
    195e:	97 e0       	ldi	r25, 0x07	; 7
    1960:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <pxOverflowDelayedTaskList+0x1>
    1964:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <pxOverflowDelayedTaskList>
    1968:	00 00       	nop
    196a:	0f 90       	pop	r0
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <prvCheckTasksWaitingTermination>:
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	00 00       	nop
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	08 95       	ret

00001982 <prvResetNextTaskUnblockTime>:
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	00 d0       	rcall	.+0      	; 0x1988 <prvResetNextTaskUnblockTime+0x6>
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <pxDelayedTaskList>
    1990:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <pxDelayedTaskList+0x1>
    1994:	fc 01       	movw	r30, r24
    1996:	80 81       	ld	r24, Z
    1998:	88 23       	and	r24, r24
    199a:	39 f4       	brne	.+14     	; 0x19aa <prvResetNextTaskUnblockTime+0x28>
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	9f ef       	ldi	r25, 0xFF	; 255
    19a0:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <xNextTaskUnblockTime+0x1>
    19a4:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <xNextTaskUnblockTime>
    19a8:	15 c0       	rjmp	.+42     	; 0x19d4 <prvResetNextTaskUnblockTime+0x52>
    19aa:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <pxDelayedTaskList>
    19ae:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <pxDelayedTaskList+0x1>
    19b2:	fc 01       	movw	r30, r24
    19b4:	85 81       	ldd	r24, Z+5	; 0x05
    19b6:	96 81       	ldd	r25, Z+6	; 0x06
    19b8:	fc 01       	movw	r30, r24
    19ba:	86 81       	ldd	r24, Z+6	; 0x06
    19bc:	97 81       	ldd	r25, Z+7	; 0x07
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	fc 01       	movw	r30, r24
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <xNextTaskUnblockTime+0x1>
    19d0:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <xNextTaskUnblockTime>
    19d4:	00 00       	nop
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <prvAddCurrentTaskToDelayedList>:
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	27 97       	sbiw	r28, 0x07	; 7
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	6f 83       	std	Y+7, r22	; 0x07
    19fa:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xTickCount>
    19fe:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <xTickCount+0x1>
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1a0a:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1a0e:	02 96       	adiw	r24, 0x02	; 2
    1a10:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    1a14:	29 81       	ldd	r18, Y+1	; 0x01
    1a16:	3a 81       	ldd	r19, Y+2	; 0x02
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	82 0f       	add	r24, r18
    1a1e:	93 1f       	adc	r25, r19
    1a20:	9c 83       	std	Y+4, r25	; 0x04
    1a22:	8b 83       	std	Y+3, r24	; 0x03
    1a24:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1a28:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1a2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a30:	fc 01       	movw	r30, r24
    1a32:	33 83       	std	Z+3, r19	; 0x03
    1a34:	22 83       	std	Z+2, r18	; 0x02
    1a36:	2b 81       	ldd	r18, Y+3	; 0x03
    1a38:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3e:	28 17       	cp	r18, r24
    1a40:	39 07       	cpc	r19, r25
    1a42:	78 f4       	brcc	.+30     	; 0x1a62 <prvAddCurrentTaskToDelayedList+0x82>
    1a44:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1a48:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1a4c:	9c 01       	movw	r18, r24
    1a4e:	2e 5f       	subi	r18, 0xFE	; 254
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <pxOverflowDelayedTaskList>
    1a56:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <pxOverflowDelayedTaskList+0x1>
    1a5a:	b9 01       	movw	r22, r18
    1a5c:	0e 94 4a 02 	call	0x494	; 0x494 <vListInsert>
    1a60:	1d c0       	rjmp	.+58     	; 0x1a9c <prvAddCurrentTaskToDelayedList+0xbc>
    1a62:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1a66:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1a6a:	9c 01       	movw	r18, r24
    1a6c:	2e 5f       	subi	r18, 0xFE	; 254
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <pxDelayedTaskList>
    1a74:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <pxDelayedTaskList+0x1>
    1a78:	b9 01       	movw	r22, r18
    1a7a:	0e 94 4a 02 	call	0x494	; 0x494 <vListInsert>
    1a7e:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <xNextTaskUnblockTime>
    1a82:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <xNextTaskUnblockTime+0x1>
    1a86:	2b 81       	ldd	r18, Y+3	; 0x03
    1a88:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8a:	28 17       	cp	r18, r24
    1a8c:	39 07       	cpc	r19, r25
    1a8e:	30 f4       	brcc	.+12     	; 0x1a9c <prvAddCurrentTaskToDelayedList+0xbc>
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <xNextTaskUnblockTime+0x1>
    1a98:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <xNextTaskUnblockTime>
    1a9c:	00 00       	nop
    1a9e:	27 96       	adiw	r28, 0x07	; 7
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	08 95       	ret

00001ab0 <main>:
 static void T1_func(void* pvParameters);
 static void T2_func(void* pvParameters);
 static void T3_func(void* pvParameters);

int main(void)
 {
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	0f 93       	push	r16
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
	 
	 

	//Init HW, mainly the serial communication
	InitHW();
    1abe:	0e 94 94 12 	call	0x2528	; 0x2528 <InitHW>

	//Tasks creation
	xTaskCreate
	  (	 T1_func,	 (char*)"T1",	 configMINIMAL_STACK_SIZE,	 NULL,	 tskIDLE_PRIORITY+taskPrio[0],	 NULL);
    1ac2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <taskPrio>

	//Init HW, mainly the serial communication
	InitHW();

	//Tasks creation
	xTaskCreate
    1ac6:	e1 2c       	mov	r14, r1
    1ac8:	f1 2c       	mov	r15, r1
    1aca:	08 2f       	mov	r16, r24
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	44 ec       	ldi	r20, 0xC4	; 196
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	68 e1       	ldi	r22, 0x18	; 24
    1ad6:	71 e0       	ldi	r23, 0x01	; 1
    1ad8:	88 e9       	ldi	r24, 0x98	; 152
    1ada:	9d e0       	ldi	r25, 0x0D	; 13
    1adc:	0e 94 a1 07 	call	0xf42	; 0xf42 <xTaskCreate>
	  (	 T1_func,	 (char*)"T1",	 configMINIMAL_STACK_SIZE,	 NULL,	 tskIDLE_PRIORITY+taskPrio[0],	 NULL);

	
	xTaskCreate
	(	 T2_func,	 (char*)"T2",	 configMINIMAL_STACK_SIZE,	 NULL,	 tskIDLE_PRIORITY+taskPrio[1],	 NULL);
    1ae0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <taskPrio+0x1>
	//Tasks creation
	xTaskCreate
	  (	 T1_func,	 (char*)"T1",	 configMINIMAL_STACK_SIZE,	 NULL,	 tskIDLE_PRIORITY+taskPrio[0],	 NULL);

	
	xTaskCreate
    1ae4:	e1 2c       	mov	r14, r1
    1ae6:	f1 2c       	mov	r15, r1
    1ae8:	08 2f       	mov	r16, r24
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	44 ec       	ldi	r20, 0xC4	; 196
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	6b e1       	ldi	r22, 0x1B	; 27
    1af4:	71 e0       	ldi	r23, 0x01	; 1
    1af6:	83 ec       	ldi	r24, 0xC3	; 195
    1af8:	9d e0       	ldi	r25, 0x0D	; 13
    1afa:	0e 94 a1 07 	call	0xf42	; 0xf42 <xTaskCreate>
	(	 T2_func,	 (char*)"T2",	 configMINIMAL_STACK_SIZE,	 NULL,	 tskIDLE_PRIORITY+taskPrio[1],	 NULL);

	xTaskCreate
	(	 T3_func,	 (char*)"T3",	 configMINIMAL_STACK_SIZE,	 NULL,	 tskIDLE_PRIORITY+taskPrio[2],	 NULL);
    1afe:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <taskPrio+0x2>

	
	xTaskCreate
	(	 T2_func,	 (char*)"T2",	 configMINIMAL_STACK_SIZE,	 NULL,	 tskIDLE_PRIORITY+taskPrio[1],	 NULL);

	xTaskCreate
    1b02:	e1 2c       	mov	r14, r1
    1b04:	f1 2c       	mov	r15, r1
    1b06:	08 2f       	mov	r16, r24
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	44 ec       	ldi	r20, 0xC4	; 196
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	6e e1       	ldi	r22, 0x1E	; 30
    1b12:	71 e0       	ldi	r23, 0x01	; 1
    1b14:	8e ee       	ldi	r24, 0xEE	; 238
    1b16:	9d e0       	ldi	r25, 0x0D	; 13
    1b18:	0e 94 a1 07 	call	0xf42	; 0xf42 <xTaskCreate>
	(	 T3_func,	 (char*)"T3",	 configMINIMAL_STACK_SIZE,	 NULL,	 tskIDLE_PRIORITY+taskPrio[2],	 NULL);

	// Start scheduler.
	  vTaskStartScheduler();
    1b1c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <vTaskStartScheduler>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
	
 }
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	08 95       	ret

00001b30 <T1_func>:
/******************************************************************************
 * Private function definitions.
 ******************************************************************************/
 
static void T1_func(void* pvParameters)
{
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <T1_func+0x6>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <T1_func+0x8>
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 ba 0b 	call	0x1774	; 0x1774 <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime;
	xLastWakeTime = 0;
    1b4c:	1a 82       	std	Y+2, r1	; 0x02
    1b4e:	19 82       	std	Y+1, r1	; 0x01
	//delay to fulfill the first activation of the task. It can be neglected if it is 0
	vTaskDelayUntil( &xLastWakeTime, start[0] );
    1b50:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <start>
    1b54:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <start+0x1>
    1b58:	bc 01       	movw	r22, r24
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <vTaskDelayUntil>
	for ( ;; )
	{
		consumeCPU(1,computationTime[0]);
    1b62:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <computationTime>
    1b66:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <computationTime+0x1>
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	0e 94 3b 12 	call	0x2476	; 0x2476 <consumeCPU>
		vTaskDelayUntil( &xLastWakeTime, taskPeriod[0] );
    1b72:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <taskPeriod>
    1b76:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <taskPeriod+0x1>
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	0e 94 63 09 	call	0x12c6	; 0x12c6 <vTaskDelayUntil>
	}
    1b84:	ee cf       	rjmp	.-36     	; 0x1b62 <T1_func+0x32>

00001b86 <T2_func>:
} 


static void T2_func(void* pvParameters)
{
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <T2_func+0x6>
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <T2_func+0x8>
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	9c 83       	std	Y+4, r25	; 0x04
    1b94:	8b 83       	std	Y+3, r24	; 0x03
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
    1b96:	62 e0       	ldi	r22, 0x02	; 2
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime;
	xLastWakeTime = 0;
    1ba2:	1a 82       	std	Y+2, r1	; 0x02
    1ba4:	19 82       	std	Y+1, r1	; 0x01
	
	//delay to fulfill the first activation of the task. It can be neglected if it is 0
	vTaskDelayUntil( &xLastWakeTime, start[1] );
    1ba6:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <start+0x2>
    1baa:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <start+0x3>
    1bae:	bc 01       	movw	r22, r24
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	0e 94 63 09 	call	0x12c6	; 0x12c6 <vTaskDelayUntil>
	for ( ;; )
	{
		consumeCPU(2,computationTime[1]);
    1bb8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <computationTime+0x2>
    1bbc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <computationTime+0x3>
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	0e 94 3b 12 	call	0x2476	; 0x2476 <consumeCPU>
		vTaskDelayUntil( &xLastWakeTime, taskPeriod[1] );
    1bc8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <taskPeriod+0x2>
    1bcc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <taskPeriod+0x3>
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <vTaskDelayUntil>
	}
    1bda:	ee cf       	rjmp	.-36     	; 0x1bb8 <T2_func+0x32>

00001bdc <T3_func>:
}

static void T3_func(void* pvParameters)
{
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <T3_func+0x6>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <T3_func+0x8>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
	vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
    1bec:	63 e0       	ldi	r22, 0x03	; 3
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime;
	xLastWakeTime = 0;
    1bf8:	1a 82       	std	Y+2, r1	; 0x02
    1bfa:	19 82       	std	Y+1, r1	; 0x01
	//delay to fulfill the first activation of the task. It can be neglected if it is 0
	vTaskDelayUntil( &xLastWakeTime, start[2] );
    1bfc:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <start+0x4>
    1c00:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <start+0x5>
    1c04:	bc 01       	movw	r22, r24
    1c06:	ce 01       	movw	r24, r28
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <vTaskDelayUntil>
	for ( ;; )
	{
		consumeCPU(3,computationTime[2]);
    1c0e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <computationTime+0x4>
    1c12:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <computationTime+0x5>
    1c16:	bc 01       	movw	r22, r24
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	0e 94 3b 12 	call	0x2476	; 0x2476 <consumeCPU>
		vTaskDelayUntil( &xLastWakeTime, taskPeriod[2] );
    1c1e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <taskPeriod+0x4>
    1c22:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <taskPeriod+0x5>
    1c26:	bc 01       	movw	r22, r24
    1c28:	ce 01       	movw	r24, r28
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <vTaskDelayUntil>
	}
    1c30:	ee cf       	rjmp	.-36     	; 0x1c0e <T3_func+0x32>

00001c32 <__vector_18>:
		rs232bufferstate=RS232_RS_PAUSE;
		if (inpcp!=NULL) memcpy(inpcp,(const void *)&rs232inputreport,sizeof(RS232InputReport));
		// enable again ISR work
		RS232_PrepareToRead();
	}
}
    1c32:	1f 92       	push	r1
    1c34:	0f 92       	push	r0
    1c36:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1c3a:	0f 92       	push	r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	2f 93       	push	r18
    1c40:	3f 93       	push	r19
    1c42:	8f 93       	push	r24
    1c44:	9f 93       	push	r25
    1c46:	ef 93       	push	r30
    1c48:	ff 93       	push	r31
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	80 ec       	ldi	r24, 0xC0	; 192
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	fc 01       	movw	r30, r24
    1c58:	80 81       	ld	r24, Z
    1c5a:	8c 71       	andi	r24, 0x1C	; 28
    1c5c:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <rs232inputreport+0x2>
    1c60:	86 ec       	ldi	r24, 0xC6	; 198
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	fc 01       	movw	r30, r24
    1c66:	80 81       	ld	r24, Z
    1c68:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <rs232inputreport+0x3>
    1c6c:	81 ec       	ldi	r24, 0xC1	; 193
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	21 ec       	ldi	r18, 0xC1	; 193
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	f9 01       	movw	r30, r18
    1c76:	20 81       	ld	r18, Z
    1c78:	2f 77       	andi	r18, 0x7F	; 127
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	20 83       	st	Z, r18
    1c7e:	78 94       	sei
    1c80:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rs232bufferstate>
    1c84:	88 2f       	mov	r24, r24
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	81 30       	cpi	r24, 0x01	; 1
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	61 f1       	breq	.+88     	; 0x1ce6 <__vector_18+0xb4>
    1c8e:	82 30       	cpi	r24, 0x02	; 2
    1c90:	91 05       	cpc	r25, r1
    1c92:	e1 f1       	breq	.+120    	; 0x1d0c <__vector_18+0xda>
    1c94:	89 2b       	or	r24, r25
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <__vector_18+0x68>
    1c98:	40 c0       	rjmp	.+128    	; 0x1d1a <__vector_18+0xe8>
    1c9a:	20 91 b0 07 	lds	r18, 0x07B0	; 0x8007b0 <rs232buffer>
    1c9e:	30 91 b1 07 	lds	r19, 0x07B1	; 0x8007b1 <rs232buffer+0x1>
    1ca2:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <rs232bufferpos>
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	98 0f       	add	r25, r24
    1caa:	90 93 b3 07 	sts	0x07B3, r25	; 0x8007b3 <rs232bufferpos>
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	82 0f       	add	r24, r18
    1cb4:	93 1f       	adc	r25, r19
    1cb6:	20 91 b8 07 	lds	r18, 0x07B8	; 0x8007b8 <rs232inputreport+0x3>
    1cba:	fc 01       	movw	r30, r24
    1cbc:	20 83       	st	Z, r18
    1cbe:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <rs232inputreport+0x3>
    1cc2:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <rs232endchar>
    1cc6:	98 17       	cp	r25, r24
    1cc8:	21 f4       	brne	.+8      	; 0x1cd2 <__vector_18+0xa0>
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rs232bufferstate>
    1cd0:	21 c0       	rjmp	.+66     	; 0x1d14 <__vector_18+0xe2>
    1cd2:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <rs232bufferpos>
    1cd6:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <rs232buffersize>
    1cda:	98 17       	cp	r25, r24
    1cdc:	d9 f4       	brne	.+54     	; 0x1d14 <__vector_18+0xe2>
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rs232bufferstate>
    1ce4:	17 c0       	rjmp	.+46     	; 0x1d14 <__vector_18+0xe2>
    1ce6:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <rs232inputreport>
    1cea:	90 91 b6 07 	lds	r25, 0x07B6	; 0x8007b6 <rs232inputreport+0x1>
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	90 93 b6 07 	sts	0x07B6, r25	; 0x8007b6 <rs232inputreport+0x1>
    1cf4:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <rs232inputreport>
    1cf8:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <rs232inputreport+0x3>
    1cfc:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <rs232endchar>
    1d00:	98 17       	cp	r25, r24
    1d02:	51 f4       	brne	.+20     	; 0x1d18 <__vector_18+0xe6>
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rs232bufferstate>
    1d0a:	06 c0       	rjmp	.+12     	; 0x1d18 <__vector_18+0xe6>
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rs232bufferstate>
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <__vector_18+0xe8>
    1d14:	00 00       	nop
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <__vector_18+0xe8>
    1d18:	00 00       	nop
    1d1a:	f8 94       	cli
    1d1c:	81 ec       	ldi	r24, 0xC1	; 193
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	21 ec       	ldi	r18, 0xC1	; 193
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	f9 01       	movw	r30, r18
    1d26:	20 81       	ld	r18, Z
    1d28:	20 68       	ori	r18, 0x80	; 128
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	20 83       	st	Z, r18
    1d2e:	00 00       	nop
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	ff 91       	pop	r31
    1d36:	ef 91       	pop	r30
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	3f 91       	pop	r19
    1d3e:	2f 91       	pop	r18
    1d40:	0f 90       	pop	r0
    1d42:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1d46:	0f 90       	pop	r0
    1d48:	1f 90       	pop	r1
    1d4a:	18 95       	reti

00001d4c <RS232_PrepareToRead>:
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	84 e0       	ldi	r24, 0x04	; 4
    1d56:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rs232bufferstate>
    1d5a:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <rs232buffer>
    1d5e:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <rs232buffer+0x1>
    1d62:	89 2b       	or	r24, r25
    1d64:	61 f0       	breq	.+24     	; 0x1d7e <RS232_PrepareToRead+0x32>
    1d66:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <rs232bufferpos>
    1d6a:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <rs232inputreport+0x1>
    1d6e:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <rs232inputreport>
    1d72:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <rs232inputreport+0x2>
    1d76:	10 92 b8 07 	sts	0x07B8, r1	; 0x8007b8 <rs232inputreport+0x3>
    1d7a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rs232bufferstate>
    1d7e:	00 00       	nop
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	08 95       	ret

00001d86 <RS232_Init>:
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <RS232_Init+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <RS232_Init+0x8>
    1d8e:	1f 92       	push	r1
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9b 83       	std	Y+3, r25	; 0x03
    1d96:	8a 83       	std	Y+2, r24	; 0x02
    1d98:	6c 83       	std	Y+4, r22	; 0x04
    1d9a:	4d 83       	std	Y+5, r20	; 0x05
    1d9c:	8f e5       	ldi	r24, 0x5F	; 95
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	fc 01       	movw	r30, r24
    1da2:	80 81       	ld	r24, Z
    1da4:	80 78       	andi	r24, 0x80	; 128
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	88 23       	and	r24, r24
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <RS232_Init+0x2a>
    1dae:	f8 94       	cli
    1db0:	85 ec       	ldi	r24, 0xC5	; 197
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	fc 01       	movw	r30, r24
    1db6:	10 82       	st	Z, r1
    1db8:	84 ec       	ldi	r24, 0xC4	; 196
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	29 e1       	ldi	r18, 0x19	; 25
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	20 83       	st	Z, r18
    1dc2:	80 ec       	ldi	r24, 0xC0	; 192
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	20 ec       	ldi	r18, 0xC0	; 192
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	f9 01       	movw	r30, r18
    1dcc:	20 81       	ld	r18, Z
    1dce:	2c 7f       	andi	r18, 0xFC	; 252
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	20 83       	st	Z, r18
    1dd4:	81 ec       	ldi	r24, 0xC1	; 193
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	28 e9       	ldi	r18, 0x98	; 152
    1dda:	fc 01       	movw	r30, r24
    1ddc:	20 83       	st	Z, r18
    1dde:	82 ec       	ldi	r24, 0xC2	; 194
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	26 e0       	ldi	r18, 0x06	; 6
    1de4:	fc 01       	movw	r30, r24
    1de6:	20 83       	st	Z, r18
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <RS232_Init+0x76>
    1dea:	1f 93       	push	r17
    1dec:	ef 93       	push	r30
    1dee:	ff 93       	push	r31
    1df0:	e6 ec       	ldi	r30, 0xC6	; 198
    1df2:	ff 27       	eor	r31, r31
    1df4:	10 81       	ld	r17, Z
    1df6:	ff 91       	pop	r31
    1df8:	ef 91       	pop	r30
    1dfa:	1f 91       	pop	r17
    1dfc:	80 ec       	ldi	r24, 0xC0	; 192
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	fc 01       	movw	r30, r24
    1e02:	80 81       	ld	r24, Z
    1e04:	88 23       	and	r24, r24
    1e06:	8c f3       	brlt	.-30     	; 0x1dea <RS232_Init+0x64>
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0c:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <rs232buffer+0x1>
    1e10:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <rs232buffer>
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
    1e16:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <rs232buffersize>
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <rs232endchar>
    1e20:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <RS232_PrepareToRead>
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	88 23       	and	r24, r24
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <RS232_Init+0xa6>
    1e2a:	78 94       	sei
    1e2c:	00 00       	nop
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <RS232_Send>:

void RS232_Send(const char *c, unsigned char endchar)
// Send command in C and return after the whole transmission
{
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <RS232_Send+0x6>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <RS232_Send+0x8>
    1e46:	1f 92       	push	r1
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
    1e50:	6d 83       	std	Y+5, r22	; 0x05
	if (c==NULL) return;
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	89 2b       	or	r24, r25
    1e58:	d9 f1       	breq	.+118    	; 0x1ed0 <RS232_Send+0x92>
	// send command
	unsigned f=0;
    1e5a:	1a 82       	std	Y+2, r1	; 0x02
    1e5c:	19 82       	std	Y+1, r1	; 0x01
	while (c[f]!=endchar)
    1e5e:	1c c0       	rjmp	.+56     	; 0x1e98 <RS232_Send+0x5a>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
    1e60:	00 00       	nop
    1e62:	80 ec       	ldi	r24, 0xC0	; 192
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	fc 01       	movw	r30, r24
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	80 72       	andi	r24, 0x20	; 32
    1e70:	99 27       	eor	r25, r25
    1e72:	89 2b       	or	r24, r25
    1e74:	b1 f3       	breq	.-20     	; 0x1e62 <RS232_Send+0x24>
		UDR0=c[f++];
    1e76:	26 ec       	ldi	r18, 0xC6	; 198
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	ac 01       	movw	r20, r24
    1e80:	4f 5f       	subi	r20, 0xFF	; 255
    1e82:	5f 4f       	sbci	r21, 0xFF	; 255
    1e84:	5a 83       	std	Y+2, r21	; 0x02
    1e86:	49 83       	std	Y+1, r20	; 0x01
    1e88:	4b 81       	ldd	r20, Y+3	; 0x03
    1e8a:	5c 81       	ldd	r21, Y+4	; 0x04
    1e8c:	84 0f       	add	r24, r20
    1e8e:	95 1f       	adc	r25, r21
    1e90:	fc 01       	movw	r30, r24
    1e92:	80 81       	ld	r24, Z
    1e94:	f9 01       	movw	r30, r18
    1e96:	80 83       	st	Z, r24
// Send command in C and return after the whole transmission
{
	if (c==NULL) return;
	// send command
	unsigned f=0;
	while (c[f]!=endchar)
    1e98:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea0:	82 0f       	add	r24, r18
    1ea2:	93 1f       	adc	r25, r19
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	90 81       	ld	r25, Z
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	98 17       	cp	r25, r24
    1eac:	c9 f6       	brne	.-78     	; 0x1e60 <RS232_Send+0x22>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0=c[f++];
	}
	while ( !( UCSR0A & (1<<UDRE0)) );
    1eae:	00 00       	nop
    1eb0:	80 ec       	ldi	r24, 0xC0	; 192
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	80 72       	andi	r24, 0x20	; 32
    1ebe:	99 27       	eor	r25, r25
    1ec0:	89 2b       	or	r24, r25
    1ec2:	b1 f3       	breq	.-20     	; 0x1eb0 <RS232_Send+0x72>
	UDR0=endchar;
    1ec4:	86 ec       	ldi	r24, 0xC6	; 198
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	2d 81       	ldd	r18, Y+5	; 0x05
    1eca:	fc 01       	movw	r30, r24
    1ecc:	20 83       	st	Z, r18
    1ece:	01 c0       	rjmp	.+2      	; 0x1ed2 <RS232_Send+0x94>
}

void RS232_Send(const char *c, unsigned char endchar)
// Send command in C and return after the whole transmission
{
	if (c==NULL) return;
    1ed0:	00 00       	nop
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0=c[f++];
	}
	while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0=endchar;
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	08 95       	ret

00001ee2 <SRAMinitiate>:
					   // no real data is being transmitted.
			SRAMREAD(resp[f]);
		}
	}
	SRAMDISABLE;
}
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	84 e2       	ldi	r24, 0x24	; 36
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	24 e2       	ldi	r18, 0x24	; 36
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	f9 01       	movw	r30, r18
    1ef4:	20 81       	ld	r18, Z
    1ef6:	2f 7e       	andi	r18, 0xEF	; 239
    1ef8:	fc 01       	movw	r30, r24
    1efa:	20 83       	st	Z, r18
    1efc:	84 e2       	ldi	r24, 0x24	; 36
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	24 e2       	ldi	r18, 0x24	; 36
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	f9 01       	movw	r30, r18
    1f06:	20 81       	ld	r18, Z
    1f08:	28 62       	ori	r18, 0x28	; 40
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	20 83       	st	Z, r18
    1f0e:	8a e2       	ldi	r24, 0x2A	; 42
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	2a e2       	ldi	r18, 0x2A	; 42
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	f9 01       	movw	r30, r18
    1f18:	20 81       	ld	r18, Z
    1f1a:	28 60       	ori	r18, 0x08	; 8
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	20 83       	st	Z, r18
    1f20:	84 e2       	ldi	r24, 0x24	; 36
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	24 e2       	ldi	r18, 0x24	; 36
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	f9 01       	movw	r30, r18
    1f2a:	20 81       	ld	r18, Z
    1f2c:	24 60       	ori	r18, 0x04	; 4
    1f2e:	fc 01       	movw	r30, r24
    1f30:	20 83       	st	Z, r18
    1f32:	8b e2       	ldi	r24, 0x2B	; 43
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	2b e2       	ldi	r18, 0x2B	; 43
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	20 81       	ld	r18, Z
    1f3e:	28 60       	ori	r18, 0x08	; 8
    1f40:	fc 01       	movw	r30, r24
    1f42:	20 83       	st	Z, r18
    1f44:	8c e4       	ldi	r24, 0x4C	; 76
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	2c e5       	ldi	r18, 0x5C	; 92
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	20 83       	st	Z, r18
    1f4e:	8d e4       	ldi	r24, 0x4D	; 77
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	2d e4       	ldi	r18, 0x4D	; 77
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	f9 01       	movw	r30, r18
    1f58:	20 81       	ld	r18, Z
    1f5a:	21 60       	ori	r18, 0x01	; 1
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	20 83       	st	Z, r18
    1f60:	00 00       	nop
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	08 95       	ret

00001f68 <SRAMwriteblock>:

void SRAMwriteblock(unsigned address, const unsigned char *block,
					unsigned length)
// Write from ADDRESS up, LENGTH bytes taken from BLOCK
{
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <SRAMwriteblock+0x12>
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <SRAMwriteblock+0x14>
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <SRAMwriteblock+0x16>
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	7c 83       	std	Y+4, r23	; 0x04
    1f88:	6b 83       	std	Y+3, r22	; 0x03
    1f8a:	5e 83       	std	Y+6, r21	; 0x06
    1f8c:	4d 83       	std	Y+5, r20	; 0x05
		"pop r28"		" \n\t"
		"pop r31"		" \n\t"
		"pop r30"		" \n\t"
		"pop r18"		" \n\t"
		::[_wrinstr] "M" (SRAMINSTR_WR),
		  [_lengthlow] "l" ((unsigned char)(length & 0xff)),
    1f8e:	2d 81       	ldd	r18, Y+5	; 0x05
		  [_lengthhigh] "l" ((unsigned char)(length >> 8)),
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	89 2f       	mov	r24, r25
    1f96:	99 27       	eor	r25, r25
    1f98:	48 2f       	mov	r20, r24
		  [_addresslow] "l" ((unsigned char)(address & 0xff)),
    1f9a:	39 81       	ldd	r19, Y+1	; 0x01
		  [_addresshigh] "l" ((unsigned char)(address >> 8)),
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	89 2f       	mov	r24, r25
    1fa2:	99 27       	eor	r25, r25
    1fa4:	58 2f       	mov	r21, r24
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	68 2f       	mov	r22, r24
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	89 2f       	mov	r24, r25
    1fb2:	99 27       	eor	r25, r25
	//
	// We assume a communication speed of 8MHz. That means that
	// transmitting a byte to the external sram takes 1microsec = 16 nops
	// The \n\t sequences are completely necessary; otherwise, the next
	// instruction will not be assembled.
	__asm__ __volatile__ (
    1fb4:	a2 2e       	mov	r10, r18
    1fb6:	b4 2e       	mov	r11, r20
    1fb8:	c3 2e       	mov	r12, r19
    1fba:	d5 2e       	mov	r13, r21
    1fbc:	e6 2e       	mov	r14, r22
    1fbe:	f8 2e       	mov	r15, r24
    1fc0:	2f 93       	push	r18
    1fc2:	ef 93       	push	r30
    1fc4:	ff 93       	push	r31
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	af 93       	push	r26
    1fcc:	bf 93       	push	r27
    1fce:	aa 2d       	mov	r26, r10
    1fd0:	bb 2d       	mov	r27, r11
    1fd2:	0b 2e       	mov	r0, r27
    1fd4:	0a 2a       	or	r0, r26
    1fd6:	09 f1       	breq	.+66     	; 0x201a <SRAMwriteblock_endsending>
    1fd8:	ed e4       	ldi	r30, 0x4D	; 77
    1fda:	ff 27       	eor	r31, r31
    1fdc:	5b 98       	cbi	0x0b, 3	; 11
    1fde:	22 e0       	ldi	r18, 0x02	; 2
    1fe0:	2e bd       	out	0x2e, r18	; 46
    1fe2:	0d 2c       	mov	r0, r13

00001fe4 <SRAMwriteblock_wait1>:
    1fe4:	20 81       	ld	r18, Z
    1fe6:	27 fb       	bst	r18, 7
    1fe8:	ee f7       	brtc	.-6      	; 0x1fe4 <SRAMwriteblock_wait1>
    1fea:	2e b5       	in	r18, 0x2e	; 46
    1fec:	0e bc       	out	0x2e, r0	; 46
    1fee:	0c 2c       	mov	r0, r12

00001ff0 <SRAMwriteblock_wait2>:
    1ff0:	20 81       	ld	r18, Z
    1ff2:	27 fb       	bst	r18, 7
    1ff4:	ee f7       	brtc	.-6      	; 0x1ff0 <SRAMwriteblock_wait2>
    1ff6:	2e b5       	in	r18, 0x2e	; 46
    1ff8:	0e bc       	out	0x2e, r0	; 46

00001ffa <SRAMwriteblock_wait3>:
    1ffa:	20 81       	ld	r18, Z
    1ffc:	27 fb       	bst	r18, 7
    1ffe:	ee f7       	brtc	.-6      	; 0x1ffa <SRAMwriteblock_wait3>
    2000:	2e b5       	in	r18, 0x2e	; 46
    2002:	ce 2d       	mov	r28, r14
    2004:	df 2d       	mov	r29, r15
    2006:	09 90       	ld	r0, Y+

00002008 <SRAMwriteblock_sending>:
    2008:	0e bc       	out	0x2e, r0	; 46
    200a:	09 90       	ld	r0, Y+

0000200c <SRAMwriteblock_wait4>:
    200c:	20 81       	ld	r18, Z
    200e:	27 fb       	bst	r18, 7
    2010:	ee f7       	brtc	.-6      	; 0x200c <SRAMwriteblock_wait4>
    2012:	2e b5       	in	r18, 0x2e	; 46
    2014:	11 97       	sbiw	r26, 0x01	; 1
    2016:	c1 f7       	brne	.-16     	; 0x2008 <SRAMwriteblock_sending>
    2018:	5b 9a       	sbi	0x0b, 3	; 11

0000201a <SRAMwriteblock_endsending>:
    201a:	bf 91       	pop	r27
    201c:	af 91       	pop	r26
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	ff 91       	pop	r31
    2024:	ef 91       	pop	r30
    2026:	2f 91       	pop	r18
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
	);

	#endif
}
    2028:	00 00       	nop
    202a:	26 96       	adiw	r28, 0x06	; 6
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	ff 90       	pop	r15
    203c:	ef 90       	pop	r14
    203e:	df 90       	pop	r13
    2040:	cf 90       	pop	r12
    2042:	bf 90       	pop	r11
    2044:	af 90       	pop	r10
    2046:	08 95       	ret

00002048 <SRAMreadblock>:

void SRAMreadblock(unsigned address, unsigned char *block, unsigned length)
{
    2048:	af 92       	push	r10
    204a:	bf 92       	push	r11
    204c:	cf 92       	push	r12
    204e:	df 92       	push	r13
    2050:	ef 92       	push	r14
    2052:	ff 92       	push	r15
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	00 d0       	rcall	.+0      	; 0x205a <SRAMreadblock+0x12>
    205a:	00 d0       	rcall	.+0      	; 0x205c <SRAMreadblock+0x14>
    205c:	00 d0       	rcall	.+0      	; 0x205e <SRAMreadblock+0x16>
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	7c 83       	std	Y+4, r23	; 0x04
    2068:	6b 83       	std	Y+3, r22	; 0x03
    206a:	5e 83       	std	Y+6, r21	; 0x06
    206c:	4d 83       	std	Y+5, r20	; 0x05
		"pop r28"		" \n\t"
		"pop r31"		" \n\t"
		"pop r30"		" \n\t"
		"pop r18"		" \n\t"
	::[_rdinstr] "M" (SRAMINSTR_RD),
		  [_lengthlow] "l" ((unsigned char)(length & 0xff)),
    206e:	2d 81       	ldd	r18, Y+5	; 0x05
		  [_lengthhigh] "l" ((unsigned char)(length >> 8)),
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	89 2f       	mov	r24, r25
    2076:	99 27       	eor	r25, r25
    2078:	48 2f       	mov	r20, r24
		  [_addresslow] "l" ((unsigned char)(address & 0xff)),
    207a:	39 81       	ldd	r19, Y+1	; 0x01
		  [_addresshigh] "l" ((unsigned char)(address >> 8)),
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	89 2f       	mov	r24, r25
    2082:	99 27       	eor	r25, r25
    2084:	58 2f       	mov	r21, r24
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	68 2f       	mov	r22, r24
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	89 2f       	mov	r24, r25
    2092:	99 27       	eor	r25, r25
		}
		SRAMDISABLE;

	#else

		__asm__ __volatile__ (
    2094:	a2 2e       	mov	r10, r18
    2096:	b4 2e       	mov	r11, r20
    2098:	c3 2e       	mov	r12, r19
    209a:	d5 2e       	mov	r13, r21
    209c:	e6 2e       	mov	r14, r22
    209e:	f8 2e       	mov	r15, r24
    20a0:	2f 93       	push	r18
    20a2:	ef 93       	push	r30
    20a4:	ff 93       	push	r31
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	af 93       	push	r26
    20ac:	bf 93       	push	r27
    20ae:	aa 2d       	mov	r26, r10
    20b0:	bb 2d       	mov	r27, r11
    20b2:	0a 2e       	mov	r0, r26
    20b4:	0b 2a       	or	r0, r27
    20b6:	39 f1       	breq	.+78     	; 0x2106 <SRAMreadblock_endreading>
    20b8:	ed e4       	ldi	r30, 0x4D	; 77
    20ba:	ff 27       	eor	r31, r31
    20bc:	5b 98       	cbi	0x0b, 3	; 11
    20be:	23 e0       	ldi	r18, 0x03	; 3
    20c0:	2e bd       	out	0x2e, r18	; 46
    20c2:	0d 2c       	mov	r0, r13

000020c4 <SRAMreadblock_wait1>:
    20c4:	20 81       	ld	r18, Z
    20c6:	27 fb       	bst	r18, 7
    20c8:	ee f7       	brtc	.-6      	; 0x20c4 <SRAMreadblock_wait1>
    20ca:	2e b5       	in	r18, 0x2e	; 46
    20cc:	0e bc       	out	0x2e, r0	; 46
    20ce:	0c 2c       	mov	r0, r12

000020d0 <SRAMreadblock_wait2>:
    20d0:	20 81       	ld	r18, Z
    20d2:	27 fb       	bst	r18, 7
    20d4:	ee f7       	brtc	.-6      	; 0x20d0 <SRAMreadblock_wait2>
    20d6:	2e b5       	in	r18, 0x2e	; 46
    20d8:	0e bc       	out	0x2e, r0	; 46
    20da:	2f ef       	ldi	r18, 0xFF	; 255
    20dc:	02 2e       	mov	r0, r18

000020de <SRAMreadblock_wait3>:
    20de:	20 81       	ld	r18, Z
    20e0:	27 fb       	bst	r18, 7
    20e2:	ee f7       	brtc	.-6      	; 0x20de <SRAMreadblock_wait3>
    20e4:	2e b5       	in	r18, 0x2e	; 46
    20e6:	0e bc       	out	0x2e, r0	; 46
    20e8:	ce 2d       	mov	r28, r14
    20ea:	df 2d       	mov	r29, r15
    20ec:	2f ef       	ldi	r18, 0xFF	; 255

000020ee <SRAMreadblock_wait4>:
    20ee:	00 80       	ld	r0, Z
    20f0:	07 fa       	bst	r0, 7
    20f2:	ee f7       	brtc	.-6      	; 0x20ee <SRAMreadblock_wait4>
    20f4:	0e b4       	in	r0, 0x2e	; 46
    20f6:	2e bd       	out	0x2e, r18	; 46
    20f8:	09 92       	st	Y+, r0
    20fa:	11 97       	sbiw	r26, 0x01	; 1
    20fc:	c1 f7       	brne	.-16     	; 0x20ee <SRAMreadblock_wait4>

000020fe <SRAMreadblock_wait5>:
    20fe:	00 80       	ld	r0, Z
    2100:	07 fa       	bst	r0, 7
    2102:	ee f7       	brtc	.-6      	; 0x20fe <SRAMreadblock_wait5>
    2104:	5b 9a       	sbi	0x0b, 3	; 11

00002106 <SRAMreadblock_endreading>:
    2106:	bf 91       	pop	r27
    2108:	af 91       	pop	r26
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	ff 91       	pop	r31
    2110:	ef 91       	pop	r30
    2112:	2f 91       	pop	r18
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
	);

	#endif
}
    2114:	00 00       	nop
    2116:	26 96       	adiw	r28, 0x06	; 6
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	df 90       	pop	r13
    212c:	cf 90       	pop	r12
    212e:	bf 90       	pop	r11
    2130:	af 90       	pop	r10
    2132:	08 95       	ret

00002134 <my_trace>:
//void my_trace(uint16_t tick, char tag,char userdata,char resource_id);
//void consumeCPU(unsigned char task_id, unsigned short ms);
//void InitHW();

void my_trace(uint16_t tick, char tag,char userdata,char resource_id)
{
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	28 97       	sbiw	r28, 0x08	; 8
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	9d 83       	std	Y+5, r25	; 0x05
    214a:	8c 83       	std	Y+4, r24	; 0x04
    214c:	6e 83       	std	Y+6, r22	; 0x06
    214e:	4f 83       	std	Y+7, r20	; 0x07
    2150:	28 87       	std	Y+8, r18	; 0x08
	static unsigned mem_pointer=0;
DigitalWrite(tag);
    2152:	8e 81       	ldd	r24, Y+6	; 0x06
    2154:	0e 94 ce 00 	call	0x19c	; 0x19c <DigitalWrite>
ev[0]=tick;
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	9d 81       	ldd	r25, Y+5	; 0x05
    215c:	90 93 cc 07 	sts	0x07CC, r25	; 0x8007cc <ev+0x1>
    2160:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <ev>
ev[1]=tag;
    2164:	8e 81       	ldd	r24, Y+6	; 0x06
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	90 93 ce 07 	sts	0x07CE, r25	; 0x8007ce <ev+0x3>
    216e:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <ev+0x2>
ev[2]=userdata;
    2172:	8f 81       	ldd	r24, Y+7	; 0x07
    2174:	88 2f       	mov	r24, r24
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <ev+0x5>
    217c:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <ev+0x4>
ev[3]=resource_id;
    2180:	88 85       	ldd	r24, Y+8	; 0x08
    2182:	88 2f       	mov	r24, r24
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <ev+0x7>
    218a:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <ev+0x6>
SRAMwriteblock(mem_pointer,(unsigned char*)ev,8);
    218e:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <mem_pointer.2345>
    2192:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <mem_pointer.2345+0x1>
    2196:	48 e0       	ldi	r20, 0x08	; 8
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	6b ec       	ldi	r22, 0xCB	; 203
    219c:	77 e0       	ldi	r23, 0x07	; 7
    219e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <SRAMwriteblock>
mem_pointer+=8;
    21a2:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <mem_pointer.2345>
    21a6:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <mem_pointer.2345+0x1>
    21aa:	08 96       	adiw	r24, 0x08	; 8
    21ac:	90 93 ba 07 	sts	0x07BA, r25	; 0x8007ba <mem_pointer.2345+0x1>
    21b0:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <mem_pointer.2345>

if (mem_pointer>time2save)
    21b4:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <mem_pointer.2345>
    21b8:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <mem_pointer.2345+0x1>
    21bc:	81 32       	cpi	r24, 0x21	; 33
    21be:	9e 44       	sbci	r25, 0x4E	; 78
    21c0:	08 f4       	brcc	.+2      	; 0x21c4 <my_trace+0x90>
    21c2:	4f c1       	rjmp	.+670    	; 0x2462 <my_trace+0x32e>
{	DigitalWrite(127);
    21c4:	8f e7       	ldi	r24, 0x7F	; 127
    21c6:	0e 94 ce 00 	call	0x19c	; 0x19c <DigitalWrite>
mem_pointer=0;
    21ca:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <mem_pointer.2345+0x1>
    21ce:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <mem_pointer.2345>
//Starting
sprintf(trama,"INIT TRACE\r\n");
    21d2:	8d e0       	ldi	r24, 0x0D	; 13
    21d4:	e1 e2       	ldi	r30, 0x21	; 33
    21d6:	f1 e0       	ldi	r31, 0x01	; 1
    21d8:	ab eb       	ldi	r26, 0xBB	; 187
    21da:	b7 e0       	ldi	r27, 0x07	; 7
    21dc:	01 90       	ld	r0, Z+
    21de:	0d 92       	st	X+, r0
    21e0:	8a 95       	dec	r24
    21e2:	e1 f7       	brne	.-8      	; 0x21dc <my_trace+0xa8>
RS232_Send(trama,'\r');
    21e4:	6d e0       	ldi	r22, 0x0D	; 13
    21e6:	8b eb       	ldi	r24, 0xBB	; 187
    21e8:	97 e0       	ldi	r25, 0x07	; 7
    21ea:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <RS232_Send>
//Write the number of tasks
sprintf(trama,"%u 0 0 0\r\n",num_tasks);
    21ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	29 2f       	mov	r18, r25
    21f8:	2f 93       	push	r18
    21fa:	8f 93       	push	r24
    21fc:	8e e2       	ldi	r24, 0x2E	; 46
    21fe:	91 e0       	ldi	r25, 0x01	; 1
    2200:	89 2f       	mov	r24, r25
    2202:	8f 93       	push	r24
    2204:	8e e2       	ldi	r24, 0x2E	; 46
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	8f 93       	push	r24
    220a:	8b eb       	ldi	r24, 0xBB	; 187
    220c:	97 e0       	ldi	r25, 0x07	; 7
    220e:	89 2f       	mov	r24, r25
    2210:	8f 93       	push	r24
    2212:	8b eb       	ldi	r24, 0xBB	; 187
    2214:	97 e0       	ldi	r25, 0x07	; 7
    2216:	8f 93       	push	r24
    2218:	0e 94 a8 12 	call	0x2550	; 0x2550 <sprintf>
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
RS232_Send(trama,'\r');
    2228:	6d e0       	ldi	r22, 0x0D	; 13
    222a:	8b eb       	ldi	r24, 0xBB	; 187
    222c:	97 e0       	ldi	r25, 0x07	; 7
    222e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <RS232_Send>
//Write the computation times: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    2232:	19 82       	std	Y+1, r1	; 0x01
    2234:	34 c0       	rjmp	.+104    	; 0x229e <my_trace+0x16a>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,computationTime[q]);
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	88 2f       	mov	r24, r24
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	87 5f       	subi	r24, 0xF7	; 247
    2242:	9e 4f       	sbci	r25, 0xFE	; 254
    2244:	fc 01       	movw	r30, r24
    2246:	20 81       	ld	r18, Z
    2248:	31 81       	ldd	r19, Z+1	; 0x01
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	01 96       	adiw	r24, 0x01	; 1
    2252:	43 2f       	mov	r20, r19
    2254:	4f 93       	push	r20
    2256:	2f 93       	push	r18
    2258:	29 2f       	mov	r18, r25
    225a:	2f 93       	push	r18
    225c:	8f 93       	push	r24
    225e:	89 e3       	ldi	r24, 0x39	; 57
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	89 2f       	mov	r24, r25
    2264:	8f 93       	push	r24
    2266:	89 e3       	ldi	r24, 0x39	; 57
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	8f 93       	push	r24
    226c:	8b eb       	ldi	r24, 0xBB	; 187
    226e:	97 e0       	ldi	r25, 0x07	; 7
    2270:	89 2f       	mov	r24, r25
    2272:	8f 93       	push	r24
    2274:	8b eb       	ldi	r24, 0xBB	; 187
    2276:	97 e0       	ldi	r25, 0x07	; 7
    2278:	8f 93       	push	r24
    227a:	0e 94 a8 12 	call	0x2550	; 0x2550 <sprintf>
    227e:	8d b7       	in	r24, 0x3d	; 61
    2280:	9e b7       	in	r25, 0x3e	; 62
    2282:	08 96       	adiw	r24, 0x08	; 8
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
RS232_Send(trama,'\r');
    228e:	6d e0       	ldi	r22, 0x0D	; 13
    2290:	8b eb       	ldi	r24, 0xBB	; 187
    2292:	97 e0       	ldi	r25, 0x07	; 7
    2294:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <RS232_Send>
RS232_Send(trama,'\r');
//Write the number of tasks
sprintf(trama,"%u 0 0 0\r\n",num_tasks);
RS232_Send(trama,'\r');
//Write the computation times: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	8f 5f       	subi	r24, 0xFF	; 255
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    22a2:	99 81       	ldd	r25, Y+1	; 0x01
    22a4:	98 17       	cp	r25, r24
    22a6:	38 f2       	brcs	.-114    	; 0x2236 <my_trace+0x102>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,computationTime[q]);
RS232_Send(trama,'\r');
}
//Write the tasks' periods: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    22a8:	1a 82       	std	Y+2, r1	; 0x02
    22aa:	34 c0       	rjmp	.+104    	; 0x2314 <my_trace+0x1e0>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,taskPeriod[q]);
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	8d 5f       	subi	r24, 0xFD	; 253
    22b8:	9e 4f       	sbci	r25, 0xFE	; 254
    22ba:	fc 01       	movw	r30, r24
    22bc:	20 81       	ld	r18, Z
    22be:	31 81       	ldd	r19, Z+1	; 0x01
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	43 2f       	mov	r20, r19
    22ca:	4f 93       	push	r20
    22cc:	2f 93       	push	r18
    22ce:	29 2f       	mov	r18, r25
    22d0:	2f 93       	push	r18
    22d2:	8f 93       	push	r24
    22d4:	89 e3       	ldi	r24, 0x39	; 57
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	89 2f       	mov	r24, r25
    22da:	8f 93       	push	r24
    22dc:	89 e3       	ldi	r24, 0x39	; 57
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	8f 93       	push	r24
    22e2:	8b eb       	ldi	r24, 0xBB	; 187
    22e4:	97 e0       	ldi	r25, 0x07	; 7
    22e6:	89 2f       	mov	r24, r25
    22e8:	8f 93       	push	r24
    22ea:	8b eb       	ldi	r24, 0xBB	; 187
    22ec:	97 e0       	ldi	r25, 0x07	; 7
    22ee:	8f 93       	push	r24
    22f0:	0e 94 a8 12 	call	0x2550	; 0x2550 <sprintf>
    22f4:	8d b7       	in	r24, 0x3d	; 61
    22f6:	9e b7       	in	r25, 0x3e	; 62
    22f8:	08 96       	adiw	r24, 0x08	; 8
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
RS232_Send(trama,'\r');
    2304:	6d e0       	ldi	r22, 0x0D	; 13
    2306:	8b eb       	ldi	r24, 0xBB	; 187
    2308:	97 e0       	ldi	r25, 0x07	; 7
    230a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <RS232_Send>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,computationTime[q]);
RS232_Send(trama,'\r');
}
//Write the tasks' periods: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	8f 5f       	subi	r24, 0xFF	; 255
    2312:	8a 83       	std	Y+2, r24	; 0x02
    2314:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	98 17       	cp	r25, r24
    231c:	38 f2       	brcs	.-114    	; 0x22ac <my_trace+0x178>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,taskPeriod[q]);
RS232_Send(trama,'\r');
}
//Write the first activation: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    231e:	1b 82       	std	Y+3, r1	; 0x03
    2320:	34 c0       	rjmp	.+104    	; 0x238a <my_trace+0x256>
{
	sprintf(trama,"%u %u 0 0\r\n",q+1,start[q]);
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	86 55       	subi	r24, 0x56	; 86
    232e:	98 4f       	sbci	r25, 0xF8	; 248
    2330:	fc 01       	movw	r30, r24
    2332:	20 81       	ld	r18, Z
    2334:	31 81       	ldd	r19, Z+1	; 0x01
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	43 2f       	mov	r20, r19
    2340:	4f 93       	push	r20
    2342:	2f 93       	push	r18
    2344:	29 2f       	mov	r18, r25
    2346:	2f 93       	push	r18
    2348:	8f 93       	push	r24
    234a:	89 e3       	ldi	r24, 0x39	; 57
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	89 2f       	mov	r24, r25
    2350:	8f 93       	push	r24
    2352:	89 e3       	ldi	r24, 0x39	; 57
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	8f 93       	push	r24
    2358:	8b eb       	ldi	r24, 0xBB	; 187
    235a:	97 e0       	ldi	r25, 0x07	; 7
    235c:	89 2f       	mov	r24, r25
    235e:	8f 93       	push	r24
    2360:	8b eb       	ldi	r24, 0xBB	; 187
    2362:	97 e0       	ldi	r25, 0x07	; 7
    2364:	8f 93       	push	r24
    2366:	0e 94 a8 12 	call	0x2550	; 0x2550 <sprintf>
    236a:	8d b7       	in	r24, 0x3d	; 61
    236c:	9e b7       	in	r25, 0x3e	; 62
    236e:	08 96       	adiw	r24, 0x08	; 8
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
	RS232_Send(trama,'\r');
    237a:	6d e0       	ldi	r22, 0x0D	; 13
    237c:	8b eb       	ldi	r24, 0xBB	; 187
    237e:	97 e0       	ldi	r25, 0x07	; 7
    2380:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <RS232_Send>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,taskPeriod[q]);
RS232_Send(trama,'\r');
}
//Write the first activation: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	8f 5f       	subi	r24, 0xFF	; 255
    2388:	8b 83       	std	Y+3, r24	; 0x03
    238a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    238e:	9b 81       	ldd	r25, Y+3	; 0x03
    2390:	98 17       	cp	r25, r24
    2392:	38 f2       	brcs	.-114    	; 0x2322 <my_trace+0x1ee>
{
	sprintf(trama,"%u %u 0 0\r\n",q+1,start[q]);
	RS232_Send(trama,'\r');
}
//read from memory and send through rs232
while (mem_pointer<time2save)
    2394:	4c c0       	rjmp	.+152    	; 0x242e <my_trace+0x2fa>
{
SRAMreadblock(mem_pointer,(unsigned char*)ev,8);
    2396:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <mem_pointer.2345>
    239a:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <mem_pointer.2345+0x1>
    239e:	48 e0       	ldi	r20, 0x08	; 8
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	6b ec       	ldi	r22, 0xCB	; 203
    23a4:	77 e0       	ldi	r23, 0x07	; 7
    23a6:	0e 94 24 10 	call	0x2048	; 0x2048 <SRAMreadblock>
sprintf(trama,"%u %u %u %u\r\n",ev[0],ev[1],ev[2],ev[3]);
    23aa:	60 91 d1 07 	lds	r22, 0x07D1	; 0x8007d1 <ev+0x6>
    23ae:	70 91 d2 07 	lds	r23, 0x07D2	; 0x8007d2 <ev+0x7>
    23b2:	40 91 cf 07 	lds	r20, 0x07CF	; 0x8007cf <ev+0x4>
    23b6:	50 91 d0 07 	lds	r21, 0x07D0	; 0x8007d0 <ev+0x5>
    23ba:	20 91 cd 07 	lds	r18, 0x07CD	; 0x8007cd <ev+0x2>
    23be:	30 91 ce 07 	lds	r19, 0x07CE	; 0x8007ce <ev+0x3>
    23c2:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <ev>
    23c6:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <ev+0x1>
    23ca:	e7 2f       	mov	r30, r23
    23cc:	ef 93       	push	r30
    23ce:	6f 93       	push	r22
    23d0:	65 2f       	mov	r22, r21
    23d2:	6f 93       	push	r22
    23d4:	4f 93       	push	r20
    23d6:	43 2f       	mov	r20, r19
    23d8:	4f 93       	push	r20
    23da:	2f 93       	push	r18
    23dc:	29 2f       	mov	r18, r25
    23de:	2f 93       	push	r18
    23e0:	8f 93       	push	r24
    23e2:	85 e4       	ldi	r24, 0x45	; 69
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	89 2f       	mov	r24, r25
    23e8:	8f 93       	push	r24
    23ea:	85 e4       	ldi	r24, 0x45	; 69
    23ec:	91 e0       	ldi	r25, 0x01	; 1
    23ee:	8f 93       	push	r24
    23f0:	8b eb       	ldi	r24, 0xBB	; 187
    23f2:	97 e0       	ldi	r25, 0x07	; 7
    23f4:	89 2f       	mov	r24, r25
    23f6:	8f 93       	push	r24
    23f8:	8b eb       	ldi	r24, 0xBB	; 187
    23fa:	97 e0       	ldi	r25, 0x07	; 7
    23fc:	8f 93       	push	r24
    23fe:	0e 94 a8 12 	call	0x2550	; 0x2550 <sprintf>
    2402:	ed b7       	in	r30, 0x3d	; 61
    2404:	fe b7       	in	r31, 0x3e	; 62
    2406:	3c 96       	adiw	r30, 0x0c	; 12
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
RS232_Send(trama,'\r');
    2412:	6d e0       	ldi	r22, 0x0D	; 13
    2414:	8b eb       	ldi	r24, 0xBB	; 187
    2416:	97 e0       	ldi	r25, 0x07	; 7
    2418:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <RS232_Send>
mem_pointer+=8;
    241c:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <mem_pointer.2345>
    2420:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <mem_pointer.2345+0x1>
    2424:	08 96       	adiw	r24, 0x08	; 8
    2426:	90 93 ba 07 	sts	0x07BA, r25	; 0x8007ba <mem_pointer.2345+0x1>
    242a:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <mem_pointer.2345>
{
	sprintf(trama,"%u %u 0 0\r\n",q+1,start[q]);
	RS232_Send(trama,'\r');
}
//read from memory and send through rs232
while (mem_pointer<time2save)
    242e:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <mem_pointer.2345>
    2432:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <mem_pointer.2345+0x1>
    2436:	80 32       	cpi	r24, 0x20	; 32
    2438:	9e 44       	sbci	r25, 0x4E	; 78
    243a:	08 f4       	brcc	.+2      	; 0x243e <my_trace+0x30a>
    243c:	ac cf       	rjmp	.-168    	; 0x2396 <my_trace+0x262>
SRAMreadblock(mem_pointer,(unsigned char*)ev,8);
sprintf(trama,"%u %u %u %u\r\n",ev[0],ev[1],ev[2],ev[3]);
RS232_Send(trama,'\r');
mem_pointer+=8;
}
sprintf(trama,"END TRACE\r\n");
    243e:	8c e0       	ldi	r24, 0x0C	; 12
    2440:	e3 e5       	ldi	r30, 0x53	; 83
    2442:	f1 e0       	ldi	r31, 0x01	; 1
    2444:	ab eb       	ldi	r26, 0xBB	; 187
    2446:	b7 e0       	ldi	r27, 0x07	; 7
    2448:	01 90       	ld	r0, Z+
    244a:	0d 92       	st	X+, r0
    244c:	8a 95       	dec	r24
    244e:	e1 f7       	brne	.-8      	; 0x2448 <my_trace+0x314>
RS232_Send(trama,'\r');
    2450:	6d e0       	ldi	r22, 0x0D	; 13
    2452:	8b eb       	ldi	r24, 0xBB	; 187
    2454:	97 e0       	ldi	r25, 0x07	; 7
    2456:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <RS232_Send>
mem_pointer=0;
    245a:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <mem_pointer.2345+0x1>
    245e:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <mem_pointer.2345>

}


}
    2462:	00 00       	nop
    2464:	28 96       	adiw	r28, 0x08	; 8
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	df 91       	pop	r29
    2472:	cf 91       	pop	r28
    2474:	08 95       	ret

00002476 <consumeCPU>:


void consumeCPU(unsigned char task_id, unsigned short ms)
{
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	29 97       	sbiw	r28, 0x09	; 9
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	8f 83       	std	Y+7, r24	; 0x07
    248c:	79 87       	std	Y+9, r23	; 0x09
    248e:	68 87       	std	Y+8, r22	; 0x08
TickType_t current_load=0;
    2490:	1a 82       	std	Y+2, r1	; 0x02
    2492:	19 82       	std	Y+1, r1	; 0x01
TickType_t last_tick=0;
    2494:	1c 82       	std	Y+4, r1	; 0x04
    2496:	1b 82       	std	Y+3, r1	; 0x03
last_tick=xTaskGetTickCount();
    2498:	0e 94 b6 0a 	call	0x156c	; 0x156c <xTaskGetTickCount>
    249c:	9c 83       	std	Y+4, r25	; 0x04
    249e:	8b 83       	std	Y+3, r24	; 0x03
TickType_t tick;

if (task_id!=0 && current_load==0)
    24a0:	8f 81       	ldd	r24, Y+7	; 0x07
    24a2:	88 23       	and	r24, r24
    24a4:	71 f1       	breq	.+92     	; 0x2502 <consumeCPU+0x8c>
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	89 2b       	or	r24, r25
    24ac:	51 f5       	brne	.+84     	; 0x2502 <consumeCPU+0x8c>
{	ev[0]=last_tick;
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	90 93 cc 07 	sts	0x07CC, r25	; 0x8007cc <ev+0x1>
    24b6:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <ev>
ev[1]=10+task_id;
    24ba:	8f 81       	ldd	r24, Y+7	; 0x07
    24bc:	88 2f       	mov	r24, r24
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0a 96       	adiw	r24, 0x0a	; 10
    24c2:	90 93 ce 07 	sts	0x07CE, r25	; 0x8007ce <ev+0x3>
    24c6:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <ev+0x2>
my_trace(last_tick,task_id,10,0);
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	4a e0       	ldi	r20, 0x0A	; 10
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	0e 94 9a 10 	call	0x2134	; 0x2134 <my_trace>
}
while (current_load<ms)
    24d8:	14 c0       	rjmp	.+40     	; 0x2502 <consumeCPU+0x8c>
{
tick=xTaskGetTickCount();
    24da:	0e 94 b6 0a 	call	0x156c	; 0x156c <xTaskGetTickCount>
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
if (last_tick!=tick)
    24e2:	2b 81       	ldd	r18, Y+3	; 0x03
    24e4:	3c 81       	ldd	r19, Y+4	; 0x04
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	28 17       	cp	r18, r24
    24ec:	39 07       	cpc	r19, r25
    24ee:	49 f0       	breq	.+18     	; 0x2502 <consumeCPU+0x8c>
{
current_load++;
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	9a 81       	ldd	r25, Y+2	; 0x02
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	9a 83       	std	Y+2, r25	; 0x02
    24f8:	89 83       	std	Y+1, r24	; 0x01
last_tick=tick;
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	9c 83       	std	Y+4, r25	; 0x04
    2500:	8b 83       	std	Y+3, r24	; 0x03
if (task_id!=0 && current_load==0)
{	ev[0]=last_tick;
ev[1]=10+task_id;
my_trace(last_tick,task_id,10,0);
}
while (current_load<ms)
    2502:	29 81       	ldd	r18, Y+1	; 0x01
    2504:	3a 81       	ldd	r19, Y+2	; 0x02
    2506:	88 85       	ldd	r24, Y+8	; 0x08
    2508:	99 85       	ldd	r25, Y+9	; 0x09
    250a:	28 17       	cp	r18, r24
    250c:	39 07       	cpc	r19, r25
    250e:	28 f3       	brcs	.-54     	; 0x24da <consumeCPU+0x64>
{
current_load++;
last_tick=tick;
}
}
current_load=0;
    2510:	1a 82       	std	Y+2, r1	; 0x02
    2512:	19 82       	std	Y+1, r1	; 0x01
}
    2514:	00 00       	nop
    2516:	29 96       	adiw	r28, 0x09	; 9
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	08 95       	ret

00002528 <InitHW>:

void InitHW()
{
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
// Initialize HW
cli();
    2530:	f8 94       	cli
SRAMinitiate();
    2532:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <SRAMinitiate>
DigitalInit();
    2536:	0e 94 53 00 	call	0xa6	; 0xa6 <DigitalInit>
RS232_Init(NULL,16,'\r');
    253a:	4d e0       	ldi	r20, 0x0D	; 13
    253c:	60 e1       	ldi	r22, 0x10	; 16
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <RS232_Init>

sei();
    2546:	78 94       	sei
}
    2548:	00 00       	nop
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	08 95       	ret

00002550 <sprintf>:
    2550:	ae e0       	ldi	r26, 0x0E	; 14
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	ee ea       	ldi	r30, 0xAE	; 174
    2556:	f2 e1       	ldi	r31, 0x12	; 18
    2558:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <__prologue_saves__+0x1c>
    255c:	0d 89       	ldd	r16, Y+21	; 0x15
    255e:	1e 89       	ldd	r17, Y+22	; 0x16
    2560:	86 e0       	ldi	r24, 0x06	; 6
    2562:	8c 83       	std	Y+4, r24	; 0x04
    2564:	1a 83       	std	Y+2, r17	; 0x02
    2566:	09 83       	std	Y+1, r16	; 0x01
    2568:	8f ef       	ldi	r24, 0xFF	; 255
    256a:	9f e7       	ldi	r25, 0x7F	; 127
    256c:	9e 83       	std	Y+6, r25	; 0x06
    256e:	8d 83       	std	Y+5, r24	; 0x05
    2570:	ae 01       	movw	r20, r28
    2572:	47 5e       	subi	r20, 0xE7	; 231
    2574:	5f 4f       	sbci	r21, 0xFF	; 255
    2576:	6f 89       	ldd	r22, Y+23	; 0x17
    2578:	78 8d       	ldd	r23, Y+24	; 0x18
    257a:	ce 01       	movw	r24, r28
    257c:	01 96       	adiw	r24, 0x01	; 1
    257e:	0e 94 ca 12 	call	0x2594	; 0x2594 <vfprintf>
    2582:	ef 81       	ldd	r30, Y+7	; 0x07
    2584:	f8 85       	ldd	r31, Y+8	; 0x08
    2586:	e0 0f       	add	r30, r16
    2588:	f1 1f       	adc	r31, r17
    258a:	10 82       	st	Z, r1
    258c:	2e 96       	adiw	r28, 0x0e	; 14
    258e:	e4 e0       	ldi	r30, 0x04	; 4
    2590:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <__epilogue_restores__+0x1c>

00002594 <vfprintf>:
    2594:	ab e0       	ldi	r26, 0x0B	; 11
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e0 ed       	ldi	r30, 0xD0	; 208
    259a:	f2 e1       	ldi	r31, 0x12	; 18
    259c:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__>
    25a0:	6c 01       	movw	r12, r24
    25a2:	7b 01       	movw	r14, r22
    25a4:	8a 01       	movw	r16, r20
    25a6:	fc 01       	movw	r30, r24
    25a8:	17 82       	std	Z+7, r1	; 0x07
    25aa:	16 82       	std	Z+6, r1	; 0x06
    25ac:	83 81       	ldd	r24, Z+3	; 0x03
    25ae:	81 ff       	sbrs	r24, 1
    25b0:	cc c1       	rjmp	.+920    	; 0x294a <vfprintf+0x3b6>
    25b2:	ce 01       	movw	r24, r28
    25b4:	01 96       	adiw	r24, 0x01	; 1
    25b6:	3c 01       	movw	r6, r24
    25b8:	f6 01       	movw	r30, r12
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	f7 01       	movw	r30, r14
    25be:	93 fd       	sbrc	r25, 3
    25c0:	85 91       	lpm	r24, Z+
    25c2:	93 ff       	sbrs	r25, 3
    25c4:	81 91       	ld	r24, Z+
    25c6:	7f 01       	movw	r14, r30
    25c8:	88 23       	and	r24, r24
    25ca:	09 f4       	brne	.+2      	; 0x25ce <vfprintf+0x3a>
    25cc:	ba c1       	rjmp	.+884    	; 0x2942 <vfprintf+0x3ae>
    25ce:	85 32       	cpi	r24, 0x25	; 37
    25d0:	39 f4       	brne	.+14     	; 0x25e0 <vfprintf+0x4c>
    25d2:	93 fd       	sbrc	r25, 3
    25d4:	85 91       	lpm	r24, Z+
    25d6:	93 ff       	sbrs	r25, 3
    25d8:	81 91       	ld	r24, Z+
    25da:	7f 01       	movw	r14, r30
    25dc:	85 32       	cpi	r24, 0x25	; 37
    25de:	29 f4       	brne	.+10     	; 0x25ea <vfprintf+0x56>
    25e0:	b6 01       	movw	r22, r12
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    25e8:	e7 cf       	rjmp	.-50     	; 0x25b8 <vfprintf+0x24>
    25ea:	91 2c       	mov	r9, r1
    25ec:	21 2c       	mov	r2, r1
    25ee:	31 2c       	mov	r3, r1
    25f0:	ff e1       	ldi	r31, 0x1F	; 31
    25f2:	f3 15       	cp	r31, r3
    25f4:	d8 f0       	brcs	.+54     	; 0x262c <vfprintf+0x98>
    25f6:	8b 32       	cpi	r24, 0x2B	; 43
    25f8:	79 f0       	breq	.+30     	; 0x2618 <vfprintf+0x84>
    25fa:	38 f4       	brcc	.+14     	; 0x260a <vfprintf+0x76>
    25fc:	80 32       	cpi	r24, 0x20	; 32
    25fe:	79 f0       	breq	.+30     	; 0x261e <vfprintf+0x8a>
    2600:	83 32       	cpi	r24, 0x23	; 35
    2602:	a1 f4       	brne	.+40     	; 0x262c <vfprintf+0x98>
    2604:	23 2d       	mov	r18, r3
    2606:	20 61       	ori	r18, 0x10	; 16
    2608:	1d c0       	rjmp	.+58     	; 0x2644 <vfprintf+0xb0>
    260a:	8d 32       	cpi	r24, 0x2D	; 45
    260c:	61 f0       	breq	.+24     	; 0x2626 <vfprintf+0x92>
    260e:	80 33       	cpi	r24, 0x30	; 48
    2610:	69 f4       	brne	.+26     	; 0x262c <vfprintf+0x98>
    2612:	23 2d       	mov	r18, r3
    2614:	21 60       	ori	r18, 0x01	; 1
    2616:	16 c0       	rjmp	.+44     	; 0x2644 <vfprintf+0xb0>
    2618:	83 2d       	mov	r24, r3
    261a:	82 60       	ori	r24, 0x02	; 2
    261c:	38 2e       	mov	r3, r24
    261e:	e3 2d       	mov	r30, r3
    2620:	e4 60       	ori	r30, 0x04	; 4
    2622:	3e 2e       	mov	r3, r30
    2624:	2a c0       	rjmp	.+84     	; 0x267a <vfprintf+0xe6>
    2626:	f3 2d       	mov	r31, r3
    2628:	f8 60       	ori	r31, 0x08	; 8
    262a:	1d c0       	rjmp	.+58     	; 0x2666 <vfprintf+0xd2>
    262c:	37 fc       	sbrc	r3, 7
    262e:	2d c0       	rjmp	.+90     	; 0x268a <vfprintf+0xf6>
    2630:	20 ed       	ldi	r18, 0xD0	; 208
    2632:	28 0f       	add	r18, r24
    2634:	2a 30       	cpi	r18, 0x0A	; 10
    2636:	40 f0       	brcs	.+16     	; 0x2648 <vfprintf+0xb4>
    2638:	8e 32       	cpi	r24, 0x2E	; 46
    263a:	b9 f4       	brne	.+46     	; 0x266a <vfprintf+0xd6>
    263c:	36 fc       	sbrc	r3, 6
    263e:	81 c1       	rjmp	.+770    	; 0x2942 <vfprintf+0x3ae>
    2640:	23 2d       	mov	r18, r3
    2642:	20 64       	ori	r18, 0x40	; 64
    2644:	32 2e       	mov	r3, r18
    2646:	19 c0       	rjmp	.+50     	; 0x267a <vfprintf+0xe6>
    2648:	36 fe       	sbrs	r3, 6
    264a:	06 c0       	rjmp	.+12     	; 0x2658 <vfprintf+0xc4>
    264c:	8a e0       	ldi	r24, 0x0A	; 10
    264e:	98 9e       	mul	r9, r24
    2650:	20 0d       	add	r18, r0
    2652:	11 24       	eor	r1, r1
    2654:	92 2e       	mov	r9, r18
    2656:	11 c0       	rjmp	.+34     	; 0x267a <vfprintf+0xe6>
    2658:	ea e0       	ldi	r30, 0x0A	; 10
    265a:	2e 9e       	mul	r2, r30
    265c:	20 0d       	add	r18, r0
    265e:	11 24       	eor	r1, r1
    2660:	22 2e       	mov	r2, r18
    2662:	f3 2d       	mov	r31, r3
    2664:	f0 62       	ori	r31, 0x20	; 32
    2666:	3f 2e       	mov	r3, r31
    2668:	08 c0       	rjmp	.+16     	; 0x267a <vfprintf+0xe6>
    266a:	8c 36       	cpi	r24, 0x6C	; 108
    266c:	21 f4       	brne	.+8      	; 0x2676 <vfprintf+0xe2>
    266e:	83 2d       	mov	r24, r3
    2670:	80 68       	ori	r24, 0x80	; 128
    2672:	38 2e       	mov	r3, r24
    2674:	02 c0       	rjmp	.+4      	; 0x267a <vfprintf+0xe6>
    2676:	88 36       	cpi	r24, 0x68	; 104
    2678:	41 f4       	brne	.+16     	; 0x268a <vfprintf+0xf6>
    267a:	f7 01       	movw	r30, r14
    267c:	93 fd       	sbrc	r25, 3
    267e:	85 91       	lpm	r24, Z+
    2680:	93 ff       	sbrs	r25, 3
    2682:	81 91       	ld	r24, Z+
    2684:	7f 01       	movw	r14, r30
    2686:	81 11       	cpse	r24, r1
    2688:	b3 cf       	rjmp	.-154    	; 0x25f0 <vfprintf+0x5c>
    268a:	98 2f       	mov	r25, r24
    268c:	9f 7d       	andi	r25, 0xDF	; 223
    268e:	95 54       	subi	r25, 0x45	; 69
    2690:	93 30       	cpi	r25, 0x03	; 3
    2692:	28 f4       	brcc	.+10     	; 0x269e <vfprintf+0x10a>
    2694:	0c 5f       	subi	r16, 0xFC	; 252
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	9f e3       	ldi	r25, 0x3F	; 63
    269a:	99 83       	std	Y+1, r25	; 0x01
    269c:	0d c0       	rjmp	.+26     	; 0x26b8 <vfprintf+0x124>
    269e:	83 36       	cpi	r24, 0x63	; 99
    26a0:	31 f0       	breq	.+12     	; 0x26ae <vfprintf+0x11a>
    26a2:	83 37       	cpi	r24, 0x73	; 115
    26a4:	71 f0       	breq	.+28     	; 0x26c2 <vfprintf+0x12e>
    26a6:	83 35       	cpi	r24, 0x53	; 83
    26a8:	09 f0       	breq	.+2      	; 0x26ac <vfprintf+0x118>
    26aa:	59 c0       	rjmp	.+178    	; 0x275e <vfprintf+0x1ca>
    26ac:	21 c0       	rjmp	.+66     	; 0x26f0 <vfprintf+0x15c>
    26ae:	f8 01       	movw	r30, r16
    26b0:	80 81       	ld	r24, Z
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	0e 5f       	subi	r16, 0xFE	; 254
    26b6:	1f 4f       	sbci	r17, 0xFF	; 255
    26b8:	88 24       	eor	r8, r8
    26ba:	83 94       	inc	r8
    26bc:	91 2c       	mov	r9, r1
    26be:	53 01       	movw	r10, r6
    26c0:	13 c0       	rjmp	.+38     	; 0x26e8 <vfprintf+0x154>
    26c2:	28 01       	movw	r4, r16
    26c4:	f2 e0       	ldi	r31, 0x02	; 2
    26c6:	4f 0e       	add	r4, r31
    26c8:	51 1c       	adc	r5, r1
    26ca:	f8 01       	movw	r30, r16
    26cc:	a0 80       	ld	r10, Z
    26ce:	b1 80       	ldd	r11, Z+1	; 0x01
    26d0:	36 fe       	sbrs	r3, 6
    26d2:	03 c0       	rjmp	.+6      	; 0x26da <vfprintf+0x146>
    26d4:	69 2d       	mov	r22, r9
    26d6:	70 e0       	ldi	r23, 0x00	; 0
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <vfprintf+0x14a>
    26da:	6f ef       	ldi	r22, 0xFF	; 255
    26dc:	7f ef       	ldi	r23, 0xFF	; 255
    26de:	c5 01       	movw	r24, r10
    26e0:	0e 94 b6 14 	call	0x296c	; 0x296c <strnlen>
    26e4:	4c 01       	movw	r8, r24
    26e6:	82 01       	movw	r16, r4
    26e8:	f3 2d       	mov	r31, r3
    26ea:	ff 77       	andi	r31, 0x7F	; 127
    26ec:	3f 2e       	mov	r3, r31
    26ee:	16 c0       	rjmp	.+44     	; 0x271c <vfprintf+0x188>
    26f0:	28 01       	movw	r4, r16
    26f2:	22 e0       	ldi	r18, 0x02	; 2
    26f4:	42 0e       	add	r4, r18
    26f6:	51 1c       	adc	r5, r1
    26f8:	f8 01       	movw	r30, r16
    26fa:	a0 80       	ld	r10, Z
    26fc:	b1 80       	ldd	r11, Z+1	; 0x01
    26fe:	36 fe       	sbrs	r3, 6
    2700:	03 c0       	rjmp	.+6      	; 0x2708 <vfprintf+0x174>
    2702:	69 2d       	mov	r22, r9
    2704:	70 e0       	ldi	r23, 0x00	; 0
    2706:	02 c0       	rjmp	.+4      	; 0x270c <vfprintf+0x178>
    2708:	6f ef       	ldi	r22, 0xFF	; 255
    270a:	7f ef       	ldi	r23, 0xFF	; 255
    270c:	c5 01       	movw	r24, r10
    270e:	0e 94 ab 14 	call	0x2956	; 0x2956 <strnlen_P>
    2712:	4c 01       	movw	r8, r24
    2714:	f3 2d       	mov	r31, r3
    2716:	f0 68       	ori	r31, 0x80	; 128
    2718:	3f 2e       	mov	r3, r31
    271a:	82 01       	movw	r16, r4
    271c:	33 fc       	sbrc	r3, 3
    271e:	1b c0       	rjmp	.+54     	; 0x2756 <vfprintf+0x1c2>
    2720:	82 2d       	mov	r24, r2
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	88 16       	cp	r8, r24
    2726:	99 06       	cpc	r9, r25
    2728:	b0 f4       	brcc	.+44     	; 0x2756 <vfprintf+0x1c2>
    272a:	b6 01       	movw	r22, r12
    272c:	80 e2       	ldi	r24, 0x20	; 32
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    2734:	2a 94       	dec	r2
    2736:	f4 cf       	rjmp	.-24     	; 0x2720 <vfprintf+0x18c>
    2738:	f5 01       	movw	r30, r10
    273a:	37 fc       	sbrc	r3, 7
    273c:	85 91       	lpm	r24, Z+
    273e:	37 fe       	sbrs	r3, 7
    2740:	81 91       	ld	r24, Z+
    2742:	5f 01       	movw	r10, r30
    2744:	b6 01       	movw	r22, r12
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    274c:	21 10       	cpse	r2, r1
    274e:	2a 94       	dec	r2
    2750:	21 e0       	ldi	r18, 0x01	; 1
    2752:	82 1a       	sub	r8, r18
    2754:	91 08       	sbc	r9, r1
    2756:	81 14       	cp	r8, r1
    2758:	91 04       	cpc	r9, r1
    275a:	71 f7       	brne	.-36     	; 0x2738 <vfprintf+0x1a4>
    275c:	e8 c0       	rjmp	.+464    	; 0x292e <vfprintf+0x39a>
    275e:	84 36       	cpi	r24, 0x64	; 100
    2760:	11 f0       	breq	.+4      	; 0x2766 <vfprintf+0x1d2>
    2762:	89 36       	cpi	r24, 0x69	; 105
    2764:	41 f5       	brne	.+80     	; 0x27b6 <vfprintf+0x222>
    2766:	f8 01       	movw	r30, r16
    2768:	37 fe       	sbrs	r3, 7
    276a:	07 c0       	rjmp	.+14     	; 0x277a <vfprintf+0x1e6>
    276c:	60 81       	ld	r22, Z
    276e:	71 81       	ldd	r23, Z+1	; 0x01
    2770:	82 81       	ldd	r24, Z+2	; 0x02
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	0c 5f       	subi	r16, 0xFC	; 252
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	08 c0       	rjmp	.+16     	; 0x278a <vfprintf+0x1f6>
    277a:	60 81       	ld	r22, Z
    277c:	71 81       	ldd	r23, Z+1	; 0x01
    277e:	07 2e       	mov	r0, r23
    2780:	00 0c       	add	r0, r0
    2782:	88 0b       	sbc	r24, r24
    2784:	99 0b       	sbc	r25, r25
    2786:	0e 5f       	subi	r16, 0xFE	; 254
    2788:	1f 4f       	sbci	r17, 0xFF	; 255
    278a:	f3 2d       	mov	r31, r3
    278c:	ff 76       	andi	r31, 0x6F	; 111
    278e:	3f 2e       	mov	r3, r31
    2790:	97 ff       	sbrs	r25, 7
    2792:	09 c0       	rjmp	.+18     	; 0x27a6 <vfprintf+0x212>
    2794:	90 95       	com	r25
    2796:	80 95       	com	r24
    2798:	70 95       	com	r23
    279a:	61 95       	neg	r22
    279c:	7f 4f       	sbci	r23, 0xFF	; 255
    279e:	8f 4f       	sbci	r24, 0xFF	; 255
    27a0:	9f 4f       	sbci	r25, 0xFF	; 255
    27a2:	f0 68       	ori	r31, 0x80	; 128
    27a4:	3f 2e       	mov	r3, r31
    27a6:	2a e0       	ldi	r18, 0x0A	; 10
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	a3 01       	movw	r20, r6
    27ac:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ultoa_invert>
    27b0:	88 2e       	mov	r8, r24
    27b2:	86 18       	sub	r8, r6
    27b4:	45 c0       	rjmp	.+138    	; 0x2840 <vfprintf+0x2ac>
    27b6:	85 37       	cpi	r24, 0x75	; 117
    27b8:	31 f4       	brne	.+12     	; 0x27c6 <vfprintf+0x232>
    27ba:	23 2d       	mov	r18, r3
    27bc:	2f 7e       	andi	r18, 0xEF	; 239
    27be:	b2 2e       	mov	r11, r18
    27c0:	2a e0       	ldi	r18, 0x0A	; 10
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	25 c0       	rjmp	.+74     	; 0x2810 <vfprintf+0x27c>
    27c6:	93 2d       	mov	r25, r3
    27c8:	99 7f       	andi	r25, 0xF9	; 249
    27ca:	b9 2e       	mov	r11, r25
    27cc:	8f 36       	cpi	r24, 0x6F	; 111
    27ce:	c1 f0       	breq	.+48     	; 0x2800 <vfprintf+0x26c>
    27d0:	18 f4       	brcc	.+6      	; 0x27d8 <vfprintf+0x244>
    27d2:	88 35       	cpi	r24, 0x58	; 88
    27d4:	79 f0       	breq	.+30     	; 0x27f4 <vfprintf+0x260>
    27d6:	b5 c0       	rjmp	.+362    	; 0x2942 <vfprintf+0x3ae>
    27d8:	80 37       	cpi	r24, 0x70	; 112
    27da:	19 f0       	breq	.+6      	; 0x27e2 <vfprintf+0x24e>
    27dc:	88 37       	cpi	r24, 0x78	; 120
    27de:	21 f0       	breq	.+8      	; 0x27e8 <vfprintf+0x254>
    27e0:	b0 c0       	rjmp	.+352    	; 0x2942 <vfprintf+0x3ae>
    27e2:	e9 2f       	mov	r30, r25
    27e4:	e0 61       	ori	r30, 0x10	; 16
    27e6:	be 2e       	mov	r11, r30
    27e8:	b4 fe       	sbrs	r11, 4
    27ea:	0d c0       	rjmp	.+26     	; 0x2806 <vfprintf+0x272>
    27ec:	fb 2d       	mov	r31, r11
    27ee:	f4 60       	ori	r31, 0x04	; 4
    27f0:	bf 2e       	mov	r11, r31
    27f2:	09 c0       	rjmp	.+18     	; 0x2806 <vfprintf+0x272>
    27f4:	34 fe       	sbrs	r3, 4
    27f6:	0a c0       	rjmp	.+20     	; 0x280c <vfprintf+0x278>
    27f8:	29 2f       	mov	r18, r25
    27fa:	26 60       	ori	r18, 0x06	; 6
    27fc:	b2 2e       	mov	r11, r18
    27fe:	06 c0       	rjmp	.+12     	; 0x280c <vfprintf+0x278>
    2800:	28 e0       	ldi	r18, 0x08	; 8
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	05 c0       	rjmp	.+10     	; 0x2810 <vfprintf+0x27c>
    2806:	20 e1       	ldi	r18, 0x10	; 16
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <vfprintf+0x27c>
    280c:	20 e1       	ldi	r18, 0x10	; 16
    280e:	32 e0       	ldi	r19, 0x02	; 2
    2810:	f8 01       	movw	r30, r16
    2812:	b7 fe       	sbrs	r11, 7
    2814:	07 c0       	rjmp	.+14     	; 0x2824 <vfprintf+0x290>
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	0c 5f       	subi	r16, 0xFC	; 252
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	06 c0       	rjmp	.+12     	; 0x2830 <vfprintf+0x29c>
    2824:	60 81       	ld	r22, Z
    2826:	71 81       	ldd	r23, Z+1	; 0x01
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 5f       	subi	r16, 0xFE	; 254
    282e:	1f 4f       	sbci	r17, 0xFF	; 255
    2830:	a3 01       	movw	r20, r6
    2832:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ultoa_invert>
    2836:	88 2e       	mov	r8, r24
    2838:	86 18       	sub	r8, r6
    283a:	fb 2d       	mov	r31, r11
    283c:	ff 77       	andi	r31, 0x7F	; 127
    283e:	3f 2e       	mov	r3, r31
    2840:	36 fe       	sbrs	r3, 6
    2842:	0d c0       	rjmp	.+26     	; 0x285e <vfprintf+0x2ca>
    2844:	23 2d       	mov	r18, r3
    2846:	2e 7f       	andi	r18, 0xFE	; 254
    2848:	a2 2e       	mov	r10, r18
    284a:	89 14       	cp	r8, r9
    284c:	58 f4       	brcc	.+22     	; 0x2864 <vfprintf+0x2d0>
    284e:	34 fe       	sbrs	r3, 4
    2850:	0b c0       	rjmp	.+22     	; 0x2868 <vfprintf+0x2d4>
    2852:	32 fc       	sbrc	r3, 2
    2854:	09 c0       	rjmp	.+18     	; 0x2868 <vfprintf+0x2d4>
    2856:	83 2d       	mov	r24, r3
    2858:	8e 7e       	andi	r24, 0xEE	; 238
    285a:	a8 2e       	mov	r10, r24
    285c:	05 c0       	rjmp	.+10     	; 0x2868 <vfprintf+0x2d4>
    285e:	b8 2c       	mov	r11, r8
    2860:	a3 2c       	mov	r10, r3
    2862:	03 c0       	rjmp	.+6      	; 0x286a <vfprintf+0x2d6>
    2864:	b8 2c       	mov	r11, r8
    2866:	01 c0       	rjmp	.+2      	; 0x286a <vfprintf+0x2d6>
    2868:	b9 2c       	mov	r11, r9
    286a:	a4 fe       	sbrs	r10, 4
    286c:	0f c0       	rjmp	.+30     	; 0x288c <vfprintf+0x2f8>
    286e:	fe 01       	movw	r30, r28
    2870:	e8 0d       	add	r30, r8
    2872:	f1 1d       	adc	r31, r1
    2874:	80 81       	ld	r24, Z
    2876:	80 33       	cpi	r24, 0x30	; 48
    2878:	21 f4       	brne	.+8      	; 0x2882 <vfprintf+0x2ee>
    287a:	9a 2d       	mov	r25, r10
    287c:	99 7e       	andi	r25, 0xE9	; 233
    287e:	a9 2e       	mov	r10, r25
    2880:	09 c0       	rjmp	.+18     	; 0x2894 <vfprintf+0x300>
    2882:	a2 fe       	sbrs	r10, 2
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <vfprintf+0x2fe>
    2886:	b3 94       	inc	r11
    2888:	b3 94       	inc	r11
    288a:	04 c0       	rjmp	.+8      	; 0x2894 <vfprintf+0x300>
    288c:	8a 2d       	mov	r24, r10
    288e:	86 78       	andi	r24, 0x86	; 134
    2890:	09 f0       	breq	.+2      	; 0x2894 <vfprintf+0x300>
    2892:	b3 94       	inc	r11
    2894:	a3 fc       	sbrc	r10, 3
    2896:	11 c0       	rjmp	.+34     	; 0x28ba <vfprintf+0x326>
    2898:	a0 fe       	sbrs	r10, 0
    289a:	06 c0       	rjmp	.+12     	; 0x28a8 <vfprintf+0x314>
    289c:	b2 14       	cp	r11, r2
    289e:	88 f4       	brcc	.+34     	; 0x28c2 <vfprintf+0x32e>
    28a0:	28 0c       	add	r2, r8
    28a2:	92 2c       	mov	r9, r2
    28a4:	9b 18       	sub	r9, r11
    28a6:	0e c0       	rjmp	.+28     	; 0x28c4 <vfprintf+0x330>
    28a8:	b2 14       	cp	r11, r2
    28aa:	60 f4       	brcc	.+24     	; 0x28c4 <vfprintf+0x330>
    28ac:	b6 01       	movw	r22, r12
    28ae:	80 e2       	ldi	r24, 0x20	; 32
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    28b6:	b3 94       	inc	r11
    28b8:	f7 cf       	rjmp	.-18     	; 0x28a8 <vfprintf+0x314>
    28ba:	b2 14       	cp	r11, r2
    28bc:	18 f4       	brcc	.+6      	; 0x28c4 <vfprintf+0x330>
    28be:	2b 18       	sub	r2, r11
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <vfprintf+0x332>
    28c2:	98 2c       	mov	r9, r8
    28c4:	21 2c       	mov	r2, r1
    28c6:	a4 fe       	sbrs	r10, 4
    28c8:	10 c0       	rjmp	.+32     	; 0x28ea <vfprintf+0x356>
    28ca:	b6 01       	movw	r22, r12
    28cc:	80 e3       	ldi	r24, 0x30	; 48
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    28d4:	a2 fe       	sbrs	r10, 2
    28d6:	17 c0       	rjmp	.+46     	; 0x2906 <vfprintf+0x372>
    28d8:	a1 fc       	sbrc	r10, 1
    28da:	03 c0       	rjmp	.+6      	; 0x28e2 <vfprintf+0x34e>
    28dc:	88 e7       	ldi	r24, 0x78	; 120
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <vfprintf+0x352>
    28e2:	88 e5       	ldi	r24, 0x58	; 88
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	b6 01       	movw	r22, r12
    28e8:	0c c0       	rjmp	.+24     	; 0x2902 <vfprintf+0x36e>
    28ea:	8a 2d       	mov	r24, r10
    28ec:	86 78       	andi	r24, 0x86	; 134
    28ee:	59 f0       	breq	.+22     	; 0x2906 <vfprintf+0x372>
    28f0:	a1 fe       	sbrs	r10, 1
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <vfprintf+0x364>
    28f4:	8b e2       	ldi	r24, 0x2B	; 43
    28f6:	01 c0       	rjmp	.+2      	; 0x28fa <vfprintf+0x366>
    28f8:	80 e2       	ldi	r24, 0x20	; 32
    28fa:	a7 fc       	sbrc	r10, 7
    28fc:	8d e2       	ldi	r24, 0x2D	; 45
    28fe:	b6 01       	movw	r22, r12
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    2906:	89 14       	cp	r8, r9
    2908:	38 f4       	brcc	.+14     	; 0x2918 <vfprintf+0x384>
    290a:	b6 01       	movw	r22, r12
    290c:	80 e3       	ldi	r24, 0x30	; 48
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    2914:	9a 94       	dec	r9
    2916:	f7 cf       	rjmp	.-18     	; 0x2906 <vfprintf+0x372>
    2918:	8a 94       	dec	r8
    291a:	f3 01       	movw	r30, r6
    291c:	e8 0d       	add	r30, r8
    291e:	f1 1d       	adc	r31, r1
    2920:	80 81       	ld	r24, Z
    2922:	b6 01       	movw	r22, r12
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    292a:	81 10       	cpse	r8, r1
    292c:	f5 cf       	rjmp	.-22     	; 0x2918 <vfprintf+0x384>
    292e:	22 20       	and	r2, r2
    2930:	09 f4       	brne	.+2      	; 0x2934 <vfprintf+0x3a0>
    2932:	42 ce       	rjmp	.-892    	; 0x25b8 <vfprintf+0x24>
    2934:	b6 01       	movw	r22, r12
    2936:	80 e2       	ldi	r24, 0x20	; 32
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    293e:	2a 94       	dec	r2
    2940:	f6 cf       	rjmp	.-20     	; 0x292e <vfprintf+0x39a>
    2942:	f6 01       	movw	r30, r12
    2944:	86 81       	ldd	r24, Z+6	; 0x06
    2946:	97 81       	ldd	r25, Z+7	; 0x07
    2948:	02 c0       	rjmp	.+4      	; 0x294e <vfprintf+0x3ba>
    294a:	8f ef       	ldi	r24, 0xFF	; 255
    294c:	9f ef       	ldi	r25, 0xFF	; 255
    294e:	2b 96       	adiw	r28, 0x0b	; 11
    2950:	e2 e1       	ldi	r30, 0x12	; 18
    2952:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__>

00002956 <strnlen_P>:
    2956:	fc 01       	movw	r30, r24
    2958:	05 90       	lpm	r0, Z+
    295a:	61 50       	subi	r22, 0x01	; 1
    295c:	70 40       	sbci	r23, 0x00	; 0
    295e:	01 10       	cpse	r0, r1
    2960:	d8 f7       	brcc	.-10     	; 0x2958 <strnlen_P+0x2>
    2962:	80 95       	com	r24
    2964:	90 95       	com	r25
    2966:	8e 0f       	add	r24, r30
    2968:	9f 1f       	adc	r25, r31
    296a:	08 95       	ret

0000296c <strnlen>:
    296c:	fc 01       	movw	r30, r24
    296e:	61 50       	subi	r22, 0x01	; 1
    2970:	70 40       	sbci	r23, 0x00	; 0
    2972:	01 90       	ld	r0, Z+
    2974:	01 10       	cpse	r0, r1
    2976:	d8 f7       	brcc	.-10     	; 0x296e <strnlen+0x2>
    2978:	80 95       	com	r24
    297a:	90 95       	com	r25
    297c:	8e 0f       	add	r24, r30
    297e:	9f 1f       	adc	r25, r31
    2980:	08 95       	ret

00002982 <fputc>:
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	fb 01       	movw	r30, r22
    298c:	23 81       	ldd	r18, Z+3	; 0x03
    298e:	21 fd       	sbrc	r18, 1
    2990:	03 c0       	rjmp	.+6      	; 0x2998 <fputc+0x16>
    2992:	8f ef       	ldi	r24, 0xFF	; 255
    2994:	9f ef       	ldi	r25, 0xFF	; 255
    2996:	2c c0       	rjmp	.+88     	; 0x29f0 <fputc+0x6e>
    2998:	22 ff       	sbrs	r18, 2
    299a:	16 c0       	rjmp	.+44     	; 0x29c8 <fputc+0x46>
    299c:	46 81       	ldd	r20, Z+6	; 0x06
    299e:	57 81       	ldd	r21, Z+7	; 0x07
    29a0:	24 81       	ldd	r18, Z+4	; 0x04
    29a2:	35 81       	ldd	r19, Z+5	; 0x05
    29a4:	42 17       	cp	r20, r18
    29a6:	53 07       	cpc	r21, r19
    29a8:	44 f4       	brge	.+16     	; 0x29ba <fputc+0x38>
    29aa:	a0 81       	ld	r26, Z
    29ac:	b1 81       	ldd	r27, Z+1	; 0x01
    29ae:	9d 01       	movw	r18, r26
    29b0:	2f 5f       	subi	r18, 0xFF	; 255
    29b2:	3f 4f       	sbci	r19, 0xFF	; 255
    29b4:	31 83       	std	Z+1, r19	; 0x01
    29b6:	20 83       	st	Z, r18
    29b8:	8c 93       	st	X, r24
    29ba:	26 81       	ldd	r18, Z+6	; 0x06
    29bc:	37 81       	ldd	r19, Z+7	; 0x07
    29be:	2f 5f       	subi	r18, 0xFF	; 255
    29c0:	3f 4f       	sbci	r19, 0xFF	; 255
    29c2:	37 83       	std	Z+7, r19	; 0x07
    29c4:	26 83       	std	Z+6, r18	; 0x06
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <fputc+0x6e>
    29c8:	8b 01       	movw	r16, r22
    29ca:	ec 01       	movw	r28, r24
    29cc:	fb 01       	movw	r30, r22
    29ce:	00 84       	ldd	r0, Z+8	; 0x08
    29d0:	f1 85       	ldd	r31, Z+9	; 0x09
    29d2:	e0 2d       	mov	r30, r0
    29d4:	09 95       	icall
    29d6:	89 2b       	or	r24, r25
    29d8:	e1 f6       	brne	.-72     	; 0x2992 <fputc+0x10>
    29da:	d8 01       	movw	r26, r16
    29dc:	16 96       	adiw	r26, 0x06	; 6
    29de:	8d 91       	ld	r24, X+
    29e0:	9c 91       	ld	r25, X
    29e2:	17 97       	sbiw	r26, 0x07	; 7
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	17 96       	adiw	r26, 0x07	; 7
    29e8:	9c 93       	st	X, r25
    29ea:	8e 93       	st	-X, r24
    29ec:	16 97       	sbiw	r26, 0x06	; 6
    29ee:	ce 01       	movw	r24, r28
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	08 95       	ret

000029fa <__ultoa_invert>:
    29fa:	fa 01       	movw	r30, r20
    29fc:	aa 27       	eor	r26, r26
    29fe:	28 30       	cpi	r18, 0x08	; 8
    2a00:	51 f1       	breq	.+84     	; 0x2a56 <__ultoa_invert+0x5c>
    2a02:	20 31       	cpi	r18, 0x10	; 16
    2a04:	81 f1       	breq	.+96     	; 0x2a66 <__ultoa_invert+0x6c>
    2a06:	e8 94       	clt
    2a08:	6f 93       	push	r22
    2a0a:	6e 7f       	andi	r22, 0xFE	; 254
    2a0c:	6e 5f       	subi	r22, 0xFE	; 254
    2a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a10:	8f 4f       	sbci	r24, 0xFF	; 255
    2a12:	9f 4f       	sbci	r25, 0xFF	; 255
    2a14:	af 4f       	sbci	r26, 0xFF	; 255
    2a16:	b1 e0       	ldi	r27, 0x01	; 1
    2a18:	3e d0       	rcall	.+124    	; 0x2a96 <__ultoa_invert+0x9c>
    2a1a:	b4 e0       	ldi	r27, 0x04	; 4
    2a1c:	3c d0       	rcall	.+120    	; 0x2a96 <__ultoa_invert+0x9c>
    2a1e:	67 0f       	add	r22, r23
    2a20:	78 1f       	adc	r23, r24
    2a22:	89 1f       	adc	r24, r25
    2a24:	9a 1f       	adc	r25, r26
    2a26:	a1 1d       	adc	r26, r1
    2a28:	68 0f       	add	r22, r24
    2a2a:	79 1f       	adc	r23, r25
    2a2c:	8a 1f       	adc	r24, r26
    2a2e:	91 1d       	adc	r25, r1
    2a30:	a1 1d       	adc	r26, r1
    2a32:	6a 0f       	add	r22, r26
    2a34:	71 1d       	adc	r23, r1
    2a36:	81 1d       	adc	r24, r1
    2a38:	91 1d       	adc	r25, r1
    2a3a:	a1 1d       	adc	r26, r1
    2a3c:	20 d0       	rcall	.+64     	; 0x2a7e <__ultoa_invert+0x84>
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <__ultoa_invert+0x48>
    2a40:	68 94       	set
    2a42:	3f 91       	pop	r19
    2a44:	2a e0       	ldi	r18, 0x0A	; 10
    2a46:	26 9f       	mul	r18, r22
    2a48:	11 24       	eor	r1, r1
    2a4a:	30 19       	sub	r19, r0
    2a4c:	30 5d       	subi	r19, 0xD0	; 208
    2a4e:	31 93       	st	Z+, r19
    2a50:	de f6       	brtc	.-74     	; 0x2a08 <__ultoa_invert+0xe>
    2a52:	cf 01       	movw	r24, r30
    2a54:	08 95       	ret
    2a56:	46 2f       	mov	r20, r22
    2a58:	47 70       	andi	r20, 0x07	; 7
    2a5a:	40 5d       	subi	r20, 0xD0	; 208
    2a5c:	41 93       	st	Z+, r20
    2a5e:	b3 e0       	ldi	r27, 0x03	; 3
    2a60:	0f d0       	rcall	.+30     	; 0x2a80 <__ultoa_invert+0x86>
    2a62:	c9 f7       	brne	.-14     	; 0x2a56 <__ultoa_invert+0x5c>
    2a64:	f6 cf       	rjmp	.-20     	; 0x2a52 <__ultoa_invert+0x58>
    2a66:	46 2f       	mov	r20, r22
    2a68:	4f 70       	andi	r20, 0x0F	; 15
    2a6a:	40 5d       	subi	r20, 0xD0	; 208
    2a6c:	4a 33       	cpi	r20, 0x3A	; 58
    2a6e:	18 f0       	brcs	.+6      	; 0x2a76 <__ultoa_invert+0x7c>
    2a70:	49 5d       	subi	r20, 0xD9	; 217
    2a72:	31 fd       	sbrc	r19, 1
    2a74:	40 52       	subi	r20, 0x20	; 32
    2a76:	41 93       	st	Z+, r20
    2a78:	02 d0       	rcall	.+4      	; 0x2a7e <__ultoa_invert+0x84>
    2a7a:	a9 f7       	brne	.-22     	; 0x2a66 <__ultoa_invert+0x6c>
    2a7c:	ea cf       	rjmp	.-44     	; 0x2a52 <__ultoa_invert+0x58>
    2a7e:	b4 e0       	ldi	r27, 0x04	; 4
    2a80:	a6 95       	lsr	r26
    2a82:	97 95       	ror	r25
    2a84:	87 95       	ror	r24
    2a86:	77 95       	ror	r23
    2a88:	67 95       	ror	r22
    2a8a:	ba 95       	dec	r27
    2a8c:	c9 f7       	brne	.-14     	; 0x2a80 <__ultoa_invert+0x86>
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	61 05       	cpc	r22, r1
    2a92:	71 05       	cpc	r23, r1
    2a94:	08 95       	ret
    2a96:	9b 01       	movw	r18, r22
    2a98:	ac 01       	movw	r20, r24
    2a9a:	0a 2e       	mov	r0, r26
    2a9c:	06 94       	lsr	r0
    2a9e:	57 95       	ror	r21
    2aa0:	47 95       	ror	r20
    2aa2:	37 95       	ror	r19
    2aa4:	27 95       	ror	r18
    2aa6:	ba 95       	dec	r27
    2aa8:	c9 f7       	brne	.-14     	; 0x2a9c <__ultoa_invert+0xa2>
    2aaa:	62 0f       	add	r22, r18
    2aac:	73 1f       	adc	r23, r19
    2aae:	84 1f       	adc	r24, r20
    2ab0:	95 1f       	adc	r25, r21
    2ab2:	a0 1d       	adc	r26, r0
    2ab4:	08 95       	ret

00002ab6 <__prologue_saves__>:
    2ab6:	2f 92       	push	r2
    2ab8:	3f 92       	push	r3
    2aba:	4f 92       	push	r4
    2abc:	5f 92       	push	r5
    2abe:	6f 92       	push	r6
    2ac0:	7f 92       	push	r7
    2ac2:	8f 92       	push	r8
    2ac4:	9f 92       	push	r9
    2ac6:	af 92       	push	r10
    2ac8:	bf 92       	push	r11
    2aca:	cf 92       	push	r12
    2acc:	df 92       	push	r13
    2ace:	ef 92       	push	r14
    2ad0:	ff 92       	push	r15
    2ad2:	0f 93       	push	r16
    2ad4:	1f 93       	push	r17
    2ad6:	cf 93       	push	r28
    2ad8:	df 93       	push	r29
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	ca 1b       	sub	r28, r26
    2ae0:	db 0b       	sbc	r29, r27
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	09 94       	ijmp

00002aee <__epilogue_restores__>:
    2aee:	2a 88       	ldd	r2, Y+18	; 0x12
    2af0:	39 88       	ldd	r3, Y+17	; 0x11
    2af2:	48 88       	ldd	r4, Y+16	; 0x10
    2af4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2af6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2af8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2afa:	8c 84       	ldd	r8, Y+12	; 0x0c
    2afc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2afe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b00:	b9 84       	ldd	r11, Y+9	; 0x09
    2b02:	c8 84       	ldd	r12, Y+8	; 0x08
    2b04:	df 80       	ldd	r13, Y+7	; 0x07
    2b06:	ee 80       	ldd	r14, Y+6	; 0x06
    2b08:	fd 80       	ldd	r15, Y+5	; 0x05
    2b0a:	0c 81       	ldd	r16, Y+4	; 0x04
    2b0c:	1b 81       	ldd	r17, Y+3	; 0x03
    2b0e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b10:	b9 81       	ldd	r27, Y+1	; 0x01
    2b12:	ce 0f       	add	r28, r30
    2b14:	d1 1d       	adc	r29, r1
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	ed 01       	movw	r28, r26
    2b22:	08 95       	ret

00002b24 <_exit>:
    2b24:	f8 94       	cli

00002b26 <__stop_program>:
    2b26:	ff cf       	rjmp	.-2      	; 0x2b26 <__stop_program>
