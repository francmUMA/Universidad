
practica4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000030c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075c  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000685  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fb  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a0  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017e  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 34 01 	call	0x268	; 0x268 <main>
  88:	0c 94 4a 01 	jmp	0x294	; 0x294 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <digitalWrite>:
#include <avr/interrupt.h>

static uint8_t counter = 0;

void digitalWrite(unsigned char data){
	PORTB = ((data & 0x01) << PINB2) | (((data & 0x02) >> 1) << PINB1) | (((data & 0x04) >> 2) << PINB0);
  90:	28 2f       	mov	r18, r24
  92:	21 70       	andi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	a9 01       	movw	r20, r18
  98:	44 0f       	add	r20, r20
  9a:	55 1f       	adc	r21, r21
  9c:	44 0f       	add	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	98 2f       	mov	r25, r24
  a2:	94 70       	andi	r25, 0x04	; 4
  a4:	29 2f       	mov	r18, r25
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	35 95       	asr	r19
  aa:	27 95       	ror	r18
  ac:	35 95       	asr	r19
  ae:	27 95       	ror	r18
  b0:	98 2f       	mov	r25, r24
  b2:	92 70       	andi	r25, 0x02	; 2
  b4:	49 2b       	or	r20, r25
  b6:	24 2b       	or	r18, r20
  b8:	25 b9       	out	0x05, r18	; 5
	PORTD = (((data & 0x20) >> 5) << PIND4) | (((data & 0x10) >> 4) << PIND5) | (((data & 0x08) >> 3) << PIND7);
  ba:	48 2f       	mov	r20, r24
  bc:	40 72       	andi	r20, 0x20	; 32
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	55 95       	asr	r21
  c2:	47 95       	ror	r20
  c4:	55 95       	asr	r21
  c6:	47 95       	ror	r20
  c8:	55 95       	asr	r21
  ca:	47 95       	ror	r20
  cc:	55 95       	asr	r21
  ce:	47 95       	ror	r20
  d0:	55 95       	asr	r21
  d2:	47 95       	ror	r20
  d4:	ba 01       	movw	r22, r20
  d6:	62 95       	swap	r22
  d8:	72 95       	swap	r23
  da:	70 7f       	andi	r23, 0xF0	; 240
  dc:	76 27       	eor	r23, r22
  de:	60 7f       	andi	r22, 0xF0	; 240
  e0:	76 27       	eor	r23, r22
  e2:	98 2f       	mov	r25, r24
  e4:	90 71       	andi	r25, 0x10	; 16
  e6:	49 2f       	mov	r20, r25
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	55 95       	asr	r21
  ec:	47 95       	ror	r20
  ee:	55 95       	asr	r21
  f0:	47 95       	ror	r20
  f2:	55 95       	asr	r21
  f4:	47 95       	ror	r20
  f6:	55 95       	asr	r21
  f8:	47 95       	ror	r20
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	42 95       	swap	r20
 100:	52 95       	swap	r21
 102:	50 7f       	andi	r21, 0xF0	; 240
 104:	54 27       	eor	r21, r20
 106:	40 7f       	andi	r20, 0xF0	; 240
 108:	54 27       	eor	r21, r20
 10a:	98 2f       	mov	r25, r24
 10c:	98 70       	andi	r25, 0x08	; 8
 10e:	29 2f       	mov	r18, r25
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	35 95       	asr	r19
 114:	27 95       	ror	r18
 116:	35 95       	asr	r19
 118:	27 95       	ror	r18
 11a:	35 95       	asr	r19
 11c:	27 95       	ror	r18
 11e:	36 95       	lsr	r19
 120:	32 2f       	mov	r19, r18
 122:	22 27       	eor	r18, r18
 124:	37 95       	ror	r19
 126:	27 95       	ror	r18
 128:	46 2b       	or	r20, r22
 12a:	24 2b       	or	r18, r20
 12c:	2b b9       	out	0x0b, r18	; 11
	PORTC = (((data & 0x80) >> 7) << PINC3) | (((data & 0x40) >> 6) << PINC4);
 12e:	28 2f       	mov	r18, r24
 130:	22 1f       	adc	r18, r18
 132:	22 27       	eor	r18, r18
 134:	22 1f       	adc	r18, r18
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	98 2f       	mov	r25, r24
 146:	90 74       	andi	r25, 0x40	; 64
 148:	89 2f       	mov	r24, r25
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	08 2e       	mov	r0, r24
 14e:	89 2f       	mov	r24, r25
 150:	00 0c       	add	r0, r0
 152:	88 1f       	adc	r24, r24
 154:	99 0b       	sbc	r25, r25
 156:	00 0c       	add	r0, r0
 158:	88 1f       	adc	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	82 95       	swap	r24
 15e:	92 95       	swap	r25
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	98 27       	eor	r25, r24
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	98 27       	eor	r25, r24
 168:	82 2b       	or	r24, r18
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	08 95       	ret

0000016e <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB1) | (1 << PINB0);
 16e:	84 b1       	in	r24, 0x04	; 4
 170:	87 60       	ori	r24, 0x07	; 7
 172:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 174:	87 b1       	in	r24, 0x07	; 7
 176:	88 61       	ori	r24, 0x18	; 24
 178:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND4) | (1 << PIND5) | (1 << PIND7);
 17a:	8a b1       	in	r24, 0x0a	; 10
 17c:	80 6b       	ori	r24, 0xB0	; 176
 17e:	8a b9       	out	0x0a, r24	; 10
 180:	08 95       	ret

00000182 <initTimers>:
}

void initTimers(){
	TCCR1B |= (1<<WGM12) | (1<<CS12);			//Preescalado = 256
 182:	e1 e8       	ldi	r30, 0x81	; 129
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8c 60       	ori	r24, 0x0C	; 12
 18a:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);	
 18c:	ef e6       	ldi	r30, 0x6F	; 111
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	82 60       	ori	r24, 0x02	; 2
 194:	80 83       	st	Z, r24
	OCR1A = 15625;								//250ms
 196:	89 e0       	ldi	r24, 0x09	; 9
 198:	9d e3       	ldi	r25, 0x3D	; 61
 19a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 19e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1a2:	08 95       	ret

000001a4 <__vector_1>:
}

ISR(INT0_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
	OCR1A = 62500;								//1s
 1b2:	84 e2       	ldi	r24, 0x24	; 36
 1b4:	94 ef       	ldi	r25, 0xF4	; 244
 1b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <__vector_11>:

ISR(TIMER1_COMPA_vect){
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	counter += 1;
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (counter > 63) counter = 0;
 1f8:	80 34       	cpi	r24, 0x40	; 64
 1fa:	10 f0       	brcs	.+4      	; 0x200 <__vector_11+0x34>
 1fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	digitalWrite(counter);
 200:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 204:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_3>:

ISR(PCINT0_vect){
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
	if		(PINB & (1<<PINB3)) OCR1A = 15625;								//250ms
 238:	1b 9b       	sbis	0x03, 3	; 3
 23a:	07 c0       	rjmp	.+14     	; 0x24a <__vector_3+0x20>
 23c:	89 e0       	ldi	r24, 0x09	; 9
 23e:	9d e3       	ldi	r25, 0x3D	; 61
 240:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 244:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 248:	08 c0       	rjmp	.+16     	; 0x25a <__vector_3+0x30>
	else if (PINB & (1<<PINB4)) OCR1A = 31250;								//250ms
 24a:	1c 9b       	sbis	0x03, 4	; 3
 24c:	06 c0       	rjmp	.+12     	; 0x25a <__vector_3+0x30>
 24e:	82 e1       	ldi	r24, 0x12	; 18
 250:	9a e7       	ldi	r25, 0x7A	; 122
 252:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 256:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <main>:

int main(void)
{
    //Deshabilitar interrupciones
    cli(); 
 268:	f8 94       	cli
    
    /*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
    //Mascara para INT0
    EIMSK = 0x01;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	8d bb       	out	0x1d, r24	; 29
    
    //Activacion por flanco de bajada
    EICRA = 0x02;
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    
    //Limpieza del registro de flag
    EIFR = 0x00;
 274:	1c ba       	out	0x1c, r1	; 28
    
    /*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
    PCICR = (1<<PCIE0);
 276:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK0 = (1<<PCINT4) | (1<<PCINT3);
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
    initLEDS();
 280:	0e 94 b7 00 	call	0x16e	; 0x16e <initLEDS>
	initTimers();
 284:	0e 94 c1 00 	call	0x182	; 0x182 <initTimers>
	digitalWrite(counter);
 288:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28c:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
    
    //Activar interrupciones
    sei();
 290:	78 94       	sei
 292:	ff cf       	rjmp	.-2      	; 0x292 <main+0x2a>

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
