
TestFreeRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00003ec4  00003f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ec4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000669  00800160  00800160  00003fb8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003fb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004014  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003be6  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001149  00000000  00000000  000080da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000356d  00000000  00000000  00009223  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010ac  00000000  00000000  0000c790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019ec  00000000  00000000  0000d83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000226d  00000000  00000000  0000f228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  00011495  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ec       	ldi	r30, 0xC4	; 196
      7c:	fe e3       	ldi	r31, 0x3E	; 62
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 36       	cpi	r26, 0x60	; 96
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a0 e6       	ldi	r26, 0x60	; 96
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3c       	cpi	r26, 0xC9	; 201
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9e 13 	call	0x273c	; 0x273c <main>
      9e:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DigitalInit>:
/*===============================================================================================*\
 *	DIGITAL I/O
\*===============================================================================================*/

void DigitalInit(void)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	// CONFIGURE LEDS AS OUTPUT
	MS_DIGITAL_OUT_BIT_0_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_0_PIN);
      ae:	84 e2       	ldi	r24, 0x24	; 36
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	24 e2       	ldi	r18, 0x24	; 36
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	24 60       	ori	r18, 0x04	; 4
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_1_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_1_PIN);
      c0:	84 e2       	ldi	r24, 0x24	; 36
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	24 e2       	ldi	r18, 0x24	; 36
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	22 60       	ori	r18, 0x02	; 2
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_2_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_2_PIN);
      d2:	84 e2       	ldi	r24, 0x24	; 36
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	24 e2       	ldi	r18, 0x24	; 36
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	21 60       	ori	r18, 0x01	; 1
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_3_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_3_PIN);
      e4:	8a e2       	ldi	r24, 0x2A	; 42
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	2a e2       	ldi	r18, 0x2A	; 42
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	20 68       	ori	r18, 0x80	; 128
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_4_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_4_PIN);
      f6:	8a e2       	ldi	r24, 0x2A	; 42
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2a e2       	ldi	r18, 0x2A	; 42
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	20 81       	ld	r18, Z
     102:	20 62       	ori	r18, 0x20	; 32
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_5_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_5_PIN);
     108:	8a e2       	ldi	r24, 0x2A	; 42
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	2a e2       	ldi	r18, 0x2A	; 42
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	f9 01       	movw	r30, r18
     112:	20 81       	ld	r18, Z
     114:	20 61       	ori	r18, 0x10	; 16
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_6_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_6_PIN);
     11a:	87 e2       	ldi	r24, 0x27	; 39
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	27 e2       	ldi	r18, 0x27	; 39
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	20 61       	ori	r18, 0x10	; 16
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_7_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_7_PIN);
     12c:	87 e2       	ldi	r24, 0x27	; 39
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	27 e2       	ldi	r18, 0x27	; 39
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	f9 01       	movw	r30, r18
     136:	20 81       	ld	r18, Z
     138:	28 60       	ori	r18, 0x08	; 8
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
	
	// CONFIGURE DAC WR
	MS_DIGITAL_OUT_BIT_WR_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_WR_PIN);
     13e:	87 e2       	ldi	r24, 0x27	; 39
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	27 e2       	ldi	r18, 0x27	; 39
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	21 60       	ori	r18, 0x01	; 1
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
	
	// CONFIGURE BUTTONS
	//MS_BUTTON_A_DIR &= ~(0x01 << MS_BUTTON_A_PIN);
	//MS_BUTTON_B_DIR &= ~(0x01 << MS_BUTTON_B_PIN);
	//MS_BUTTON_C_DIR &= ~(0x01 << MS_BUTTON_C_PIN);
}
     150:	00 00       	nop
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <DACWRdisable>:


void DACWRdisable(void)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
	MS_DIGITAL_OUT_BIT_WR_PORT |= (0x01 << MS_DIGITAL_OUT_BIT_WR_PIN);
     160:	88 e2       	ldi	r24, 0x28	; 40
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	28 e2       	ldi	r18, 0x28	; 40
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	f9 01       	movw	r30, r18
     16a:	20 81       	ld	r18, Z
     16c:	21 60       	ori	r18, 0x01	; 1
     16e:	fc 01       	movw	r30, r24
     170:	20 83       	st	Z, r18
}
     172:	00 00       	nop
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <DACWRenable>:


void DACWRenable(void)
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
	MS_DIGITAL_OUT_BIT_WR_PORT &=  ~(0x01 << MS_DIGITAL_OUT_BIT_WR_PIN);
     182:	88 e2       	ldi	r24, 0x28	; 40
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	28 e2       	ldi	r18, 0x28	; 40
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	f9 01       	movw	r30, r18
     18c:	20 81       	ld	r18, Z
     18e:	2e 7f       	andi	r18, 0xFE	; 254
     190:	fc 01       	movw	r30, r24
     192:	20 83       	st	Z, r18
}
     194:	00 00       	nop
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <DigitalWrite>:


void DigitalWrite(unsigned char byte)
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <DigitalWrite+0x6>
     1a2:	1f 92       	push	r1
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char bit;
	unsigned char mask;
	
	DACWRdisable();
     1aa:	0e 94 ac 00 	call	0x158	; 0x158 <DACWRdisable>
	
	bit = (byte >> 0) & 0x01;
     1ae:	8b 81       	ldd	r24, Y+3	; 0x03
     1b0:	81 70       	andi	r24, 0x01	; 1
     1b2:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_0_PIN);
     1b4:	8b ef       	ldi	r24, 0xFB	; 251
     1b6:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_0_PORT = (MS_DIGITAL_OUT_BIT_0_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_0_PIN);
     1b8:	85 e2       	ldi	r24, 0x25	; 37
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	25 e2       	ldi	r18, 0x25	; 37
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	f9 01       	movw	r30, r18
     1c2:	30 81       	ld	r19, Z
     1c4:	2a 81       	ldd	r18, Y+2	; 0x02
     1c6:	23 23       	and	r18, r19
     1c8:	42 2f       	mov	r20, r18
     1ca:	29 81       	ldd	r18, Y+1	; 0x01
     1cc:	22 2f       	mov	r18, r18
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	22 0f       	add	r18, r18
     1d2:	33 1f       	adc	r19, r19
     1d4:	22 0f       	add	r18, r18
     1d6:	33 1f       	adc	r19, r19
     1d8:	24 2b       	or	r18, r20
     1da:	fc 01       	movw	r30, r24
     1dc:	20 83       	st	Z, r18
	
	bit = (byte >> 1) & 0x01;
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	86 95       	lsr	r24
     1e2:	81 70       	andi	r24, 0x01	; 1
     1e4:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_1_PIN);
     1e6:	8d ef       	ldi	r24, 0xFD	; 253
     1e8:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_1_PORT = (MS_DIGITAL_OUT_BIT_1_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_1_PIN);
     1ea:	85 e2       	ldi	r24, 0x25	; 37
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	25 e2       	ldi	r18, 0x25	; 37
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	f9 01       	movw	r30, r18
     1f4:	30 81       	ld	r19, Z
     1f6:	2a 81       	ldd	r18, Y+2	; 0x02
     1f8:	23 23       	and	r18, r19
     1fa:	42 2f       	mov	r20, r18
     1fc:	29 81       	ldd	r18, Y+1	; 0x01
     1fe:	22 2f       	mov	r18, r18
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	22 0f       	add	r18, r18
     204:	33 1f       	adc	r19, r19
     206:	24 2b       	or	r18, r20
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18

	bit = (byte >> 2) & 0x01;
     20c:	8b 81       	ldd	r24, Y+3	; 0x03
     20e:	86 95       	lsr	r24
     210:	86 95       	lsr	r24
     212:	81 70       	andi	r24, 0x01	; 1
     214:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_2_PIN);
     216:	8e ef       	ldi	r24, 0xFE	; 254
     218:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_2_PORT = (MS_DIGITAL_OUT_BIT_2_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_2_PIN);
     21a:	85 e2       	ldi	r24, 0x25	; 37
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	25 e2       	ldi	r18, 0x25	; 37
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	f9 01       	movw	r30, r18
     224:	30 81       	ld	r19, Z
     226:	2a 81       	ldd	r18, Y+2	; 0x02
     228:	32 23       	and	r19, r18
     22a:	29 81       	ldd	r18, Y+1	; 0x01
     22c:	23 2b       	or	r18, r19
     22e:	fc 01       	movw	r30, r24
     230:	20 83       	st	Z, r18

	bit = (byte >> 3) & 0x01;
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	86 95       	lsr	r24
     236:	86 95       	lsr	r24
     238:	86 95       	lsr	r24
     23a:	81 70       	andi	r24, 0x01	; 1
     23c:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_3_PIN);
     23e:	8f e7       	ldi	r24, 0x7F	; 127
     240:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_3_PORT = (MS_DIGITAL_OUT_BIT_3_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_3_PIN);
     242:	8b e2       	ldi	r24, 0x2B	; 43
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	2b e2       	ldi	r18, 0x2B	; 43
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	f9 01       	movw	r30, r18
     24c:	30 81       	ld	r19, Z
     24e:	2a 81       	ldd	r18, Y+2	; 0x02
     250:	23 23       	and	r18, r19
     252:	42 2f       	mov	r20, r18
     254:	29 81       	ldd	r18, Y+1	; 0x01
     256:	22 2f       	mov	r18, r18
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	36 95       	lsr	r19
     25c:	32 2f       	mov	r19, r18
     25e:	22 27       	eor	r18, r18
     260:	37 95       	ror	r19
     262:	27 95       	ror	r18
     264:	24 2b       	or	r18, r20
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18

	bit = (byte >> 4) & 0x01;
     26a:	8b 81       	ldd	r24, Y+3	; 0x03
     26c:	82 95       	swap	r24
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	81 70       	andi	r24, 0x01	; 1
     272:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_4_PIN);
     274:	8f ed       	ldi	r24, 0xDF	; 223
     276:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_4_PORT = (MS_DIGITAL_OUT_BIT_4_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_4_PIN);
     278:	8b e2       	ldi	r24, 0x2B	; 43
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	2b e2       	ldi	r18, 0x2B	; 43
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	30 81       	ld	r19, Z
     284:	2a 81       	ldd	r18, Y+2	; 0x02
     286:	23 23       	and	r18, r19
     288:	42 2f       	mov	r20, r18
     28a:	29 81       	ldd	r18, Y+1	; 0x01
     28c:	22 2f       	mov	r18, r18
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	22 0f       	add	r18, r18
     292:	33 1f       	adc	r19, r19
     294:	22 95       	swap	r18
     296:	32 95       	swap	r19
     298:	30 7f       	andi	r19, 0xF0	; 240
     29a:	32 27       	eor	r19, r18
     29c:	20 7f       	andi	r18, 0xF0	; 240
     29e:	32 27       	eor	r19, r18
     2a0:	24 2b       	or	r18, r20
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 83       	st	Z, r18

	bit = (byte >> 5) & 0x01;
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	82 95       	swap	r24
     2aa:	86 95       	lsr	r24
     2ac:	87 70       	andi	r24, 0x07	; 7
     2ae:	81 70       	andi	r24, 0x01	; 1
     2b0:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_5_PIN);
     2b2:	8f ee       	ldi	r24, 0xEF	; 239
     2b4:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_5_PORT = (MS_DIGITAL_OUT_BIT_5_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_5_PIN);
     2b6:	8b e2       	ldi	r24, 0x2B	; 43
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	2b e2       	ldi	r18, 0x2B	; 43
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	f9 01       	movw	r30, r18
     2c0:	30 81       	ld	r19, Z
     2c2:	2a 81       	ldd	r18, Y+2	; 0x02
     2c4:	23 23       	and	r18, r19
     2c6:	42 2f       	mov	r20, r18
     2c8:	29 81       	ldd	r18, Y+1	; 0x01
     2ca:	22 2f       	mov	r18, r18
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	22 95       	swap	r18
     2d0:	32 95       	swap	r19
     2d2:	30 7f       	andi	r19, 0xF0	; 240
     2d4:	32 27       	eor	r19, r18
     2d6:	20 7f       	andi	r18, 0xF0	; 240
     2d8:	32 27       	eor	r19, r18
     2da:	24 2b       	or	r18, r20
     2dc:	fc 01       	movw	r30, r24
     2de:	20 83       	st	Z, r18

	bit = (byte >> 6) & 0x01;
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	82 95       	swap	r24
     2e4:	86 95       	lsr	r24
     2e6:	86 95       	lsr	r24
     2e8:	83 70       	andi	r24, 0x03	; 3
     2ea:	81 70       	andi	r24, 0x01	; 1
     2ec:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_6_PIN);
     2ee:	8f ee       	ldi	r24, 0xEF	; 239
     2f0:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_6_PORT = (MS_DIGITAL_OUT_BIT_6_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_6_PIN);
     2f2:	88 e2       	ldi	r24, 0x28	; 40
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	28 e2       	ldi	r18, 0x28	; 40
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	f9 01       	movw	r30, r18
     2fc:	30 81       	ld	r19, Z
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	23 23       	and	r18, r19
     302:	42 2f       	mov	r20, r18
     304:	29 81       	ldd	r18, Y+1	; 0x01
     306:	22 2f       	mov	r18, r18
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	22 95       	swap	r18
     30c:	32 95       	swap	r19
     30e:	30 7f       	andi	r19, 0xF0	; 240
     310:	32 27       	eor	r19, r18
     312:	20 7f       	andi	r18, 0xF0	; 240
     314:	32 27       	eor	r19, r18
     316:	24 2b       	or	r18, r20
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
	
	bit = (byte >> 7) & 0x01;
     31c:	8b 81       	ldd	r24, Y+3	; 0x03
     31e:	88 1f       	adc	r24, r24
     320:	88 27       	eor	r24, r24
     322:	88 1f       	adc	r24, r24
     324:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_7_PIN);
     326:	87 ef       	ldi	r24, 0xF7	; 247
     328:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_7_PORT = (MS_DIGITAL_OUT_BIT_7_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_7_PIN);
     32a:	88 e2       	ldi	r24, 0x28	; 40
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	28 e2       	ldi	r18, 0x28	; 40
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	f9 01       	movw	r30, r18
     334:	30 81       	ld	r19, Z
     336:	2a 81       	ldd	r18, Y+2	; 0x02
     338:	23 23       	and	r18, r19
     33a:	42 2f       	mov	r20, r18
     33c:	29 81       	ldd	r18, Y+1	; 0x01
     33e:	22 2f       	mov	r18, r18
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	22 0f       	add	r18, r18
     348:	33 1f       	adc	r19, r19
     34a:	22 0f       	add	r18, r18
     34c:	33 1f       	adc	r19, r19
     34e:	24 2b       	or	r18, r20
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
	
	DACWRenable();
     354:	0e 94 bd 00 	call	0x17a	; 0x17a <DACWRenable>
}
     358:	00 00       	nop
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	00 d0       	rcall	.+0      	; 0x36c <vListInitialise+0x6>
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	9a 83       	std	Y+2, r25	; 0x02
     372:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	9c 01       	movw	r18, r24
     37a:	2d 5f       	subi	r18, 0xFD	; 253
     37c:	3f 4f       	sbci	r19, 0xFF	; 255
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	fc 01       	movw	r30, r24
     384:	32 83       	std	Z+2, r19	; 0x02
     386:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	3f ef       	ldi	r19, 0xFF	; 255
     390:	fc 01       	movw	r30, r24
     392:	34 83       	std	Z+4, r19	; 0x04
     394:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	9c 01       	movw	r18, r24
     39c:	2d 5f       	subi	r18, 0xFD	; 253
     39e:	3f 4f       	sbci	r19, 0xFF	; 255
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	fc 01       	movw	r30, r24
     3a6:	36 83       	std	Z+6, r19	; 0x06
     3a8:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	9c 01       	movw	r18, r24
     3b0:	2d 5f       	subi	r18, 0xFD	; 253
     3b2:	3f 4f       	sbci	r19, 0xFF	; 255
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	9a 81       	ldd	r25, Y+2	; 0x02
     3b8:	fc 01       	movw	r30, r24
     3ba:	30 87       	std	Z+8, r19	; 0x08
     3bc:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	fc 01       	movw	r30, r24
     3c4:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     3c6:	00 00       	nop
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <vListInitialiseItem+0x6>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	fc 01       	movw	r30, r24
     3e6:	11 86       	std	Z+9, r1	; 0x09
     3e8:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     3ea:	00 00       	nop
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <vListInsertEnd+0x6>
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <vListInsertEnd+0x8>
     3fe:	00 d0       	rcall	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	9c 83       	std	Y+4, r25	; 0x04
     406:	8b 83       	std	Y+3, r24	; 0x03
     408:	7e 83       	std	Y+6, r23	; 0x06
     40a:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     40c:	8b 81       	ldd	r24, Y+3	; 0x03
     40e:	9c 81       	ldd	r25, Y+4	; 0x04
     410:	fc 01       	movw	r30, r24
     412:	81 81       	ldd	r24, Z+1	; 0x01
     414:	92 81       	ldd	r25, Z+2	; 0x02
     416:	9a 83       	std	Y+2, r25	; 0x02
     418:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     41a:	8d 81       	ldd	r24, Y+5	; 0x05
     41c:	9e 81       	ldd	r25, Y+6	; 0x06
     41e:	29 81       	ldd	r18, Y+1	; 0x01
     420:	3a 81       	ldd	r19, Y+2	; 0x02
     422:	fc 01       	movw	r30, r24
     424:	33 83       	std	Z+3, r19	; 0x03
     426:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	fc 01       	movw	r30, r24
     42e:	24 81       	ldd	r18, Z+4	; 0x04
     430:	35 81       	ldd	r19, Z+5	; 0x05
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	9e 81       	ldd	r25, Y+6	; 0x06
     436:	fc 01       	movw	r30, r24
     438:	35 83       	std	Z+5, r19	; 0x05
     43a:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	fc 01       	movw	r30, r24
     442:	84 81       	ldd	r24, Z+4	; 0x04
     444:	95 81       	ldd	r25, Z+5	; 0x05
     446:	2d 81       	ldd	r18, Y+5	; 0x05
     448:	3e 81       	ldd	r19, Y+6	; 0x06
     44a:	fc 01       	movw	r30, r24
     44c:	33 83       	std	Z+3, r19	; 0x03
     44e:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	2d 81       	ldd	r18, Y+5	; 0x05
     456:	3e 81       	ldd	r19, Y+6	; 0x06
     458:	fc 01       	movw	r30, r24
     45a:	35 83       	std	Z+5, r19	; 0x05
     45c:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     45e:	8d 81       	ldd	r24, Y+5	; 0x05
     460:	9e 81       	ldd	r25, Y+6	; 0x06
     462:	2b 81       	ldd	r18, Y+3	; 0x03
     464:	3c 81       	ldd	r19, Y+4	; 0x04
     466:	fc 01       	movw	r30, r24
     468:	31 87       	std	Z+9, r19	; 0x09
     46a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	9c 81       	ldd	r25, Y+4	; 0x04
     470:	fc 01       	movw	r30, r24
     472:	80 81       	ld	r24, Z
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	28 0f       	add	r18, r24
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	9c 81       	ldd	r25, Y+4	; 0x04
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
}
     480:	00 00       	nop
     482:	26 96       	adiw	r28, 0x06	; 6
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	28 97       	sbiw	r28, 0x08	; 8
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	9e 83       	std	Y+6, r25	; 0x06
     4aa:	8d 83       	std	Y+5, r24	; 0x05
     4ac:	78 87       	std	Y+8, r23	; 0x08
     4ae:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4b0:	8f 81       	ldd	r24, Y+7	; 0x07
     4b2:	98 85       	ldd	r25, Y+8	; 0x08
     4b4:	fc 01       	movw	r30, r24
     4b6:	80 81       	ld	r24, Z
     4b8:	91 81       	ldd	r25, Z+1	; 0x01
     4ba:	9c 83       	std	Y+4, r25	; 0x04
     4bc:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	9c 81       	ldd	r25, Y+4	; 0x04
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	41 f4       	brne	.+16     	; 0x4d6 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     4c6:	8d 81       	ldd	r24, Y+5	; 0x05
     4c8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ca:	fc 01       	movw	r30, r24
     4cc:	87 81       	ldd	r24, Z+7	; 0x07
     4ce:	90 85       	ldd	r25, Z+8	; 0x08
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	1a c0       	rjmp	.+52     	; 0x50a <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4d6:	8d 81       	ldd	r24, Y+5	; 0x05
     4d8:	9e 81       	ldd	r25, Y+6	; 0x06
     4da:	03 96       	adiw	r24, 0x03	; 3
     4dc:	9a 83       	std	Y+2, r25	; 0x02
     4de:	89 83       	std	Y+1, r24	; 0x01
     4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <vListInsert+0x5c>
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	fc 01       	movw	r30, r24
     4e8:	82 81       	ldd	r24, Z+2	; 0x02
     4ea:	93 81       	ldd	r25, Z+3	; 0x03
     4ec:	9a 83       	std	Y+2, r25	; 0x02
     4ee:	89 83       	std	Y+1, r24	; 0x01
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
     4f4:	fc 01       	movw	r30, r24
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 81       	ld	r18, Z
     4fe:	31 81       	ldd	r19, Z+1	; 0x01
     500:	8b 81       	ldd	r24, Y+3	; 0x03
     502:	9c 81       	ldd	r25, Y+4	; 0x04
     504:	82 17       	cp	r24, r18
     506:	93 07       	cpc	r25, r19
     508:	60 f7       	brcc	.-40     	; 0x4e2 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	9a 81       	ldd	r25, Y+2	; 0x02
     50e:	fc 01       	movw	r30, r24
     510:	22 81       	ldd	r18, Z+2	; 0x02
     512:	33 81       	ldd	r19, Z+3	; 0x03
     514:	8f 81       	ldd	r24, Y+7	; 0x07
     516:	98 85       	ldd	r25, Y+8	; 0x08
     518:	fc 01       	movw	r30, r24
     51a:	33 83       	std	Z+3, r19	; 0x03
     51c:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     51e:	8f 81       	ldd	r24, Y+7	; 0x07
     520:	98 85       	ldd	r25, Y+8	; 0x08
     522:	fc 01       	movw	r30, r24
     524:	82 81       	ldd	r24, Z+2	; 0x02
     526:	93 81       	ldd	r25, Z+3	; 0x03
     528:	2f 81       	ldd	r18, Y+7	; 0x07
     52a:	38 85       	ldd	r19, Y+8	; 0x08
     52c:	fc 01       	movw	r30, r24
     52e:	35 83       	std	Z+5, r19	; 0x05
     530:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     532:	8f 81       	ldd	r24, Y+7	; 0x07
     534:	98 85       	ldd	r25, Y+8	; 0x08
     536:	29 81       	ldd	r18, Y+1	; 0x01
     538:	3a 81       	ldd	r19, Y+2	; 0x02
     53a:	fc 01       	movw	r30, r24
     53c:	35 83       	std	Z+5, r19	; 0x05
     53e:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	2f 81       	ldd	r18, Y+7	; 0x07
     546:	38 85       	ldd	r19, Y+8	; 0x08
     548:	fc 01       	movw	r30, r24
     54a:	33 83       	std	Z+3, r19	; 0x03
     54c:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     54e:	8f 81       	ldd	r24, Y+7	; 0x07
     550:	98 85       	ldd	r25, Y+8	; 0x08
     552:	2d 81       	ldd	r18, Y+5	; 0x05
     554:	3e 81       	ldd	r19, Y+6	; 0x06
     556:	fc 01       	movw	r30, r24
     558:	31 87       	std	Z+9, r19	; 0x09
     55a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     55c:	8d 81       	ldd	r24, Y+5	; 0x05
     55e:	9e 81       	ldd	r25, Y+6	; 0x06
     560:	fc 01       	movw	r30, r24
     562:	80 81       	ld	r24, Z
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	28 0f       	add	r18, r24
     568:	8d 81       	ldd	r24, Y+5	; 0x05
     56a:	9e 81       	ldd	r25, Y+6	; 0x06
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
}
     570:	00 00       	nop
     572:	28 96       	adiw	r28, 0x08	; 8
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	00 d0       	rcall	.+0      	; 0x58a <uxListRemove+0x6>
     58a:	00 d0       	rcall	.+0      	; 0x58c <uxListRemove+0x8>
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	9c 81       	ldd	r25, Y+4	; 0x04
     598:	fc 01       	movw	r30, r24
     59a:	80 85       	ldd	r24, Z+8	; 0x08
     59c:	91 85       	ldd	r25, Z+9	; 0x09
     59e:	9a 83       	std	Y+2, r25	; 0x02
     5a0:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	2b 81       	ldd	r18, Y+3	; 0x03
     5ae:	3c 81       	ldd	r19, Y+4	; 0x04
     5b0:	f9 01       	movw	r30, r18
     5b2:	24 81       	ldd	r18, Z+4	; 0x04
     5b4:	35 81       	ldd	r19, Z+5	; 0x05
     5b6:	fc 01       	movw	r30, r24
     5b8:	35 83       	std	Z+5, r19	; 0x05
     5ba:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	fc 01       	movw	r30, r24
     5c2:	84 81       	ldd	r24, Z+4	; 0x04
     5c4:	95 81       	ldd	r25, Z+5	; 0x05
     5c6:	2b 81       	ldd	r18, Y+3	; 0x03
     5c8:	3c 81       	ldd	r19, Y+4	; 0x04
     5ca:	f9 01       	movw	r30, r18
     5cc:	22 81       	ldd	r18, Z+2	; 0x02
     5ce:	33 81       	ldd	r19, Z+3	; 0x03
     5d0:	fc 01       	movw	r30, r24
     5d2:	33 83       	std	Z+3, r19	; 0x03
     5d4:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	fc 01       	movw	r30, r24
     5dc:	21 81       	ldd	r18, Z+1	; 0x01
     5de:	32 81       	ldd	r19, Z+2	; 0x02
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	28 17       	cp	r18, r24
     5e6:	39 07       	cpc	r19, r25
     5e8:	51 f4       	brne	.+20     	; 0x5fe <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	9c 81       	ldd	r25, Y+4	; 0x04
     5ee:	fc 01       	movw	r30, r24
     5f0:	24 81       	ldd	r18, Z+4	; 0x04
     5f2:	35 81       	ldd	r19, Z+5	; 0x05
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	fc 01       	movw	r30, r24
     5fa:	32 83       	std	Z+2, r19	; 0x02
     5fc:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	9c 81       	ldd	r25, Y+4	; 0x04
     602:	fc 01       	movw	r30, r24
     604:	11 86       	std	Z+9, r1	; 0x09
     606:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	9a 81       	ldd	r25, Y+2	; 0x02
     60c:	fc 01       	movw	r30, r24
     60e:	80 81       	ld	r24, Z
     610:	2f ef       	ldi	r18, 0xFF	; 255
     612:	28 0f       	add	r18, r24
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	9a 81       	ldd	r25, Y+2	; 0x02
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	fc 01       	movw	r30, r24
     622:	80 81       	ld	r24, Z
}
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	2e 97       	sbiw	r28, 0x0e	; 14
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	9e 87       	std	Y+14, r25	; 0x0e
     648:	8d 87       	std	Y+13, r24	; 0x0d
     64a:	1e 82       	std	Y+6, r1	; 0x06
     64c:	1d 82       	std	Y+5, r1	; 0x05
     64e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskSuspendAll>
     652:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <xHeapHasBeenInitialised.2345>
     656:	88 23       	and	r24, r24
     658:	29 f4       	brne	.+10     	; 0x664 <pvPortMalloc+0x32>
     65a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <prvHeapInit>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <xHeapHasBeenInitialised.2345>
     664:	8d 85       	ldd	r24, Y+13	; 0x0d
     666:	9e 85       	ldd	r25, Y+14	; 0x0e
     668:	89 2b       	or	r24, r25
     66a:	41 f0       	breq	.+16     	; 0x67c <pvPortMalloc+0x4a>
     66c:	84 e0       	ldi	r24, 0x04	; 4
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2d 85       	ldd	r18, Y+13	; 0x0d
     672:	3e 85       	ldd	r19, Y+14	; 0x0e
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
     678:	9e 87       	std	Y+14, r25	; 0x0e
     67a:	8d 87       	std	Y+13, r24	; 0x0d
     67c:	8d 85       	ldd	r24, Y+13	; 0x0d
     67e:	9e 85       	ldd	r25, Y+14	; 0x0e
     680:	89 2b       	or	r24, r25
     682:	09 f4       	brne	.+2      	; 0x686 <pvPortMalloc+0x54>
     684:	b8 c0       	rjmp	.+368    	; 0x7f6 <pvPortMalloc+0x1c4>
     686:	8d 85       	ldd	r24, Y+13	; 0x0d
     688:	9e 85       	ldd	r25, Y+14	; 0x0e
     68a:	8b 3d       	cpi	r24, 0xDB	; 219
     68c:	95 40       	sbci	r25, 0x05	; 5
     68e:	08 f0       	brcs	.+2      	; 0x692 <pvPortMalloc+0x60>
     690:	b2 c0       	rjmp	.+356    	; 0x7f6 <pvPortMalloc+0x1c4>
     692:	8c e3       	ldi	r24, 0x3C	; 60
     694:	97 e0       	ldi	r25, 0x07	; 7
     696:	9c 83       	std	Y+4, r25	; 0x04
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <xStart>
     69e:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <xStart+0x1>
     6a2:	9a 83       	std	Y+2, r25	; 0x02
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	0b c0       	rjmp	.+22     	; 0x6be <pvPortMalloc+0x8c>
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	9c 83       	std	Y+4, r25	; 0x04
     6ae:	8b 83       	std	Y+3, r24	; 0x03
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	9a 83       	std	Y+2, r25	; 0x02
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	fc 01       	movw	r30, r24
     6c4:	22 81       	ldd	r18, Z+2	; 0x02
     6c6:	33 81       	ldd	r19, Z+3	; 0x03
     6c8:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ca:	9e 85       	ldd	r25, Y+14	; 0x0e
     6cc:	28 17       	cp	r18, r24
     6ce:	39 07       	cpc	r19, r25
     6d0:	38 f4       	brcc	.+14     	; 0x6e0 <pvPortMalloc+0xae>
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	fc 01       	movw	r30, r24
     6d8:	80 81       	ld	r24, Z
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	89 2b       	or	r24, r25
     6de:	21 f7       	brne	.-56     	; 0x6a8 <pvPortMalloc+0x76>
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	9a 81       	ldd	r25, Y+2	; 0x02
     6e4:	80 54       	subi	r24, 0x40	; 64
     6e6:	97 40       	sbci	r25, 0x07	; 7
     6e8:	09 f4       	brne	.+2      	; 0x6ec <pvPortMalloc+0xba>
     6ea:	85 c0       	rjmp	.+266    	; 0x7f6 <pvPortMalloc+0x1c4>
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 81       	ld	r18, Z
     6f4:	31 81       	ldd	r19, Z+1	; 0x01
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	82 0f       	add	r24, r18
     6fc:	93 1f       	adc	r25, r19
     6fe:	9e 83       	std	Y+6, r25	; 0x06
     700:	8d 83       	std	Y+5, r24	; 0x05
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02
     706:	fc 01       	movw	r30, r24
     708:	20 81       	ld	r18, Z
     70a:	31 81       	ldd	r19, Z+1	; 0x01
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	9c 81       	ldd	r25, Y+4	; 0x04
     710:	fc 01       	movw	r30, r24
     712:	31 83       	std	Z+1, r19	; 0x01
     714:	20 83       	st	Z, r18
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	fc 01       	movw	r30, r24
     71c:	22 81       	ldd	r18, Z+2	; 0x02
     71e:	33 81       	ldd	r19, Z+3	; 0x03
     720:	8d 85       	ldd	r24, Y+13	; 0x0d
     722:	9e 85       	ldd	r25, Y+14	; 0x0e
     724:	28 1b       	sub	r18, r24
     726:	39 0b       	sbc	r19, r25
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	82 17       	cp	r24, r18
     732:	93 07       	cpc	r25, r19
     734:	08 f0       	brcs	.+2      	; 0x738 <pvPortMalloc+0x106>
     736:	4e c0       	rjmp	.+156    	; 0x7d4 <pvPortMalloc+0x1a2>
     738:	29 81       	ldd	r18, Y+1	; 0x01
     73a:	3a 81       	ldd	r19, Y+2	; 0x02
     73c:	8d 85       	ldd	r24, Y+13	; 0x0d
     73e:	9e 85       	ldd	r25, Y+14	; 0x0e
     740:	82 0f       	add	r24, r18
     742:	93 1f       	adc	r25, r19
     744:	9a 87       	std	Y+10, r25	; 0x0a
     746:	89 87       	std	Y+9, r24	; 0x09
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	fc 01       	movw	r30, r24
     74e:	22 81       	ldd	r18, Z+2	; 0x02
     750:	33 81       	ldd	r19, Z+3	; 0x03
     752:	8d 85       	ldd	r24, Y+13	; 0x0d
     754:	9e 85       	ldd	r25, Y+14	; 0x0e
     756:	28 1b       	sub	r18, r24
     758:	39 0b       	sbc	r19, r25
     75a:	89 85       	ldd	r24, Y+9	; 0x09
     75c:	9a 85       	ldd	r25, Y+10	; 0x0a
     75e:	fc 01       	movw	r30, r24
     760:	33 83       	std	Z+3, r19	; 0x03
     762:	22 83       	std	Z+2, r18	; 0x02
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	9a 81       	ldd	r25, Y+2	; 0x02
     768:	2d 85       	ldd	r18, Y+13	; 0x0d
     76a:	3e 85       	ldd	r19, Y+14	; 0x0e
     76c:	fc 01       	movw	r30, r24
     76e:	33 83       	std	Z+3, r19	; 0x03
     770:	22 83       	std	Z+2, r18	; 0x02
     772:	89 85       	ldd	r24, Y+9	; 0x09
     774:	9a 85       	ldd	r25, Y+10	; 0x0a
     776:	fc 01       	movw	r30, r24
     778:	82 81       	ldd	r24, Z+2	; 0x02
     77a:	93 81       	ldd	r25, Z+3	; 0x03
     77c:	9c 87       	std	Y+12, r25	; 0x0c
     77e:	8b 87       	std	Y+11, r24	; 0x0b
     780:	8c e3       	ldi	r24, 0x3C	; 60
     782:	97 e0       	ldi	r25, 0x07	; 7
     784:	98 87       	std	Y+8, r25	; 0x08
     786:	8f 83       	std	Y+7, r24	; 0x07
     788:	07 c0       	rjmp	.+14     	; 0x798 <pvPortMalloc+0x166>
     78a:	8f 81       	ldd	r24, Y+7	; 0x07
     78c:	98 85       	ldd	r25, Y+8	; 0x08
     78e:	fc 01       	movw	r30, r24
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	98 87       	std	Y+8, r25	; 0x08
     796:	8f 83       	std	Y+7, r24	; 0x07
     798:	8f 81       	ldd	r24, Y+7	; 0x07
     79a:	98 85       	ldd	r25, Y+8	; 0x08
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	fc 01       	movw	r30, r24
     7a4:	22 81       	ldd	r18, Z+2	; 0x02
     7a6:	33 81       	ldd	r19, Z+3	; 0x03
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 17       	cp	r18, r24
     7ae:	39 07       	cpc	r19, r25
     7b0:	60 f3       	brcs	.-40     	; 0x78a <pvPortMalloc+0x158>
     7b2:	8f 81       	ldd	r24, Y+7	; 0x07
     7b4:	98 85       	ldd	r25, Y+8	; 0x08
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 81       	ld	r18, Z
     7ba:	31 81       	ldd	r19, Z+1	; 0x01
     7bc:	89 85       	ldd	r24, Y+9	; 0x09
     7be:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c0:	fc 01       	movw	r30, r24
     7c2:	31 83       	std	Z+1, r19	; 0x01
     7c4:	20 83       	st	Z, r18
     7c6:	8f 81       	ldd	r24, Y+7	; 0x07
     7c8:	98 85       	ldd	r25, Y+8	; 0x08
     7ca:	29 85       	ldd	r18, Y+9	; 0x09
     7cc:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ce:	fc 01       	movw	r30, r24
     7d0:	31 83       	std	Z+1, r19	; 0x01
     7d2:	20 83       	st	Z, r18
     7d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	fc 01       	movw	r30, r24
     7e2:	82 81       	ldd	r24, Z+2	; 0x02
     7e4:	93 81       	ldd	r25, Z+3	; 0x03
     7e6:	a9 01       	movw	r20, r18
     7e8:	48 1b       	sub	r20, r24
     7ea:	59 0b       	sbc	r21, r25
     7ec:	ca 01       	movw	r24, r20
     7ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     7f6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskResumeAll>
     7fa:	8d 81       	ldd	r24, Y+5	; 0x05
     7fc:	9e 81       	ldd	r25, Y+6	; 0x06
     7fe:	2e 96       	adiw	r28, 0x0e	; 14
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <vPortFree>:
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	2a 97       	sbiw	r28, 0x0a	; 10
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	9a 87       	std	Y+10, r25	; 0x0a
     826:	89 87       	std	Y+9, r24	; 0x09
     828:	89 85       	ldd	r24, Y+9	; 0x09
     82a:	9a 85       	ldd	r25, Y+10	; 0x0a
     82c:	9c 83       	std	Y+4, r25	; 0x04
     82e:	8b 83       	std	Y+3, r24	; 0x03
     830:	89 85       	ldd	r24, Y+9	; 0x09
     832:	9a 85       	ldd	r25, Y+10	; 0x0a
     834:	89 2b       	or	r24, r25
     836:	09 f4       	brne	.+2      	; 0x83a <vPortFree+0x2a>
     838:	53 c0       	rjmp	.+166    	; 0x8e0 <vPortFree+0xd0>
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	91 95       	neg	r25
     840:	81 95       	neg	r24
     842:	91 09       	sbc	r25, r1
     844:	2b 81       	ldd	r18, Y+3	; 0x03
     846:	3c 81       	ldd	r19, Y+4	; 0x04
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	8b 83       	std	Y+3, r24	; 0x03
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	9e 83       	std	Y+6, r25	; 0x06
     856:	8d 83       	std	Y+5, r24	; 0x05
     858:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskSuspendAll>
     85c:	8d 81       	ldd	r24, Y+5	; 0x05
     85e:	9e 81       	ldd	r25, Y+6	; 0x06
     860:	fc 01       	movw	r30, r24
     862:	82 81       	ldd	r24, Z+2	; 0x02
     864:	93 81       	ldd	r25, Z+3	; 0x03
     866:	98 87       	std	Y+8, r25	; 0x08
     868:	8f 83       	std	Y+7, r24	; 0x07
     86a:	8c e3       	ldi	r24, 0x3C	; 60
     86c:	97 e0       	ldi	r25, 0x07	; 7
     86e:	9a 83       	std	Y+2, r25	; 0x02
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	07 c0       	rjmp	.+14     	; 0x882 <vPortFree+0x72>
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	9a 81       	ldd	r25, Y+2	; 0x02
     878:	fc 01       	movw	r30, r24
     87a:	80 81       	ld	r24, Z
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	fc 01       	movw	r30, r24
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	fc 01       	movw	r30, r24
     88e:	22 81       	ldd	r18, Z+2	; 0x02
     890:	33 81       	ldd	r19, Z+3	; 0x03
     892:	8f 81       	ldd	r24, Y+7	; 0x07
     894:	98 85       	ldd	r25, Y+8	; 0x08
     896:	28 17       	cp	r18, r24
     898:	39 07       	cpc	r19, r25
     89a:	60 f3       	brcs	.-40     	; 0x874 <vPortFree+0x64>
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	9a 81       	ldd	r25, Y+2	; 0x02
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 81       	ld	r18, Z
     8a4:	31 81       	ldd	r19, Z+1	; 0x01
     8a6:	8d 81       	ldd	r24, Y+5	; 0x05
     8a8:	9e 81       	ldd	r25, Y+6	; 0x06
     8aa:	fc 01       	movw	r30, r24
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
     8b4:	2d 81       	ldd	r18, Y+5	; 0x05
     8b6:	3e 81       	ldd	r19, Y+6	; 0x06
     8b8:	fc 01       	movw	r30, r24
     8ba:	31 83       	std	Z+1, r19	; 0x01
     8bc:	20 83       	st	Z, r18
     8be:	8d 81       	ldd	r24, Y+5	; 0x05
     8c0:	9e 81       	ldd	r25, Y+6	; 0x06
     8c2:	fc 01       	movw	r30, r24
     8c4:	22 81       	ldd	r18, Z+2	; 0x02
     8c6:	33 81       	ldd	r19, Z+3	; 0x03
     8c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8d0:	82 0f       	add	r24, r18
     8d2:	93 1f       	adc	r25, r19
     8d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     8dc:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskResumeAll>
     8e0:	00 00       	nop
     8e2:	2a 96       	adiw	r28, 0x0a	; 10
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <prvHeapInit+0x6>
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <prvHeapInit+0x8>
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     900:	81 e6       	ldi	r24, 0x61	; 97
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	9a 83       	std	Y+2, r25	; 0x02
     906:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <xStart+0x1>
     910:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <xStart>
	xStart.xBlockSize = ( size_t ) 0;
     914:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <xStart+0x3>
     918:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <xStart+0x2>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     91c:	8b ed       	ldi	r24, 0xDB	; 219
     91e:	95 e0       	ldi	r25, 0x05	; 5
     920:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <xEnd+0x3>
     924:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <xEnd+0x2>
	xEnd.pxNextFreeBlock = NULL;
     928:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <xEnd+0x1>
     92c:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <xEnd>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	9c 83       	std	Y+4, r25	; 0x04
     936:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	2b ed       	ldi	r18, 0xDB	; 219
     93e:	35 e0       	ldi	r19, 0x05	; 5
     940:	fc 01       	movw	r30, r24
     942:	33 83       	std	Z+3, r19	; 0x03
     944:	22 83       	std	Z+2, r18	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	9c 81       	ldd	r25, Y+4	; 0x04
     94a:	20 e4       	ldi	r18, 0x40	; 64
     94c:	37 e0       	ldi	r19, 0x07	; 7
     94e:	fc 01       	movw	r30, r24
     950:	31 83       	std	Z+1, r19	; 0x01
     952:	20 83       	st	Z, r18
}
     954:	00 00       	nop
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	28 97       	sbiw	r28, 0x08	; 8
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	7e 83       	std	Y+6, r23	; 0x06
     97e:	6d 83       	std	Y+5, r22	; 0x05
     980:	58 87       	std	Y+8, r21	; 0x08
     982:	4f 83       	std	Y+7, r20	; 0x07
     984:	8b 81       	ldd	r24, Y+3	; 0x03
     986:	9c 81       	ldd	r25, Y+4	; 0x04
     988:	21 e1       	ldi	r18, 0x11	; 17
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	9c 81       	ldd	r25, Y+4	; 0x04
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	9c 83       	std	Y+4, r25	; 0x04
     996:	8b 83       	std	Y+3, r24	; 0x03
     998:	8b 81       	ldd	r24, Y+3	; 0x03
     99a:	9c 81       	ldd	r25, Y+4	; 0x04
     99c:	22 e2       	ldi	r18, 0x22	; 34
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	23 e3       	ldi	r18, 0x33	; 51
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	8d 81       	ldd	r24, Y+5	; 0x05
     9c2:	9e 81       	ldd	r25, Y+6	; 0x06
     9c4:	9a 83       	std	Y+2, r25	; 0x02
     9c6:	89 83       	std	Y+1, r24	; 0x01
     9c8:	29 81       	ldd	r18, Y+1	; 0x01
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
     9d2:	8b 81       	ldd	r24, Y+3	; 0x03
     9d4:	9c 81       	ldd	r25, Y+4	; 0x04
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	8b 83       	std	Y+3, r24	; 0x03
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	9a 81       	ldd	r25, Y+2	; 0x02
     9e0:	89 2f       	mov	r24, r25
     9e2:	99 27       	eor	r25, r25
     9e4:	9a 83       	std	Y+2, r25	; 0x02
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	29 81       	ldd	r18, Y+1	; 0x01
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	9c 81       	ldd	r25, Y+4	; 0x04
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	fc 01       	movw	r30, r24
     a02:	10 82       	st	Z, r1
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 83       	std	Y+3, r24	; 0x03
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	9c 81       	ldd	r25, Y+4	; 0x04
     a12:	20 e8       	ldi	r18, 0x80	; 128
     a14:	fc 01       	movw	r30, r24
     a16:	20 83       	st	Z, r18
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	9c 81       	ldd	r25, Y+4	; 0x04
     a26:	fc 01       	movw	r30, r24
     a28:	10 82       	st	Z, r1
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	9c 83       	std	Y+4, r25	; 0x04
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	8b 81       	ldd	r24, Y+3	; 0x03
     a36:	9c 81       	ldd	r25, Y+4	; 0x04
     a38:	22 e0       	ldi	r18, 0x02	; 2
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
     a3e:	8b 81       	ldd	r24, Y+3	; 0x03
     a40:	9c 81       	ldd	r25, Y+4	; 0x04
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	9c 83       	std	Y+4, r25	; 0x04
     a46:	8b 83       	std	Y+3, r24	; 0x03
     a48:	8b 81       	ldd	r24, Y+3	; 0x03
     a4a:	9c 81       	ldd	r25, Y+4	; 0x04
     a4c:	23 e0       	ldi	r18, 0x03	; 3
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9c 81       	ldd	r25, Y+4	; 0x04
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	8b 83       	std	Y+3, r24	; 0x03
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	24 e0       	ldi	r18, 0x04	; 4
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
     a68:	9c 81       	ldd	r25, Y+4	; 0x04
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	9c 83       	std	Y+4, r25	; 0x04
     a6e:	8b 83       	std	Y+3, r24	; 0x03
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	9c 81       	ldd	r25, Y+4	; 0x04
     a74:	25 e0       	ldi	r18, 0x05	; 5
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	26 e0       	ldi	r18, 0x06	; 6
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	8b 83       	std	Y+3, r24	; 0x03
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	27 e0       	ldi	r18, 0x07	; 7
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 83       	st	Z, r18
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	8b 83       	std	Y+3, r24	; 0x03
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	9c 81       	ldd	r25, Y+4	; 0x04
     ab0:	28 e0       	ldi	r18, 0x08	; 8
     ab2:	fc 01       	movw	r30, r24
     ab4:	20 83       	st	Z, r18
     ab6:	8b 81       	ldd	r24, Y+3	; 0x03
     ab8:	9c 81       	ldd	r25, Y+4	; 0x04
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	9c 83       	std	Y+4, r25	; 0x04
     abe:	8b 83       	std	Y+3, r24	; 0x03
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	9c 81       	ldd	r25, Y+4	; 0x04
     ac4:	29 e0       	ldi	r18, 0x09	; 9
     ac6:	fc 01       	movw	r30, r24
     ac8:	20 83       	st	Z, r18
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	9c 83       	std	Y+4, r25	; 0x04
     ad2:	8b 83       	std	Y+3, r24	; 0x03
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	20 e1       	ldi	r18, 0x10	; 16
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	9c 83       	std	Y+4, r25	; 0x04
     ae6:	8b 83       	std	Y+3, r24	; 0x03
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	21 e1       	ldi	r18, 0x11	; 17
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	9c 81       	ldd	r25, Y+4	; 0x04
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	9c 83       	std	Y+4, r25	; 0x04
     afa:	8b 83       	std	Y+3, r24	; 0x03
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	22 e1       	ldi	r18, 0x12	; 18
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	9c 81       	ldd	r25, Y+4	; 0x04
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	9c 83       	std	Y+4, r25	; 0x04
     b0e:	8b 83       	std	Y+3, r24	; 0x03
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	9c 81       	ldd	r25, Y+4	; 0x04
     b14:	23 e1       	ldi	r18, 0x13	; 19
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
     b1a:	8b 81       	ldd	r24, Y+3	; 0x03
     b1c:	9c 81       	ldd	r25, Y+4	; 0x04
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	9c 81       	ldd	r25, Y+4	; 0x04
     b28:	24 e1       	ldi	r18, 0x14	; 20
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 83       	st	Z, r18
     b2e:	8b 81       	ldd	r24, Y+3	; 0x03
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	9c 83       	std	Y+4, r25	; 0x04
     b36:	8b 83       	std	Y+3, r24	; 0x03
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	25 e1       	ldi	r18, 0x15	; 21
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
     b42:	8b 81       	ldd	r24, Y+3	; 0x03
     b44:	9c 81       	ldd	r25, Y+4	; 0x04
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	9c 83       	std	Y+4, r25	; 0x04
     b4a:	8b 83       	std	Y+3, r24	; 0x03
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	26 e1       	ldi	r18, 0x16	; 22
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	9c 83       	std	Y+4, r25	; 0x04
     b5e:	8b 83       	std	Y+3, r24	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	27 e1       	ldi	r18, 0x17	; 23
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	9c 83       	std	Y+4, r25	; 0x04
     b72:	8b 83       	std	Y+3, r24	; 0x03
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	28 e1       	ldi	r18, 0x18	; 24
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	29 e1       	ldi	r18, 0x19	; 25
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	9c 81       	ldd	r25, Y+4	; 0x04
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	9c 83       	std	Y+4, r25	; 0x04
     b9a:	8b 83       	std	Y+3, r24	; 0x03
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	20 e2       	ldi	r18, 0x20	; 32
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	9c 83       	std	Y+4, r25	; 0x04
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	21 e2       	ldi	r18, 0x21	; 33
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	9c 83       	std	Y+4, r25	; 0x04
     bc2:	8b 83       	std	Y+3, r24	; 0x03
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	22 e2       	ldi	r18, 0x22	; 34
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	23 e2       	ldi	r18, 0x23	; 35
     bde:	fc 01       	movw	r30, r24
     be0:	20 83       	st	Z, r18
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	9c 83       	std	Y+4, r25	; 0x04
     bea:	8b 83       	std	Y+3, r24	; 0x03
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	29 81       	ldd	r18, Y+1	; 0x01
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	9c 83       	std	Y+4, r25	; 0x04
     c06:	8b 83       	std	Y+3, r24	; 0x03
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	89 2f       	mov	r24, r25
     c0e:	99 27       	eor	r25, r25
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	29 81       	ldd	r18, Y+1	; 0x01
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	26 e2       	ldi	r18, 0x26	; 38
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	9c 83       	std	Y+4, r25	; 0x04
     c3a:	8b 83       	std	Y+3, r24	; 0x03
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	27 e2       	ldi	r18, 0x27	; 39
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	28 e2       	ldi	r18, 0x28	; 40
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	9c 83       	std	Y+4, r25	; 0x04
     c62:	8b 83       	std	Y+3, r24	; 0x03
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	9c 81       	ldd	r25, Y+4	; 0x04
     c68:	29 e2       	ldi	r18, 0x29	; 41
     c6a:	fc 01       	movw	r30, r24
     c6c:	20 83       	st	Z, r18
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	9c 83       	std	Y+4, r25	; 0x04
     c76:	8b 83       	std	Y+3, r24	; 0x03
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	20 e3       	ldi	r18, 0x30	; 48
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	9c 83       	std	Y+4, r25	; 0x04
     c8a:	8b 83       	std	Y+3, r24	; 0x03
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	21 e3       	ldi	r18, 0x31	; 49
     c92:	fc 01       	movw	r30, r24
     c94:	20 83       	st	Z, r18
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	9c 81       	ldd	r25, Y+4	; 0x04
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	9c 83       	std	Y+4, r25	; 0x04
     c9e:	8b 83       	std	Y+3, r24	; 0x03
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	28 96       	adiw	r28, 0x08	; 8
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <xPortStartScheduler>:
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	0e 94 46 07 	call	0xe8c	; 0xe8c <prvSetupTimerInterrupt>
     cc2:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     cc6:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     cca:	cd 91       	ld	r28, X+
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	dd 91       	ld	r29, X+
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	ff 91       	pop	r31
     cd4:	ef 91       	pop	r30
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	9f 90       	pop	r9
     d00:	8f 90       	pop	r8
     d02:	7f 90       	pop	r7
     d04:	6f 90       	pop	r6
     d06:	5f 90       	pop	r5
     d08:	4f 90       	pop	r4
     d0a:	3f 90       	pop	r3
     d0c:	2f 90       	pop	r2
     d0e:	1f 90       	pop	r1
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	08 95       	ret
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	0f 92       	push	r0
     d28:	1f 92       	push	r1
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 92       	push	r2
     d2e:	3f 92       	push	r3
     d30:	4f 92       	push	r4
     d32:	5f 92       	push	r5
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
     d68:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     d6c:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     d70:	0d b6       	in	r0, 0x3d	; 61
     d72:	0d 92       	st	X+, r0
     d74:	0e b6       	in	r0, 0x3e	; 62
     d76:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d78:	0e 94 11 11 	call	0x2222	; 0x2222 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d7c:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     d80:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     d84:	cd 91       	ld	r28, X+
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	dd 91       	ld	r29, X+
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	df 90       	pop	r13
     db2:	cf 90       	pop	r12
     db4:	bf 90       	pop	r11
     db6:	af 90       	pop	r10
     db8:	9f 90       	pop	r9
     dba:	8f 90       	pop	r8
     dbc:	7f 90       	pop	r7
     dbe:	6f 90       	pop	r6
     dc0:	5f 90       	pop	r5
     dc2:	4f 90       	pop	r4
     dc4:	3f 90       	pop	r3
     dc6:	2f 90       	pop	r2
     dc8:	1f 90       	pop	r1
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0

	asm volatile ( "ret" );
     dd0:	08 95       	ret
	...

00000dd4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	0f 92       	push	r0
     ddc:	1f 92       	push	r1
     dde:	11 24       	eor	r1, r1
     de0:	2f 92       	push	r2
     de2:	3f 92       	push	r3
     de4:	4f 92       	push	r4
     de6:	5f 92       	push	r5
     de8:	6f 92       	push	r6
     dea:	7f 92       	push	r7
     dec:	8f 92       	push	r8
     dee:	9f 92       	push	r9
     df0:	af 92       	push	r10
     df2:	bf 92       	push	r11
     df4:	cf 92       	push	r12
     df6:	df 92       	push	r13
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	4f 93       	push	r20
     e06:	5f 93       	push	r21
     e08:	6f 93       	push	r22
     e0a:	7f 93       	push	r23
     e0c:	8f 93       	push	r24
     e0e:	9f 93       	push	r25
     e10:	af 93       	push	r26
     e12:	bf 93       	push	r27
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
     e1c:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     e20:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     e24:	0d b6       	in	r0, 0x3d	; 61
     e26:	0d 92       	st	X+, r0
     e28:	0e b6       	in	r0, 0x3e	; 62
     e2a:	0d 92       	st	X+, r0
	xTaskIncrementTick();
     e2c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <xTaskIncrementTick>
	vTaskSwitchContext();
     e30:	0e 94 11 11 	call	0x2222	; 0x2222 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e34:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     e38:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     e3c:	cd 91       	ld	r28, X+
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	dd 91       	ld	r29, X+
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	bf 91       	pop	r27
     e4e:	af 91       	pop	r26
     e50:	9f 91       	pop	r25
     e52:	8f 91       	pop	r24
     e54:	7f 91       	pop	r23
     e56:	6f 91       	pop	r22
     e58:	5f 91       	pop	r21
     e5a:	4f 91       	pop	r20
     e5c:	3f 91       	pop	r19
     e5e:	2f 91       	pop	r18
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	9f 90       	pop	r9
     e72:	8f 90       	pop	r8
     e74:	7f 90       	pop	r7
     e76:	6f 90       	pop	r6
     e78:	5f 90       	pop	r5
     e7a:	4f 90       	pop	r4
     e7c:	3f 90       	pop	r3
     e7e:	2f 90       	pop	r2
     e80:	1f 90       	pop	r1
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e88:	08 95       	ret
	...

00000e8c <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	00 d0       	rcall	.+0      	; 0xe92 <prvSetupTimerInterrupt+0x6>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <prvSetupTimerInterrupt+0x8>
     e94:	1f 92       	push	r1
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
    unsigned char ucLowByte;

    /* Using 16bit timer 1 to generate the tick.  Correct fuses must be
    selected for the configCPU_CLOCK_HZ clock. */

    ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
     e9a:	80 e8       	ldi	r24, 0x80	; 128
     e9c:	9e e3       	ldi	r25, 0x3E	; 62
     e9e:	a0 e0       	ldi	r26, 0x00	; 0
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	ab 83       	std	Y+3, r26	; 0x03
     ea8:	bc 83       	std	Y+4, r27	; 0x04

    /* We only have 16 bits so have to scale to get our required tick rate. */
    ulCompareMatch /= portCLOCK_PRESCALER;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	ab 81       	ldd	r26, Y+3	; 0x03
     eb0:	bc 81       	ldd	r27, Y+4	; 0x04
     eb2:	68 94       	set
     eb4:	15 f8       	bld	r1, 5
     eb6:	b6 95       	lsr	r27
     eb8:	a7 95       	ror	r26
     eba:	97 95       	ror	r25
     ebc:	87 95       	ror	r24
     ebe:	16 94       	lsr	r1
     ec0:	d1 f7       	brne	.-12     	; 0xeb6 <prvSetupTimerInterrupt+0x2a>
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	ab 83       	std	Y+3, r26	; 0x03
     ec8:	bc 83       	std	Y+4, r27	; 0x04

    /* Adjust for correct value. */
    ulCompareMatch -= ( unsigned long ) 1;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	ab 81       	ldd	r26, Y+3	; 0x03
     ed0:	bc 81       	ldd	r27, Y+4	; 0x04
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	a1 09       	sbc	r26, r1
     ed6:	b1 09       	sbc	r27, r1
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	ab 83       	std	Y+3, r26	; 0x03
     ede:	bc 83       	std	Y+4, r27	; 0x04

    /* Setup compare match value for compare match A.  Interrupts are disabled
    before this is called so we need not worry here. */
    OCR1A = ulCompareMatch;
     ee0:	88 e8       	ldi	r24, 0x88	; 136
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	29 81       	ldd	r18, Y+1	; 0x01
     ee6:	3a 81       	ldd	r19, Y+2	; 0x02
     ee8:	fc 01       	movw	r30, r24
     eea:	31 83       	std	Z+1, r19	; 0x01
     eec:	20 83       	st	Z, r18

    /* Setup clock source and compare match behaviour. */
    TCCR1A &= ~(_BV(WGM11) | _BV(WGM10));
     eee:	80 e8       	ldi	r24, 0x80	; 128
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	20 e8       	ldi	r18, 0x80	; 128
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	f9 01       	movw	r30, r18
     ef8:	20 81       	ld	r18, Z
     efa:	2c 7f       	andi	r18, 0xFC	; 252
     efc:	fc 01       	movw	r30, r24
     efe:	20 83       	st	Z, r18
    ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
     f00:	8b e0       	ldi	r24, 0x0B	; 11
     f02:	8d 83       	std	Y+5, r24	; 0x05
    TCCR1B = ucLowByte;
     f04:	81 e8       	ldi	r24, 0x81	; 129
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	2d 81       	ldd	r18, Y+5	; 0x05
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18

    /* Enable the interrupt - this is okay as interrupt are currently globally
    disabled. */
    ucLowByte = TIMSK1;
     f0e:	8f e6       	ldi	r24, 0x6F	; 111
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	fc 01       	movw	r30, r24
     f14:	80 81       	ld	r24, Z
     f16:	8d 83       	std	Y+5, r24	; 0x05
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	82 60       	ori	r24, 0x02	; 2
     f1c:	8d 83       	std	Y+5, r24	; 0x05
    TIMSK1 = ucLowByte;
     f1e:	8f e6       	ldi	r24, 0x6F	; 111
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	2d 81       	ldd	r18, Y+5	; 0x05
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
}
     f28:	00 00       	nop
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     f3a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vPortYieldFromTick>
		asm volatile ( "reti" );
     f3e:	18 95       	reti
	...

00000f42 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	00 d0       	rcall	.+0      	; 0xf48 <xQueueGenericReset+0x6>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <xQueueGenericReset+0x8>
     f4a:	1f 92       	push	r1
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
     f54:	6d 83       	std	Y+5, r22	; 0x05
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	0f 92       	push	r0
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	fc 01       	movw	r30, r24
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	29 81       	ldd	r18, Y+1	; 0x01
     f70:	3a 81       	ldd	r19, Y+2	; 0x02
     f72:	f9 01       	movw	r30, r18
     f74:	23 8d       	ldd	r18, Z+27	; 0x1b
     f76:	42 2f       	mov	r20, r18
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	29 81       	ldd	r18, Y+1	; 0x01
     f7c:	3a 81       	ldd	r19, Y+2	; 0x02
     f7e:	f9 01       	movw	r30, r18
     f80:	24 8d       	ldd	r18, Z+28	; 0x1c
     f82:	22 2f       	mov	r18, r18
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	42 9f       	mul	r20, r18
     f88:	b0 01       	movw	r22, r0
     f8a:	43 9f       	mul	r20, r19
     f8c:	70 0d       	add	r23, r0
     f8e:	52 9f       	mul	r21, r18
     f90:	70 0d       	add	r23, r0
     f92:	11 24       	eor	r1, r1
     f94:	9b 01       	movw	r18, r22
     f96:	28 0f       	add	r18, r24
     f98:	39 1f       	adc	r19, r25
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	fc 01       	movw	r30, r24
     fa0:	33 83       	std	Z+3, r19	; 0x03
     fa2:	22 83       	std	Z+2, r18	; 0x02
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	9a 81       	ldd	r25, Y+2	; 0x02
     fa8:	fc 01       	movw	r30, r24
     faa:	12 8e       	std	Z+26, r1	; 0x1a
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	fc 01       	movw	r30, r24
     fb2:	20 81       	ld	r18, Z
     fb4:	31 81       	ldd	r19, Z+1	; 0x01
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	fc 01       	movw	r30, r24
     fbc:	35 83       	std	Z+5, r19	; 0x05
     fbe:	24 83       	std	Z+4, r18	; 0x04
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	fc 01       	movw	r30, r24
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	29 81       	ldd	r18, Y+1	; 0x01
     fcc:	3a 81       	ldd	r19, Y+2	; 0x02
     fce:	f9 01       	movw	r30, r18
     fd0:	23 8d       	ldd	r18, Z+27	; 0x1b
     fd2:	22 2f       	mov	r18, r18
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	a9 01       	movw	r20, r18
     fd8:	41 50       	subi	r20, 0x01	; 1
     fda:	51 09       	sbc	r21, r1
     fdc:	29 81       	ldd	r18, Y+1	; 0x01
     fde:	3a 81       	ldd	r19, Y+2	; 0x02
     fe0:	f9 01       	movw	r30, r18
     fe2:	24 8d       	ldd	r18, Z+28	; 0x1c
     fe4:	22 2f       	mov	r18, r18
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	42 9f       	mul	r20, r18
     fea:	b0 01       	movw	r22, r0
     fec:	43 9f       	mul	r20, r19
     fee:	70 0d       	add	r23, r0
     ff0:	52 9f       	mul	r21, r18
     ff2:	70 0d       	add	r23, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	9b 01       	movw	r18, r22
     ff8:	28 0f       	add	r18, r24
     ffa:	39 1f       	adc	r19, r25
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	fc 01       	movw	r30, r24
    1002:	37 83       	std	Z+7, r19	; 0x07
    1004:	26 83       	std	Z+6, r18	; 0x06
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	2f ef       	ldi	r18, 0xFF	; 255
    100c:	fc 01       	movw	r30, r24
    100e:	25 8f       	std	Z+29, r18	; 0x1d
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	2f ef       	ldi	r18, 0xFF	; 255
    1016:	fc 01       	movw	r30, r24
    1018:	26 8f       	std	Z+30, r18	; 0x1e
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	88 23       	and	r24, r24
    101e:	81 f4       	brne	.+32     	; 0x1040 <xQueueGenericReset+0xfe>
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	fc 01       	movw	r30, r24
    1026:	80 85       	ldd	r24, Z+8	; 0x08
    1028:	88 23       	and	r24, r24
    102a:	a1 f0       	breq	.+40     	; 0x1054 <xQueueGenericReset+0x112>
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	08 96       	adiw	r24, 0x08	; 8
    1032:	0e 94 b9 11 	call	0x2372	; 0x2372 <xTaskRemoveFromEventList>
    1036:	88 23       	and	r24, r24
    1038:	69 f0       	breq	.+26     	; 0x1054 <xQueueGenericReset+0x112>
    103a:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <xQueueGenericReset+0x112>
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	9a 81       	ldd	r25, Y+2	; 0x02
    1044:	08 96       	adiw	r24, 0x08	; 8
    1046:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	41 96       	adiw	r24, 0x11	; 17
    1050:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <xQueueGenericCreate>:
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	29 97       	sbiw	r28, 0x09	; 9
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	8f 83       	std	Y+7, r24	; 0x07
    1084:	68 87       	std	Y+8, r22	; 0x08
    1086:	49 87       	std	Y+9, r20	; 0x09
    1088:	88 85       	ldd	r24, Y+8	; 0x08
    108a:	88 23       	and	r24, r24
    108c:	19 f4       	brne	.+6      	; 0x1094 <xQueueGenericCreate+0x2a>
    108e:	1a 82       	std	Y+2, r1	; 0x02
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	0f c0       	rjmp	.+30     	; 0x10b2 <xQueueGenericCreate+0x48>
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	48 2f       	mov	r20, r24
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	88 85       	ldd	r24, Y+8	; 0x08
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	42 9f       	mul	r20, r18
    10a2:	c0 01       	movw	r24, r0
    10a4:	43 9f       	mul	r20, r19
    10a6:	90 0d       	add	r25, r0
    10a8:	52 9f       	mul	r21, r18
    10aa:	90 0d       	add	r25, r0
    10ac:	11 24       	eor	r1, r1
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	81 96       	adiw	r24, 0x21	; 33
    10b8:	0e 94 19 03 	call	0x632	; 0x632 <pvPortMalloc>
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	89 2b       	or	r24, r25
    10c6:	81 f0       	breq	.+32     	; 0x10e8 <xQueueGenericCreate+0x7e>
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	81 96       	adiw	r24, 0x21	; 33
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	2b 81       	ldd	r18, Y+3	; 0x03
    10d4:	3c 81       	ldd	r19, Y+4	; 0x04
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	89 01       	movw	r16, r18
    10dc:	29 85       	ldd	r18, Y+9	; 0x09
    10de:	ac 01       	movw	r20, r24
    10e0:	68 85       	ldd	r22, Y+8	; 0x08
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	0e 94 81 08 	call	0x1102	; 0x1102 <prvInitialiseNewQueue>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	29 96       	adiw	r28, 0x09	; 9
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret

00001102 <prvInitialiseNewQueue>:
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	27 97       	sbiw	r28, 0x07	; 7
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	6a 83       	std	Y+2, r22	; 0x02
    111e:	5c 83       	std	Y+4, r21	; 0x04
    1120:	4b 83       	std	Y+3, r20	; 0x03
    1122:	2d 83       	std	Y+5, r18	; 0x05
    1124:	1f 83       	std	Y+7, r17	; 0x07
    1126:	0e 83       	std	Y+6, r16	; 0x06
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	88 23       	and	r24, r24
    112c:	41 f4       	brne	.+16     	; 0x113e <prvInitialiseNewQueue+0x3c>
    112e:	8e 81       	ldd	r24, Y+6	; 0x06
    1130:	9f 81       	ldd	r25, Y+7	; 0x07
    1132:	2e 81       	ldd	r18, Y+6	; 0x06
    1134:	3f 81       	ldd	r19, Y+7	; 0x07
    1136:	fc 01       	movw	r30, r24
    1138:	31 83       	std	Z+1, r19	; 0x01
    113a:	20 83       	st	Z, r18
    113c:	07 c0       	rjmp	.+14     	; 0x114c <prvInitialiseNewQueue+0x4a>
    113e:	8e 81       	ldd	r24, Y+6	; 0x06
    1140:	9f 81       	ldd	r25, Y+7	; 0x07
    1142:	2b 81       	ldd	r18, Y+3	; 0x03
    1144:	3c 81       	ldd	r19, Y+4	; 0x04
    1146:	fc 01       	movw	r30, r24
    1148:	31 83       	std	Z+1, r19	; 0x01
    114a:	20 83       	st	Z, r18
    114c:	8e 81       	ldd	r24, Y+6	; 0x06
    114e:	9f 81       	ldd	r25, Y+7	; 0x07
    1150:	29 81       	ldd	r18, Y+1	; 0x01
    1152:	fc 01       	movw	r30, r24
    1154:	23 8f       	std	Z+27, r18	; 0x1b
    1156:	8e 81       	ldd	r24, Y+6	; 0x06
    1158:	9f 81       	ldd	r25, Y+7	; 0x07
    115a:	2a 81       	ldd	r18, Y+2	; 0x02
    115c:	fc 01       	movw	r30, r24
    115e:	24 8f       	std	Z+28, r18	; 0x1c
    1160:	8e 81       	ldd	r24, Y+6	; 0x06
    1162:	9f 81       	ldd	r25, Y+7	; 0x07
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	0e 94 a1 07 	call	0xf42	; 0xf42 <xQueueGenericReset>
    116a:	8e 81       	ldd	r24, Y+6	; 0x06
    116c:	9f 81       	ldd	r25, Y+7	; 0x07
    116e:	2d 81       	ldd	r18, Y+5	; 0x05
    1170:	fc 01       	movw	r30, r24
    1172:	20 a3       	std	Z+32, r18	; 0x20
    1174:	00 00       	nop
    1176:	27 96       	adiw	r28, 0x07	; 7
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	08 95       	ret

0000118c <xQueueGenericSend>:
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	2e 97       	sbiw	r28, 0x0e	; 14
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	99 87       	std	Y+9, r25	; 0x09
    11a2:	88 87       	std	Y+8, r24	; 0x08
    11a4:	7b 87       	std	Y+11, r23	; 0x0b
    11a6:	6a 87       	std	Y+10, r22	; 0x0a
    11a8:	5d 87       	std	Y+13, r21	; 0x0d
    11aa:	4c 87       	std	Y+12, r20	; 0x0c
    11ac:	2e 87       	std	Y+14, r18	; 0x0e
    11ae:	19 82       	std	Y+1, r1	; 0x01
    11b0:	88 85       	ldd	r24, Y+8	; 0x08
    11b2:	99 85       	ldd	r25, Y+9	; 0x09
    11b4:	9b 83       	std	Y+3, r25	; 0x03
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	0f 92       	push	r0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	9b 81       	ldd	r25, Y+3	; 0x03
    11c2:	fc 01       	movw	r30, r24
    11c4:	22 8d       	ldd	r18, Z+26	; 0x1a
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ca:	fc 01       	movw	r30, r24
    11cc:	83 8d       	ldd	r24, Z+27	; 0x1b
    11ce:	28 17       	cp	r18, r24
    11d0:	18 f0       	brcs	.+6      	; 0x11d8 <xQueueGenericSend+0x4c>
    11d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	11 f5       	brne	.+68     	; 0x121c <xQueueGenericSend+0x90>
    11d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    11da:	3b 85       	ldd	r19, Y+11	; 0x0b
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	9b 81       	ldd	r25, Y+3	; 0x03
    11e0:	4e 85       	ldd	r20, Y+14	; 0x0e
    11e2:	b9 01       	movw	r22, r18
    11e4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <prvCopyDataToQueue>
    11e8:	8c 83       	std	Y+4, r24	; 0x04
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	9b 81       	ldd	r25, Y+3	; 0x03
    11ee:	fc 01       	movw	r30, r24
    11f0:	81 89       	ldd	r24, Z+17	; 0x11
    11f2:	88 23       	and	r24, r24
    11f4:	51 f0       	breq	.+20     	; 0x120a <xQueueGenericSend+0x7e>
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	41 96       	adiw	r24, 0x11	; 17
    11fc:	0e 94 b9 11 	call	0x2372	; 0x2372 <xTaskRemoveFromEventList>
    1200:	88 23       	and	r24, r24
    1202:	41 f0       	breq	.+16     	; 0x1214 <xQueueGenericSend+0x88>
    1204:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <xQueueGenericSend+0x88>
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	88 23       	and	r24, r24
    120e:	11 f0       	breq	.+4      	; 0x1214 <xQueueGenericSend+0x88>
    1210:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	60 c0       	rjmp	.+192    	; 0x12dc <xQueueGenericSend+0x150>
    121c:	8c 85       	ldd	r24, Y+12	; 0x0c
    121e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1220:	89 2b       	or	r24, r25
    1222:	21 f4       	brne	.+8      	; 0x122c <xQueueGenericSend+0xa0>
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	58 c0       	rjmp	.+176    	; 0x12dc <xQueueGenericSend+0x150>
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	88 23       	and	r24, r24
    1230:	31 f4       	brne	.+12     	; 0x123e <xQueueGenericSend+0xb2>
    1232:	ce 01       	movw	r24, r28
    1234:	05 96       	adiw	r24, 0x05	; 5
    1236:	0e 94 26 12 	call	0x244c	; 0x244c <vTaskSetTimeOutState>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskSuspendAll>
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	0f 92       	push	r0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	9b 81       	ldd	r25, Y+3	; 0x03
    1250:	fc 01       	movw	r30, r24
    1252:	85 8d       	ldd	r24, Z+29	; 0x1d
    1254:	8f 3f       	cpi	r24, 0xFF	; 255
    1256:	21 f4       	brne	.+8      	; 0x1260 <xQueueGenericSend+0xd4>
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	9b 81       	ldd	r25, Y+3	; 0x03
    125c:	fc 01       	movw	r30, r24
    125e:	15 8e       	std	Z+29, r1	; 0x1d
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	9b 81       	ldd	r25, Y+3	; 0x03
    1264:	fc 01       	movw	r30, r24
    1266:	86 8d       	ldd	r24, Z+30	; 0x1e
    1268:	8f 3f       	cpi	r24, 0xFF	; 255
    126a:	21 f4       	brne	.+8      	; 0x1274 <xQueueGenericSend+0xe8>
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	9b 81       	ldd	r25, Y+3	; 0x03
    1270:	fc 01       	movw	r30, r24
    1272:	16 8e       	std	Z+30, r1	; 0x1e
    1274:	0f 90       	pop	r0
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	9e 01       	movw	r18, r28
    127a:	24 5f       	subi	r18, 0xF4	; 244
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	ce 01       	movw	r24, r28
    1280:	05 96       	adiw	r24, 0x05	; 5
    1282:	b9 01       	movw	r22, r18
    1284:	0e 94 42 12 	call	0x2484	; 0x2484 <xTaskCheckForTimeOut>
    1288:	88 23       	and	r24, r24
    128a:	09 f5       	brne	.+66     	; 0x12ce <xQueueGenericSend+0x142>
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	9b 81       	ldd	r25, Y+3	; 0x03
    1290:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <prvIsQueueFull>
    1294:	88 23       	and	r24, r24
    1296:	a1 f0       	breq	.+40     	; 0x12c0 <xQueueGenericSend+0x134>
    1298:	2c 85       	ldd	r18, Y+12	; 0x0c
    129a:	3d 85       	ldd	r19, Y+13	; 0x0d
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	9b 81       	ldd	r25, Y+3	; 0x03
    12a0:	08 96       	adiw	r24, 0x08	; 8
    12a2:	b9 01       	movw	r22, r18
    12a4:	0e 94 96 11 	call	0x232c	; 0x232c <vTaskPlaceOnEventList>
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	9b 81       	ldd	r25, Y+3	; 0x03
    12ac:	0e 94 57 0b 	call	0x16ae	; 0x16ae <prvUnlockQueue>
    12b0:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskResumeAll>
    12b4:	88 23       	and	r24, r24
    12b6:	09 f0       	breq	.+2      	; 0x12ba <xQueueGenericSend+0x12e>
    12b8:	7f cf       	rjmp	.-258    	; 0x11b8 <xQueueGenericSend+0x2c>
    12ba:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    12be:	7c cf       	rjmp	.-264    	; 0x11b8 <xQueueGenericSend+0x2c>
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	9b 81       	ldd	r25, Y+3	; 0x03
    12c4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <prvUnlockQueue>
    12c8:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskResumeAll>
    12cc:	75 cf       	rjmp	.-278    	; 0x11b8 <xQueueGenericSend+0x2c>
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	9b 81       	ldd	r25, Y+3	; 0x03
    12d2:	0e 94 57 0b 	call	0x16ae	; 0x16ae <prvUnlockQueue>
    12d6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskResumeAll>
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	2e 96       	adiw	r28, 0x0e	; 14
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

000012ee <xQueueGenericReceive>:
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	60 97       	sbiw	r28, 0x10	; 16
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	9b 87       	std	Y+11, r25	; 0x0b
    1304:	8a 87       	std	Y+10, r24	; 0x0a
    1306:	7d 87       	std	Y+13, r23	; 0x0d
    1308:	6c 87       	std	Y+12, r22	; 0x0c
    130a:	5f 87       	std	Y+15, r21	; 0x0f
    130c:	4e 87       	std	Y+14, r20	; 0x0e
    130e:	28 8b       	std	Y+16, r18	; 0x10
    1310:	19 82       	std	Y+1, r1	; 0x01
    1312:	8a 85       	ldd	r24, Y+10	; 0x0a
    1314:	9b 85       	ldd	r25, Y+11	; 0x0b
    1316:	9b 83       	std	Y+3, r25	; 0x03
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	0f 92       	push	r0
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	9b 81       	ldd	r25, Y+3	; 0x03
    1324:	fc 01       	movw	r30, r24
    1326:	82 8d       	ldd	r24, Z+26	; 0x1a
    1328:	8c 83       	std	Y+4, r24	; 0x04
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	88 23       	and	r24, r24
    132e:	09 f4       	brne	.+2      	; 0x1332 <xQueueGenericReceive+0x44>
    1330:	42 c0       	rjmp	.+132    	; 0x13b6 <xQueueGenericReceive+0xc8>
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
    1336:	fc 01       	movw	r30, r24
    1338:	86 81       	ldd	r24, Z+6	; 0x06
    133a:	97 81       	ldd	r25, Z+7	; 0x07
    133c:	9e 83       	std	Y+6, r25	; 0x06
    133e:	8d 83       	std	Y+5, r24	; 0x05
    1340:	2c 85       	ldd	r18, Y+12	; 0x0c
    1342:	3d 85       	ldd	r19, Y+13	; 0x0d
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	9b 81       	ldd	r25, Y+3	; 0x03
    1348:	b9 01       	movw	r22, r18
    134a:	0e 94 06 0b 	call	0x160c	; 0x160c <prvCopyDataFromQueue>
    134e:	88 89       	ldd	r24, Y+16	; 0x10
    1350:	88 23       	and	r24, r24
    1352:	b9 f4       	brne	.+46     	; 0x1382 <xQueueGenericReceive+0x94>
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	2f ef       	ldi	r18, 0xFF	; 255
    1358:	28 0f       	add	r18, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	9b 81       	ldd	r25, Y+3	; 0x03
    135e:	fc 01       	movw	r30, r24
    1360:	22 8f       	std	Z+26, r18	; 0x1a
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	9b 81       	ldd	r25, Y+3	; 0x03
    1366:	fc 01       	movw	r30, r24
    1368:	80 85       	ldd	r24, Z+8	; 0x08
    136a:	88 23       	and	r24, r24
    136c:	01 f1       	breq	.+64     	; 0x13ae <xQueueGenericReceive+0xc0>
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	9b 81       	ldd	r25, Y+3	; 0x03
    1372:	08 96       	adiw	r24, 0x08	; 8
    1374:	0e 94 b9 11 	call	0x2372	; 0x2372 <xTaskRemoveFromEventList>
    1378:	88 23       	and	r24, r24
    137a:	c9 f0       	breq	.+50     	; 0x13ae <xQueueGenericReceive+0xc0>
    137c:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1380:	16 c0       	rjmp	.+44     	; 0x13ae <xQueueGenericReceive+0xc0>
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	2d 81       	ldd	r18, Y+5	; 0x05
    1388:	3e 81       	ldd	r19, Y+6	; 0x06
    138a:	fc 01       	movw	r30, r24
    138c:	37 83       	std	Z+7, r19	; 0x07
    138e:	26 83       	std	Z+6, r18	; 0x06
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	fc 01       	movw	r30, r24
    1396:	81 89       	ldd	r24, Z+17	; 0x11
    1398:	88 23       	and	r24, r24
    139a:	49 f0       	breq	.+18     	; 0x13ae <xQueueGenericReceive+0xc0>
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	41 96       	adiw	r24, 0x11	; 17
    13a2:	0e 94 b9 11 	call	0x2372	; 0x2372 <xTaskRemoveFromEventList>
    13a6:	88 23       	and	r24, r24
    13a8:	11 f0       	breq	.+4      	; 0x13ae <xQueueGenericReceive+0xc0>
    13aa:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	67 c0       	rjmp	.+206    	; 0x1484 <xQueueGenericReceive+0x196>
    13b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    13b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    13ba:	89 2b       	or	r24, r25
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <xQueueGenericReceive+0xd8>
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	5f c0       	rjmp	.+190    	; 0x1484 <xQueueGenericReceive+0x196>
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	88 23       	and	r24, r24
    13ca:	31 f4       	brne	.+12     	; 0x13d8 <xQueueGenericReceive+0xea>
    13cc:	ce 01       	movw	r24, r28
    13ce:	07 96       	adiw	r24, 0x07	; 7
    13d0:	0e 94 26 12 	call	0x244c	; 0x244c <vTaskSetTimeOutState>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	0f 90       	pop	r0
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskSuspendAll>
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	0f 92       	push	r0
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	fc 01       	movw	r30, r24
    13ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    13ee:	8f 3f       	cpi	r24, 0xFF	; 255
    13f0:	21 f4       	brne	.+8      	; 0x13fa <xQueueGenericReceive+0x10c>
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	9b 81       	ldd	r25, Y+3	; 0x03
    13f6:	fc 01       	movw	r30, r24
    13f8:	15 8e       	std	Z+29, r1	; 0x1d
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	9b 81       	ldd	r25, Y+3	; 0x03
    13fe:	fc 01       	movw	r30, r24
    1400:	86 8d       	ldd	r24, Z+30	; 0x1e
    1402:	8f 3f       	cpi	r24, 0xFF	; 255
    1404:	21 f4       	brne	.+8      	; 0x140e <xQueueGenericReceive+0x120>
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	9b 81       	ldd	r25, Y+3	; 0x03
    140a:	fc 01       	movw	r30, r24
    140c:	16 8e       	std	Z+30, r1	; 0x1e
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	9e 01       	movw	r18, r28
    1414:	22 5f       	subi	r18, 0xF2	; 242
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	ce 01       	movw	r24, r28
    141a:	07 96       	adiw	r24, 0x07	; 7
    141c:	b9 01       	movw	r22, r18
    141e:	0e 94 42 12 	call	0x2484	; 0x2484 <xTaskCheckForTimeOut>
    1422:	88 23       	and	r24, r24
    1424:	09 f5       	brne	.+66     	; 0x1468 <xQueueGenericReceive+0x17a>
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	9b 81       	ldd	r25, Y+3	; 0x03
    142a:	0e 94 b5 0b 	call	0x176a	; 0x176a <prvIsQueueEmpty>
    142e:	88 23       	and	r24, r24
    1430:	a1 f0       	breq	.+40     	; 0x145a <xQueueGenericReceive+0x16c>
    1432:	2e 85       	ldd	r18, Y+14	; 0x0e
    1434:	3f 85       	ldd	r19, Y+15	; 0x0f
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	9b 81       	ldd	r25, Y+3	; 0x03
    143a:	41 96       	adiw	r24, 0x11	; 17
    143c:	b9 01       	movw	r22, r18
    143e:	0e 94 96 11 	call	0x232c	; 0x232c <vTaskPlaceOnEventList>
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	0e 94 57 0b 	call	0x16ae	; 0x16ae <prvUnlockQueue>
    144a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskResumeAll>
    144e:	88 23       	and	r24, r24
    1450:	09 f0       	breq	.+2      	; 0x1454 <xQueueGenericReceive+0x166>
    1452:	63 cf       	rjmp	.-314    	; 0x131a <xQueueGenericReceive+0x2c>
    1454:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1458:	60 cf       	rjmp	.-320    	; 0x131a <xQueueGenericReceive+0x2c>
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	9b 81       	ldd	r25, Y+3	; 0x03
    145e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <prvUnlockQueue>
    1462:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskResumeAll>
    1466:	59 cf       	rjmp	.-334    	; 0x131a <xQueueGenericReceive+0x2c>
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	9b 81       	ldd	r25, Y+3	; 0x03
    146c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <prvUnlockQueue>
    1470:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskResumeAll>
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	9b 81       	ldd	r25, Y+3	; 0x03
    1478:	0e 94 b5 0b 	call	0x176a	; 0x176a <prvIsQueueEmpty>
    147c:	88 23       	and	r24, r24
    147e:	09 f4       	brne	.+2      	; 0x1482 <xQueueGenericReceive+0x194>
    1480:	4c cf       	rjmp	.-360    	; 0x131a <xQueueGenericReceive+0x2c>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	60 96       	adiw	r28, 0x10	; 16
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	08 95       	ret

00001496 <prvCopyDataToQueue>:
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	27 97       	sbiw	r28, 0x07	; 7
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	7e 83       	std	Y+6, r23	; 0x06
    14b0:	6d 83       	std	Y+5, r22	; 0x05
    14b2:	4f 83       	std	Y+7, r20	; 0x07
    14b4:	1a 82       	std	Y+2, r1	; 0x02
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	fc 01       	movw	r30, r24
    14bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	fc 01       	movw	r30, r24
    14c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    14c8:	88 23       	and	r24, r24
    14ca:	09 f4       	brne	.+2      	; 0x14ce <prvCopyDataToQueue+0x38>
    14cc:	8e c0       	rjmp	.+284    	; 0x15ea <prvCopyDataToQueue+0x154>
    14ce:	8f 81       	ldd	r24, Y+7	; 0x07
    14d0:	88 23       	and	r24, r24
    14d2:	d9 f5       	brne	.+118    	; 0x154a <prvCopyDataToQueue+0xb4>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	fc 01       	movw	r30, r24
    14da:	84 8d       	ldd	r24, Z+28	; 0x1c
    14dc:	48 2f       	mov	r20, r24
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	fc 01       	movw	r30, r24
    14e6:	84 81       	ldd	r24, Z+4	; 0x04
    14e8:	95 81       	ldd	r25, Z+5	; 0x05
    14ea:	2d 81       	ldd	r18, Y+5	; 0x05
    14ec:	3e 81       	ldd	r19, Y+6	; 0x06
    14ee:	b9 01       	movw	r22, r18
    14f0:	0e 94 66 1c 	call	0x38cc	; 0x38cc <memcpy>
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	fc 01       	movw	r30, r24
    14fa:	24 81       	ldd	r18, Z+4	; 0x04
    14fc:	35 81       	ldd	r19, Z+5	; 0x05
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	fc 01       	movw	r30, r24
    1504:	84 8d       	ldd	r24, Z+28	; 0x1c
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	28 0f       	add	r18, r24
    150c:	39 1f       	adc	r19, r25
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	fc 01       	movw	r30, r24
    1514:	35 83       	std	Z+5, r19	; 0x05
    1516:	24 83       	std	Z+4, r18	; 0x04
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	fc 01       	movw	r30, r24
    151e:	24 81       	ldd	r18, Z+4	; 0x04
    1520:	35 81       	ldd	r19, Z+5	; 0x05
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	fc 01       	movw	r30, r24
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	93 81       	ldd	r25, Z+3	; 0x03
    152c:	28 17       	cp	r18, r24
    152e:	39 07       	cpc	r19, r25
    1530:	08 f4       	brcc	.+2      	; 0x1534 <prvCopyDataToQueue+0x9e>
    1532:	5b c0       	rjmp	.+182    	; 0x15ea <prvCopyDataToQueue+0x154>
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	fc 01       	movw	r30, r24
    153a:	20 81       	ld	r18, Z
    153c:	31 81       	ldd	r19, Z+1	; 0x01
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	fc 01       	movw	r30, r24
    1544:	35 83       	std	Z+5, r19	; 0x05
    1546:	24 83       	std	Z+4, r18	; 0x04
    1548:	50 c0       	rjmp	.+160    	; 0x15ea <prvCopyDataToQueue+0x154>
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	fc 01       	movw	r30, r24
    1550:	84 8d       	ldd	r24, Z+28	; 0x1c
    1552:	48 2f       	mov	r20, r24
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	fc 01       	movw	r30, r24
    155c:	86 81       	ldd	r24, Z+6	; 0x06
    155e:	97 81       	ldd	r25, Z+7	; 0x07
    1560:	2d 81       	ldd	r18, Y+5	; 0x05
    1562:	3e 81       	ldd	r19, Y+6	; 0x06
    1564:	b9 01       	movw	r22, r18
    1566:	0e 94 66 1c 	call	0x38cc	; 0x38cc <memcpy>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	fc 01       	movw	r30, r24
    1570:	26 81       	ldd	r18, Z+6	; 0x06
    1572:	37 81       	ldd	r19, Z+7	; 0x07
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	fc 01       	movw	r30, r24
    157a:	84 8d       	ldd	r24, Z+28	; 0x1c
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	91 95       	neg	r25
    1582:	81 95       	neg	r24
    1584:	91 09       	sbc	r25, r1
    1586:	28 0f       	add	r18, r24
    1588:	39 1f       	adc	r19, r25
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	fc 01       	movw	r30, r24
    1590:	37 83       	std	Z+7, r19	; 0x07
    1592:	26 83       	std	Z+6, r18	; 0x06
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	fc 01       	movw	r30, r24
    159a:	26 81       	ldd	r18, Z+6	; 0x06
    159c:	37 81       	ldd	r19, Z+7	; 0x07
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	fc 01       	movw	r30, r24
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	28 17       	cp	r18, r24
    15aa:	39 07       	cpc	r19, r25
    15ac:	a8 f4       	brcc	.+42     	; 0x15d8 <prvCopyDataToQueue+0x142>
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	fc 01       	movw	r30, r24
    15b4:	22 81       	ldd	r18, Z+2	; 0x02
    15b6:	33 81       	ldd	r19, Z+3	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	fc 01       	movw	r30, r24
    15be:	84 8d       	ldd	r24, Z+28	; 0x1c
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	91 95       	neg	r25
    15c6:	81 95       	neg	r24
    15c8:	91 09       	sbc	r25, r1
    15ca:	28 0f       	add	r18, r24
    15cc:	39 1f       	adc	r19, r25
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	fc 01       	movw	r30, r24
    15d4:	37 83       	std	Z+7, r19	; 0x07
    15d6:	26 83       	std	Z+6, r18	; 0x06
    15d8:	8f 81       	ldd	r24, Y+7	; 0x07
    15da:	82 30       	cpi	r24, 0x02	; 2
    15dc:	31 f4       	brne	.+12     	; 0x15ea <prvCopyDataToQueue+0x154>
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	88 23       	and	r24, r24
    15e2:	19 f0       	breq	.+6      	; 0x15ea <prvCopyDataToQueue+0x154>
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	81 50       	subi	r24, 0x01	; 1
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	28 0f       	add	r18, r24
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	fc 01       	movw	r30, r24
    15f6:	22 8f       	std	Z+26, r18	; 0x1a
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	27 96       	adiw	r28, 0x07	; 7
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <prvCopyDataFromQueue>:
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	00 d0       	rcall	.+0      	; 0x1612 <prvCopyDataFromQueue+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <prvCopyDataFromQueue+0x8>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	7c 83       	std	Y+4, r23	; 0x04
    161e:	6b 83       	std	Y+3, r22	; 0x03
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	fc 01       	movw	r30, r24
    1626:	84 8d       	ldd	r24, Z+28	; 0x1c
    1628:	88 23       	and	r24, r24
    162a:	c9 f1       	breq	.+114    	; 0x169e <prvCopyDataFromQueue+0x92>
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	fc 01       	movw	r30, r24
    1632:	26 81       	ldd	r18, Z+6	; 0x06
    1634:	37 81       	ldd	r19, Z+7	; 0x07
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	fc 01       	movw	r30, r24
    163c:	84 8d       	ldd	r24, Z+28	; 0x1c
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	28 0f       	add	r18, r24
    1644:	39 1f       	adc	r19, r25
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	fc 01       	movw	r30, r24
    164c:	37 83       	std	Z+7, r19	; 0x07
    164e:	26 83       	std	Z+6, r18	; 0x06
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	fc 01       	movw	r30, r24
    1656:	26 81       	ldd	r18, Z+6	; 0x06
    1658:	37 81       	ldd	r19, Z+7	; 0x07
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	fc 01       	movw	r30, r24
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	28 17       	cp	r18, r24
    1666:	39 07       	cpc	r19, r25
    1668:	50 f0       	brcs	.+20     	; 0x167e <prvCopyDataFromQueue+0x72>
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	fc 01       	movw	r30, r24
    1670:	20 81       	ld	r18, Z
    1672:	31 81       	ldd	r19, Z+1	; 0x01
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	fc 01       	movw	r30, r24
    167a:	37 83       	std	Z+7, r19	; 0x07
    167c:	26 83       	std	Z+6, r18	; 0x06
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	fc 01       	movw	r30, r24
    1684:	84 8d       	ldd	r24, Z+28	; 0x1c
    1686:	48 2f       	mov	r20, r24
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	fc 01       	movw	r30, r24
    1690:	26 81       	ldd	r18, Z+6	; 0x06
    1692:	37 81       	ldd	r19, Z+7	; 0x07
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	b9 01       	movw	r22, r18
    169a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <memcpy>
    169e:	00 00       	nop
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <prvUnlockQueue>:
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <prvUnlockQueue+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <prvUnlockQueue+0x8>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	0f 92       	push	r0
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	fc 01       	movw	r30, r24
    16ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	12 c0       	rjmp	.+36     	; 0x16f4 <prvUnlockQueue+0x46>
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	fc 01       	movw	r30, r24
    16d6:	81 89       	ldd	r24, Z+17	; 0x11
    16d8:	88 23       	and	r24, r24
    16da:	81 f0       	breq	.+32     	; 0x16fc <prvUnlockQueue+0x4e>
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	41 96       	adiw	r24, 0x11	; 17
    16e2:	0e 94 b9 11 	call	0x2372	; 0x2372 <xTaskRemoveFromEventList>
    16e6:	88 23       	and	r24, r24
    16e8:	11 f0       	breq	.+4      	; 0x16ee <prvUnlockQueue+0x40>
    16ea:	0e 94 aa 12 	call	0x2554	; 0x2554 <vTaskMissedYield>
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	81 50       	subi	r24, 0x01	; 1
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	18 16       	cp	r1, r24
    16f8:	5c f3       	brlt	.-42     	; 0x16d0 <prvUnlockQueue+0x22>
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <prvUnlockQueue+0x50>
    16fc:	00 00       	nop
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	2f ef       	ldi	r18, 0xFF	; 255
    1704:	fc 01       	movw	r30, r24
    1706:	26 8f       	std	Z+30, r18	; 0x1e
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	0f 92       	push	r0
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	fc 01       	movw	r30, r24
    1718:	85 8d       	ldd	r24, Z+29	; 0x1d
    171a:	8a 83       	std	Y+2, r24	; 0x02
    171c:	12 c0       	rjmp	.+36     	; 0x1742 <prvUnlockQueue+0x94>
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	fc 01       	movw	r30, r24
    1724:	80 85       	ldd	r24, Z+8	; 0x08
    1726:	88 23       	and	r24, r24
    1728:	81 f0       	breq	.+32     	; 0x174a <prvUnlockQueue+0x9c>
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	08 96       	adiw	r24, 0x08	; 8
    1730:	0e 94 b9 11 	call	0x2372	; 0x2372 <xTaskRemoveFromEventList>
    1734:	88 23       	and	r24, r24
    1736:	11 f0       	breq	.+4      	; 0x173c <prvUnlockQueue+0x8e>
    1738:	0e 94 aa 12 	call	0x2554	; 0x2554 <vTaskMissedYield>
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	81 50       	subi	r24, 0x01	; 1
    1740:	8a 83       	std	Y+2, r24	; 0x02
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	18 16       	cp	r1, r24
    1746:	5c f3       	brlt	.-42     	; 0x171e <prvUnlockQueue+0x70>
    1748:	01 c0       	rjmp	.+2      	; 0x174c <prvUnlockQueue+0x9e>
    174a:	00 00       	nop
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	2f ef       	ldi	r18, 0xFF	; 255
    1752:	fc 01       	movw	r30, r24
    1754:	25 8f       	std	Z+29, r18	; 0x1d
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	00 00       	nop
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <prvIsQueueEmpty>:
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	00 d0       	rcall	.+0      	; 0x1770 <prvIsQueueEmpty+0x6>
    1770:	1f 92       	push	r1
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	9b 83       	std	Y+3, r25	; 0x03
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	0f 92       	push	r0
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	9b 81       	ldd	r25, Y+3	; 0x03
    1784:	fc 01       	movw	r30, r24
    1786:	82 8d       	ldd	r24, Z+26	; 0x1a
    1788:	88 23       	and	r24, r24
    178a:	19 f4       	brne	.+6      	; 0x1792 <prvIsQueueEmpty+0x28>
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <prvIsQueueEmpty+0x2a>
    1792:	19 82       	std	Y+1, r1	; 0x01
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	08 95       	ret

000017a6 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <prvIsQueueFull+0x6>
    17ac:	1f 92       	push	r1
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	9b 83       	std	Y+3, r25	; 0x03
    17b4:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	9b 81       	ldd	r25, Y+3	; 0x03
    17c0:	fc 01       	movw	r30, r24
    17c2:	22 8d       	ldd	r18, Z+26	; 0x1a
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	fc 01       	movw	r30, r24
    17ca:	83 8d       	ldd	r24, Z+27	; 0x1b
    17cc:	28 17       	cp	r18, r24
    17ce:	19 f4       	brne	.+6      	; 0x17d6 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    17d6:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    17ea:	8f 92       	push	r8
    17ec:	9f 92       	push	r9
    17ee:	af 92       	push	r10
    17f0:	bf 92       	push	r11
    17f2:	cf 92       	push	r12
    17f4:	df 92       	push	r13
    17f6:	ef 92       	push	r14
    17f8:	ff 92       	push	r15
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	60 97       	sbiw	r28, 0x10	; 16
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	9f 83       	std	Y+7, r25	; 0x07
    1814:	8e 83       	std	Y+6, r24	; 0x06
    1816:	79 87       	std	Y+9, r23	; 0x09
    1818:	68 87       	std	Y+8, r22	; 0x08
    181a:	5b 87       	std	Y+11, r21	; 0x0b
    181c:	4a 87       	std	Y+10, r20	; 0x0a
    181e:	3d 87       	std	Y+13, r19	; 0x0d
    1820:	2c 87       	std	Y+12, r18	; 0x0c
    1822:	0e 87       	std	Y+14, r16	; 0x0e
    1824:	f8 8a       	std	Y+16, r15	; 0x10
    1826:	ef 86       	std	Y+15, r14	; 0x0f
    1828:	8a 85       	ldd	r24, Y+10	; 0x0a
    182a:	9b 85       	ldd	r25, Y+11	; 0x0b
    182c:	0e 94 19 03 	call	0x632	; 0x632 <pvPortMalloc>
    1830:	9d 83       	std	Y+5, r25	; 0x05
    1832:	8c 83       	std	Y+4, r24	; 0x04
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	9d 81       	ldd	r25, Y+5	; 0x05
    1838:	89 2b       	or	r24, r25
    183a:	b9 f0       	breq	.+46     	; 0x186a <xTaskCreate+0x80>
    183c:	86 e2       	ldi	r24, 0x26	; 38
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 19 03 	call	0x632	; 0x632 <pvPortMalloc>
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	89 2b       	or	r24, r25
    184e:	41 f0       	breq	.+16     	; 0x1860 <xTaskCreate+0x76>
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	9a 81       	ldd	r25, Y+2	; 0x02
    1854:	2c 81       	ldd	r18, Y+4	; 0x04
    1856:	3d 81       	ldd	r19, Y+5	; 0x05
    1858:	fc 01       	movw	r30, r24
    185a:	30 8f       	std	Z+24, r19	; 0x18
    185c:	27 8b       	std	Z+23, r18	; 0x17
    185e:	07 c0       	rjmp	.+14     	; 0x186e <xTaskCreate+0x84>
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	0e 94 08 04 	call	0x810	; 0x810 <vPortFree>
    1868:	02 c0       	rjmp	.+4      	; 0x186e <xTaskCreate+0x84>
    186a:	1a 82       	std	Y+2, r1	; 0x02
    186c:	19 82       	std	Y+1, r1	; 0x01
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	89 2b       	or	r24, r25
    1874:	09 f1       	breq	.+66     	; 0x18b8 <xTaskCreate+0xce>
    1876:	8a 85       	ldd	r24, Y+10	; 0x0a
    1878:	9b 85       	ldd	r25, Y+11	; 0x0b
    187a:	cc 01       	movw	r24, r24
    187c:	a0 e0       	ldi	r26, 0x00	; 0
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	09 81       	ldd	r16, Y+1	; 0x01
    1882:	1a 81       	ldd	r17, Y+2	; 0x02
    1884:	4f 85       	ldd	r20, Y+15	; 0x0f
    1886:	58 89       	ldd	r21, Y+16	; 0x10
    1888:	2c 85       	ldd	r18, Y+12	; 0x0c
    188a:	3d 85       	ldd	r19, Y+13	; 0x0d
    188c:	68 85       	ldd	r22, Y+8	; 0x08
    188e:	79 85       	ldd	r23, Y+9	; 0x09
    1890:	ee 81       	ldd	r30, Y+6	; 0x06
    1892:	ff 81       	ldd	r31, Y+7	; 0x07
    1894:	81 2c       	mov	r8, r1
    1896:	91 2c       	mov	r9, r1
    1898:	58 01       	movw	r10, r16
    189a:	6a 01       	movw	r12, r20
    189c:	ee 84       	ldd	r14, Y+14	; 0x0e
    189e:	89 01       	movw	r16, r18
    18a0:	9c 01       	movw	r18, r24
    18a2:	ad 01       	movw	r20, r26
    18a4:	cf 01       	movw	r24, r30
    18a6:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <prvInitialiseNewTask>
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <prvAddNewTaskToReadyList>
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	8b 83       	std	Y+3, r24	; 0x03
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <xTaskCreate+0xd2>
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	8b 83       	std	Y+3, r24	; 0x03
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	60 96       	adiw	r28, 0x10	; 16
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	bf 90       	pop	r11
    18dc:	af 90       	pop	r10
    18de:	9f 90       	pop	r9
    18e0:	8f 90       	pop	r8
    18e2:	08 95       	ret

000018e4 <prvInitialiseNewTask>:
    18e4:	8f 92       	push	r8
    18e6:	9f 92       	push	r9
    18e8:	af 92       	push	r10
    18ea:	bf 92       	push	r11
    18ec:	cf 92       	push	r12
    18ee:	df 92       	push	r13
    18f0:	ef 92       	push	r14
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	64 97       	sbiw	r28, 0x14	; 20
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	9d 83       	std	Y+5, r25	; 0x05
    190c:	8c 83       	std	Y+4, r24	; 0x04
    190e:	7f 83       	std	Y+7, r23	; 0x07
    1910:	6e 83       	std	Y+6, r22	; 0x06
    1912:	28 87       	std	Y+8, r18	; 0x08
    1914:	39 87       	std	Y+9, r19	; 0x09
    1916:	4a 87       	std	Y+10, r20	; 0x0a
    1918:	5b 87       	std	Y+11, r21	; 0x0b
    191a:	1d 87       	std	Y+13, r17	; 0x0d
    191c:	0c 87       	std	Y+12, r16	; 0x0c
    191e:	ee 86       	std	Y+14, r14	; 0x0e
    1920:	d8 8a       	std	Y+16, r13	; 0x10
    1922:	cf 86       	std	Y+15, r12	; 0x0f
    1924:	ba 8a       	std	Y+18, r11	; 0x12
    1926:	a9 8a       	std	Y+17, r10	; 0x11
    1928:	9c 8a       	std	Y+20, r9	; 0x14
    192a:	8b 8a       	std	Y+19, r8	; 0x13
    192c:	28 85       	ldd	r18, Y+8	; 0x08
    192e:	39 85       	ldd	r19, Y+9	; 0x09
    1930:	89 89       	ldd	r24, Y+17	; 0x11
    1932:	9a 89       	ldd	r25, Y+18	; 0x12
    1934:	fc 01       	movw	r30, r24
    1936:	87 89       	ldd	r24, Z+23	; 0x17
    1938:	90 8d       	ldd	r25, Z+24	; 0x18
    193a:	a9 01       	movw	r20, r18
    193c:	65 ea       	ldi	r22, 0xA5	; 165
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	0e 94 6f 1c 	call	0x38de	; 0x38de <memset>
    1944:	89 89       	ldd	r24, Y+17	; 0x11
    1946:	9a 89       	ldd	r25, Y+18	; 0x12
    1948:	fc 01       	movw	r30, r24
    194a:	27 89       	ldd	r18, Z+23	; 0x17
    194c:	30 8d       	ldd	r19, Z+24	; 0x18
    194e:	88 85       	ldd	r24, Y+8	; 0x08
    1950:	99 85       	ldd	r25, Y+9	; 0x09
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	82 0f       	add	r24, r18
    1956:	93 1f       	adc	r25, r19
    1958:	9b 83       	std	Y+3, r25	; 0x03
    195a:	8a 83       	std	Y+2, r24	; 0x02
    195c:	19 82       	std	Y+1, r1	; 0x01
    195e:	21 c0       	rjmp	.+66     	; 0x19a2 <prvInitialiseNewTask+0xbe>
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	29 81       	ldd	r18, Y+1	; 0x01
    1968:	22 2f       	mov	r18, r18
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4e 81       	ldd	r20, Y+6	; 0x06
    196e:	5f 81       	ldd	r21, Y+7	; 0x07
    1970:	24 0f       	add	r18, r20
    1972:	35 1f       	adc	r19, r21
    1974:	f9 01       	movw	r30, r18
    1976:	40 81       	ld	r20, Z
    1978:	29 89       	ldd	r18, Y+17	; 0x11
    197a:	3a 89       	ldd	r19, Y+18	; 0x12
    197c:	82 0f       	add	r24, r18
    197e:	93 1f       	adc	r25, r19
    1980:	49 96       	adiw	r24, 0x19	; 25
    1982:	fc 01       	movw	r30, r24
    1984:	40 83       	st	Z, r20
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	2e 81       	ldd	r18, Y+6	; 0x06
    198e:	3f 81       	ldd	r19, Y+7	; 0x07
    1990:	82 0f       	add	r24, r18
    1992:	93 1f       	adc	r25, r19
    1994:	fc 01       	movw	r30, r24
    1996:	80 81       	ld	r24, Z
    1998:	88 23       	and	r24, r24
    199a:	39 f0       	breq	.+14     	; 0x19aa <prvInitialiseNewTask+0xc6>
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	8f 5f       	subi	r24, 0xFF	; 255
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	84 30       	cpi	r24, 0x04	; 4
    19a6:	e0 f2       	brcs	.-72     	; 0x1960 <prvInitialiseNewTask+0x7c>
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <prvInitialiseNewTask+0xc8>
    19aa:	00 00       	nop
    19ac:	89 89       	ldd	r24, Y+17	; 0x11
    19ae:	9a 89       	ldd	r25, Y+18	; 0x12
    19b0:	fc 01       	movw	r30, r24
    19b2:	14 8e       	std	Z+28, r1	; 0x1c
    19b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	10 f0       	brcs	.+4      	; 0x19be <prvInitialiseNewTask+0xda>
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	8e 87       	std	Y+14, r24	; 0x0e
    19be:	89 89       	ldd	r24, Y+17	; 0x11
    19c0:	9a 89       	ldd	r25, Y+18	; 0x12
    19c2:	2e 85       	ldd	r18, Y+14	; 0x0e
    19c4:	fc 01       	movw	r30, r24
    19c6:	26 8b       	std	Z+22, r18	; 0x16
    19c8:	89 89       	ldd	r24, Y+17	; 0x11
    19ca:	9a 89       	ldd	r25, Y+18	; 0x12
    19cc:	02 96       	adiw	r24, 0x02	; 2
    19ce:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vListInitialiseItem>
    19d2:	89 89       	ldd	r24, Y+17	; 0x11
    19d4:	9a 89       	ldd	r25, Y+18	; 0x12
    19d6:	0c 96       	adiw	r24, 0x0c	; 12
    19d8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vListInitialiseItem>
    19dc:	89 89       	ldd	r24, Y+17	; 0x11
    19de:	9a 89       	ldd	r25, Y+18	; 0x12
    19e0:	29 89       	ldd	r18, Y+17	; 0x11
    19e2:	3a 89       	ldd	r19, Y+18	; 0x12
    19e4:	fc 01       	movw	r30, r24
    19e6:	31 87       	std	Z+9, r19	; 0x09
    19e8:	20 87       	std	Z+8, r18	; 0x08
    19ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	24 e0       	ldi	r18, 0x04	; 4
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	28 1b       	sub	r18, r24
    19f6:	39 0b       	sbc	r19, r25
    19f8:	89 89       	ldd	r24, Y+17	; 0x11
    19fa:	9a 89       	ldd	r25, Y+18	; 0x12
    19fc:	fc 01       	movw	r30, r24
    19fe:	35 87       	std	Z+13, r19	; 0x0d
    1a00:	24 87       	std	Z+12, r18	; 0x0c
    1a02:	89 89       	ldd	r24, Y+17	; 0x11
    1a04:	9a 89       	ldd	r25, Y+18	; 0x12
    1a06:	29 89       	ldd	r18, Y+17	; 0x11
    1a08:	3a 89       	ldd	r19, Y+18	; 0x12
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	33 8b       	std	Z+19, r19	; 0x13
    1a0e:	22 8b       	std	Z+18, r18	; 0x12
    1a10:	89 89       	ldd	r24, Y+17	; 0x11
    1a12:	9a 89       	ldd	r25, Y+18	; 0x12
    1a14:	fc 01       	movw	r30, r24
    1a16:	10 a2       	std	Z+32, r1	; 0x20
    1a18:	17 8e       	std	Z+31, r1	; 0x1f
    1a1a:	89 89       	ldd	r24, Y+17	; 0x11
    1a1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a1e:	fc 01       	movw	r30, r24
    1a20:	11 a2       	std	Z+33, r1	; 0x21
    1a22:	12 a2       	std	Z+34, r1	; 0x22
    1a24:	13 a2       	std	Z+35, r1	; 0x23
    1a26:	14 a2       	std	Z+36, r1	; 0x24
    1a28:	89 89       	ldd	r24, Y+17	; 0x11
    1a2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	15 a2       	std	Z+37, r1	; 0x25
    1a30:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a32:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a34:	2c 81       	ldd	r18, Y+4	; 0x04
    1a36:	3d 81       	ldd	r19, Y+5	; 0x05
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3c:	b9 01       	movw	r22, r18
    1a3e:	0e 94 b2 04 	call	0x964	; 0x964 <pxPortInitialiseStack>
    1a42:	9c 01       	movw	r18, r24
    1a44:	89 89       	ldd	r24, Y+17	; 0x11
    1a46:	9a 89       	ldd	r25, Y+18	; 0x12
    1a48:	fc 01       	movw	r30, r24
    1a4a:	31 83       	std	Z+1, r19	; 0x01
    1a4c:	20 83       	st	Z, r18
    1a4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a50:	98 89       	ldd	r25, Y+16	; 0x10
    1a52:	89 2b       	or	r24, r25
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <prvInitialiseNewTask+0x180>
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	29 89       	ldd	r18, Y+17	; 0x11
    1a5c:	3a 89       	ldd	r19, Y+18	; 0x12
    1a5e:	fc 01       	movw	r30, r24
    1a60:	31 83       	std	Z+1, r19	; 0x01
    1a62:	20 83       	st	Z, r18
    1a64:	00 00       	nop
    1a66:	64 96       	adiw	r28, 0x14	; 20
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ef 90       	pop	r14
    1a7c:	df 90       	pop	r13
    1a7e:	cf 90       	pop	r12
    1a80:	bf 90       	pop	r11
    1a82:	af 90       	pop	r10
    1a84:	9f 90       	pop	r9
    1a86:	8f 90       	pop	r8
    1a88:	08 95       	ret

00001a8a <prvAddNewTaskToReadyList>:
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <prvAddNewTaskToReadyList+0x6>
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	0f 92       	push	r0
    1a9e:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    1aa2:	8f 5f       	subi	r24, 0xFF	; 255
    1aa4:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <uxCurrentNumberOfTasks>
    1aa8:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1aac:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1ab0:	89 2b       	or	r24, r25
    1ab2:	69 f4       	brne	.+26     	; 0x1ace <prvAddNewTaskToReadyList+0x44>
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pxCurrentTCB+0x1>
    1abc:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pxCurrentTCB>
    1ac0:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	c9 f4       	brne	.+50     	; 0x1afa <prvAddNewTaskToReadyList+0x70>
    1ac8:	0e 94 c5 12 	call	0x258a	; 0x258a <prvInitialiseTaskLists>
    1acc:	16 c0       	rjmp	.+44     	; 0x1afa <prvAddNewTaskToReadyList+0x70>
    1ace:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <xSchedulerRunning>
    1ad2:	88 23       	and	r24, r24
    1ad4:	91 f4       	brne	.+36     	; 0x1afa <prvAddNewTaskToReadyList+0x70>
    1ad6:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1ada:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1ade:	fc 01       	movw	r30, r24
    1ae0:	26 89       	ldd	r18, Z+22	; 0x16
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	86 89       	ldd	r24, Z+22	; 0x16
    1aea:	82 17       	cp	r24, r18
    1aec:	30 f0       	brcs	.+12     	; 0x1afa <prvAddNewTaskToReadyList+0x70>
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pxCurrentTCB+0x1>
    1af6:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pxCurrentTCB>
    1afa:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <uxTaskNumber>
    1afe:	8f 5f       	subi	r24, 0xFF	; 255
    1b00:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTaskNumber>
    1b04:	20 91 92 07 	lds	r18, 0x0792	; 0x800792 <uxTaskNumber>
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	25 8f       	std	Z+29, r18	; 0x1d
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	fc 01       	movw	r30, r24
    1b16:	96 89       	ldd	r25, Z+22	; 0x16
    1b18:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    1b1c:	89 17       	cp	r24, r25
    1b1e:	30 f4       	brcc	.+12     	; 0x1b2c <prvAddNewTaskToReadyList+0xa2>
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	fc 01       	movw	r30, r24
    1b26:	86 89       	ldd	r24, Z+22	; 0x16
    1b28:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b30:	ac 01       	movw	r20, r24
    1b32:	4e 5f       	subi	r20, 0xFE	; 254
    1b34:	5f 4f       	sbci	r21, 0xFF	; 255
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	86 89       	ldd	r24, Z+22	; 0x16
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	c9 01       	movw	r24, r18
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	82 0f       	add	r24, r18
    1b52:	93 1f       	adc	r25, r19
    1b54:	89 5b       	subi	r24, 0xB9	; 185
    1b56:	98 4f       	sbci	r25, 0xF8	; 248
    1b58:	ba 01       	movw	r22, r20
    1b5a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    1b5e:	0f 90       	pop	r0
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <xSchedulerRunning>
    1b66:	88 23       	and	r24, r24
    1b68:	71 f0       	breq	.+28     	; 0x1b86 <prvAddNewTaskToReadyList+0xfc>
    1b6a:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1b6e:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1b72:	fc 01       	movw	r30, r24
    1b74:	26 89       	ldd	r18, Z+22	; 0x16
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	86 89       	ldd	r24, Z+22	; 0x16
    1b7e:	28 17       	cp	r18, r24
    1b80:	10 f4       	brcc	.+4      	; 0x1b86 <prvAddNewTaskToReadyList+0xfc>
    1b82:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1b86:	00 00       	nop
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	08 95       	ret

00001b92 <vTaskDelayUntil>:
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	2a 97       	sbiw	r28, 0x0a	; 10
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	98 87       	std	Y+8, r25	; 0x08
    1ba8:	8f 83       	std	Y+7, r24	; 0x07
    1baa:	7a 87       	std	Y+10, r23	; 0x0a
    1bac:	69 87       	std	Y+9, r22	; 0x09
    1bae:	19 82       	std	Y+1, r1	; 0x01
    1bb0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskSuspendAll>
    1bb4:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTickCount>
    1bb8:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTickCount+0x1>
    1bbc:	9b 83       	std	Y+3, r25	; 0x03
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
    1bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc2:	98 85       	ldd	r25, Y+8	; 0x08
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	20 81       	ld	r18, Z
    1bc8:	31 81       	ldd	r19, Z+1	; 0x01
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	82 0f       	add	r24, r18
    1bd0:	93 1f       	adc	r25, r19
    1bd2:	9d 83       	std	Y+5, r25	; 0x05
    1bd4:	8c 83       	std	Y+4, r24	; 0x04
    1bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd8:	98 85       	ldd	r25, Y+8	; 0x08
    1bda:	fc 01       	movw	r30, r24
    1bdc:	20 81       	ld	r18, Z
    1bde:	31 81       	ldd	r19, Z+1	; 0x01
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	9b 81       	ldd	r25, Y+3	; 0x03
    1be4:	82 17       	cp	r24, r18
    1be6:	93 07       	cpc	r25, r19
    1be8:	a0 f4       	brcc	.+40     	; 0x1c12 <vTaskDelayUntil+0x80>
    1bea:	8f 81       	ldd	r24, Y+7	; 0x07
    1bec:	98 85       	ldd	r25, Y+8	; 0x08
    1bee:	fc 01       	movw	r30, r24
    1bf0:	20 81       	ld	r18, Z
    1bf2:	31 81       	ldd	r19, Z+1	; 0x01
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf8:	82 17       	cp	r24, r18
    1bfa:	93 07       	cpc	r25, r19
    1bfc:	e8 f4       	brcc	.+58     	; 0x1c38 <vTaskDelayUntil+0xa6>
    1bfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1c00:	3d 81       	ldd	r19, Y+5	; 0x05
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	9b 81       	ldd	r25, Y+3	; 0x03
    1c06:	82 17       	cp	r24, r18
    1c08:	93 07       	cpc	r25, r19
    1c0a:	b0 f4       	brcc	.+44     	; 0x1c38 <vTaskDelayUntil+0xa6>
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	13 c0       	rjmp	.+38     	; 0x1c38 <vTaskDelayUntil+0xa6>
    1c12:	8f 81       	ldd	r24, Y+7	; 0x07
    1c14:	98 85       	ldd	r25, Y+8	; 0x08
    1c16:	fc 01       	movw	r30, r24
    1c18:	20 81       	ld	r18, Z
    1c1a:	31 81       	ldd	r19, Z+1	; 0x01
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	82 17       	cp	r24, r18
    1c22:	93 07       	cpc	r25, r19
    1c24:	38 f0       	brcs	.+14     	; 0x1c34 <vTaskDelayUntil+0xa2>
    1c26:	2c 81       	ldd	r18, Y+4	; 0x04
    1c28:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2e:	82 17       	cp	r24, r18
    1c30:	93 07       	cpc	r25, r19
    1c32:	10 f4       	brcc	.+4      	; 0x1c38 <vTaskDelayUntil+0xa6>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3a:	98 85       	ldd	r25, Y+8	; 0x08
    1c3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c40:	fc 01       	movw	r30, r24
    1c42:	31 83       	std	Z+1, r19	; 0x01
    1c44:	20 83       	st	Z, r18
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	88 23       	and	r24, r24
    1c4a:	59 f0       	breq	.+22     	; 0x1c62 <vTaskDelayUntil+0xd0>
    1c4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	a9 01       	movw	r20, r18
    1c56:	48 1b       	sub	r20, r24
    1c58:	59 0b       	sbc	r21, r25
    1c5a:	ca 01       	movw	r24, r20
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	0e 94 36 13 	call	0x266c	; 0x266c <prvAddCurrentTaskToDelayedList>
    1c62:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskResumeAll>
    1c66:	8e 83       	std	Y+6, r24	; 0x06
    1c68:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6a:	88 23       	and	r24, r24
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <vTaskDelayUntil+0xe0>
    1c6e:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1c72:	00 00       	nop
    1c74:	2a 96       	adiw	r28, 0x0a	; 10
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <vTaskPrioritySet>:
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	28 97       	sbiw	r28, 0x08	; 8
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	9f 83       	std	Y+7, r25	; 0x07
    1c9c:	8e 83       	std	Y+6, r24	; 0x06
    1c9e:	68 87       	std	Y+8, r22	; 0x08
    1ca0:	19 82       	std	Y+1, r1	; 0x01
    1ca2:	88 85       	ldd	r24, Y+8	; 0x08
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	10 f0       	brcs	.+4      	; 0x1cac <vTaskPrioritySet+0x26>
    1ca8:	83 e0       	ldi	r24, 0x03	; 3
    1caa:	88 87       	std	Y+8, r24	; 0x08
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	0f 92       	push	r0
    1cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb6:	89 2b       	or	r24, r25
    1cb8:	29 f4       	brne	.+10     	; 0x1cc4 <vTaskPrioritySet+0x3e>
    1cba:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1cbe:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <vTaskPrioritySet+0x42>
    1cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc8:	9b 83       	std	Y+3, r25	; 0x03
    1cca:	8a 83       	std	Y+2, r24	; 0x02
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	86 89       	ldd	r24, Z+22	; 0x16
    1cd4:	8c 83       	std	Y+4, r24	; 0x04
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	88 85       	ldd	r24, Y+8	; 0x08
    1cda:	98 17       	cp	r25, r24
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <vTaskPrioritySet+0x5a>
    1cde:	88 c0       	rjmp	.+272    	; 0x1df0 <vTaskPrioritySet+0x16a>
    1ce0:	98 85       	ldd	r25, Y+8	; 0x08
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	89 17       	cp	r24, r25
    1ce6:	a8 f4       	brcc	.+42     	; 0x1d12 <vTaskPrioritySet+0x8c>
    1ce8:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1cec:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1cf0:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf2:	3b 81       	ldd	r19, Y+3	; 0x03
    1cf4:	28 17       	cp	r18, r24
    1cf6:	39 07       	cpc	r19, r25
    1cf8:	b9 f0       	breq	.+46     	; 0x1d28 <vTaskPrioritySet+0xa2>
    1cfa:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1cfe:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1d02:	fc 01       	movw	r30, r24
    1d04:	96 89       	ldd	r25, Z+22	; 0x16
    1d06:	88 85       	ldd	r24, Y+8	; 0x08
    1d08:	89 17       	cp	r24, r25
    1d0a:	70 f0       	brcs	.+28     	; 0x1d28 <vTaskPrioritySet+0xa2>
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	0b c0       	rjmp	.+22     	; 0x1d28 <vTaskPrioritySet+0xa2>
    1d12:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1d16:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1d1a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d1c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d1e:	28 17       	cp	r18, r24
    1d20:	39 07       	cpc	r19, r25
    1d22:	11 f4       	brne	.+4      	; 0x1d28 <vTaskPrioritySet+0xa2>
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	86 89       	ldd	r24, Z+22	; 0x16
    1d30:	8d 83       	std	Y+5, r24	; 0x05
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	9b 81       	ldd	r25, Y+3	; 0x03
    1d36:	28 85       	ldd	r18, Y+8	; 0x08
    1d38:	fc 01       	movw	r30, r24
    1d3a:	26 8b       	std	Z+22, r18	; 0x16
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d40:	fc 01       	movw	r30, r24
    1d42:	84 85       	ldd	r24, Z+12	; 0x0c
    1d44:	95 85       	ldd	r25, Z+13	; 0x0d
    1d46:	99 23       	and	r25, r25
    1d48:	64 f0       	brlt	.+24     	; 0x1d62 <vTaskPrioritySet+0xdc>
    1d4a:	88 85       	ldd	r24, Y+8	; 0x08
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	24 e0       	ldi	r18, 0x04	; 4
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	28 1b       	sub	r18, r24
    1d56:	39 0b       	sbc	r19, r25
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	35 87       	std	Z+13, r19	; 0x0d
    1d60:	24 87       	std	Z+12, r18	; 0x0c
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	9b 81       	ldd	r25, Y+3	; 0x03
    1d66:	fc 01       	movw	r30, r24
    1d68:	42 85       	ldd	r20, Z+10	; 0x0a
    1d6a:	53 85       	ldd	r21, Z+11	; 0x0b
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	c9 01       	movw	r24, r18
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	82 0f       	add	r24, r18
    1d82:	93 1f       	adc	r25, r19
    1d84:	89 5b       	subi	r24, 0xB9	; 185
    1d86:	98 4f       	sbci	r25, 0xF8	; 248
    1d88:	48 17       	cp	r20, r24
    1d8a:	59 07       	cpc	r21, r25
    1d8c:	61 f5       	brne	.+88     	; 0x1de6 <vTaskPrioritySet+0x160>
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	9b 81       	ldd	r25, Y+3	; 0x03
    1d92:	02 96       	adiw	r24, 0x02	; 2
    1d94:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	96 89       	ldd	r25, Z+22	; 0x16
    1da0:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    1da4:	89 17       	cp	r24, r25
    1da6:	30 f4       	brcc	.+12     	; 0x1db4 <vTaskPrioritySet+0x12e>
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dac:	fc 01       	movw	r30, r24
    1dae:	86 89       	ldd	r24, Z+22	; 0x16
    1db0:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	9b 81       	ldd	r25, Y+3	; 0x03
    1db8:	ac 01       	movw	r20, r24
    1dba:	4e 5f       	subi	r20, 0xFE	; 254
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	86 89       	ldd	r24, Z+22	; 0x16
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	c9 01       	movw	r24, r18
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	82 0f       	add	r24, r18
    1dda:	93 1f       	adc	r25, r19
    1ddc:	89 5b       	subi	r24, 0xB9	; 185
    1dde:	98 4f       	sbci	r25, 0xF8	; 248
    1de0:	ba 01       	movw	r22, r20
    1de2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	88 23       	and	r24, r24
    1dea:	11 f0       	breq	.+4      	; 0x1df0 <vTaskPrioritySet+0x16a>
    1dec:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1df0:	0f 90       	pop	r0
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	00 00       	nop
    1df6:	28 96       	adiw	r28, 0x08	; 8
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	08 95       	ret

00001e08 <vTaskStartScheduler>:
    1e08:	ef 92       	push	r14
    1e0a:	ff 92       	push	r15
    1e0c:	0f 93       	push	r16
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	1f 92       	push	r1
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	0f 2e       	mov	r0, r31
    1e1a:	f5 e9       	ldi	r31, 0x95	; 149
    1e1c:	ef 2e       	mov	r14, r31
    1e1e:	f7 e0       	ldi	r31, 0x07	; 7
    1e20:	ff 2e       	mov	r15, r31
    1e22:	f0 2d       	mov	r31, r0
    1e24:	00 e0       	ldi	r16, 0x00	; 0
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	44 ec       	ldi	r20, 0xC4	; 196
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	61 e1       	ldi	r22, 0x11	; 17
    1e30:	71 e0       	ldi	r23, 0x01	; 1
    1e32:	85 eb       	ldi	r24, 0xB5	; 181
    1e34:	92 e1       	ldi	r25, 0x12	; 18
    1e36:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xTaskCreate>
    1e3a:	89 83       	std	Y+1, r24	; 0x01
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	81 f4       	brne	.+32     	; 0x1e62 <vTaskStartScheduler+0x5a>
    1e42:	f8 94       	cli
    1e44:	8f ef       	ldi	r24, 0xFF	; 255
    1e46:	9f ef       	ldi	r25, 0xFF	; 255
    1e48:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    1e4c:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <xSchedulerRunning>
    1e56:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <xTickCount+0x1>
    1e5a:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <xTickCount>
    1e5e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <xPortStartScheduler>
    1e62:	00 00       	nop
    1e64:	0f 90       	pop	r0
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	0f 91       	pop	r16
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	08 95       	ret

00001e72 <vTaskSuspendAll>:
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    1e7e:	8f 5f       	subi	r24, 0xFF	; 255
    1e80:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <uxSchedulerSuspended>
    1e84:	00 00       	nop
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <xTaskResumeAll>:
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <xTaskResumeAll+0x6>
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <xTaskResumeAll+0x8>
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	1a 82       	std	Y+2, r1	; 0x02
    1e9a:	19 82       	std	Y+1, r1	; 0x01
    1e9c:	1b 82       	std	Y+3, r1	; 0x03
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	0f 92       	push	r0
    1ea4:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    1ea8:	81 50       	subi	r24, 0x01	; 1
    1eaa:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <uxSchedulerSuspended>
    1eae:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    1eb2:	88 23       	and	r24, r24
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <xTaskResumeAll+0x2c>
    1eb6:	77 c0       	rjmp	.+238    	; 0x1fa6 <xTaskResumeAll+0x11a>
    1eb8:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    1ebc:	88 23       	and	r24, r24
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <xTaskResumeAll+0x36>
    1ec0:	72 c0       	rjmp	.+228    	; 0x1fa6 <xTaskResumeAll+0x11a>
    1ec2:	49 c0       	rjmp	.+146    	; 0x1f56 <xTaskResumeAll+0xca>
    1ec4:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xPendingReadyList+0x5>
    1ec8:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <xPendingReadyList+0x6>
    1ecc:	fc 01       	movw	r30, r24
    1ece:	86 81       	ldd	r24, Z+6	; 0x06
    1ed0:	97 81       	ldd	r25, Z+7	; 0x07
    1ed2:	9a 83       	std	Y+2, r25	; 0x02
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eda:	0c 96       	adiw	r24, 0x0c	; 12
    1edc:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee4:	02 96       	adiw	r24, 0x02	; 2
    1ee6:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	fc 01       	movw	r30, r24
    1ef0:	96 89       	ldd	r25, Z+22	; 0x16
    1ef2:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    1ef6:	89 17       	cp	r24, r25
    1ef8:	30 f4       	brcc	.+12     	; 0x1f06 <xTaskResumeAll+0x7a>
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	9a 81       	ldd	r25, Y+2	; 0x02
    1efe:	fc 01       	movw	r30, r24
    1f00:	86 89       	ldd	r24, Z+22	; 0x16
    1f02:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	ac 01       	movw	r20, r24
    1f0c:	4e 5f       	subi	r20, 0xFE	; 254
    1f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	fc 01       	movw	r30, r24
    1f16:	86 89       	ldd	r24, Z+22	; 0x16
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	c9 01       	movw	r24, r18
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	82 0f       	add	r24, r18
    1f2c:	93 1f       	adc	r25, r19
    1f2e:	89 5b       	subi	r24, 0xB9	; 185
    1f30:	98 4f       	sbci	r25, 0xF8	; 248
    1f32:	ba 01       	movw	r22, r20
    1f34:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	26 89       	ldd	r18, Z+22	; 0x16
    1f40:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1f44:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1f48:	fc 01       	movw	r30, r24
    1f4a:	86 89       	ldd	r24, Z+22	; 0x16
    1f4c:	28 17       	cp	r18, r24
    1f4e:	18 f0       	brcs	.+6      	; 0x1f56 <xTaskResumeAll+0xca>
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xYieldPending>
    1f56:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <xPendingReadyList>
    1f5a:	88 23       	and	r24, r24
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <xTaskResumeAll+0xd4>
    1f5e:	b2 cf       	rjmp	.-156    	; 0x1ec4 <xTaskResumeAll+0x38>
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	89 2b       	or	r24, r25
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <xTaskResumeAll+0xe0>
    1f68:	0e 94 07 13 	call	0x260e	; 0x260e <prvResetNextTaskUnblockTime>
    1f6c:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxPendedTicks>
    1f70:	8c 83       	std	Y+4, r24	; 0x04
    1f72:	8c 81       	ldd	r24, Y+4	; 0x04
    1f74:	88 23       	and	r24, r24
    1f76:	79 f0       	breq	.+30     	; 0x1f96 <xTaskResumeAll+0x10a>
    1f78:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <xTaskIncrementTick>
    1f7c:	88 23       	and	r24, r24
    1f7e:	19 f0       	breq	.+6      	; 0x1f86 <xTaskResumeAll+0xfa>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xYieldPending>
    1f86:	8c 81       	ldd	r24, Y+4	; 0x04
    1f88:	81 50       	subi	r24, 0x01	; 1
    1f8a:	8c 83       	std	Y+4, r24	; 0x04
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	88 23       	and	r24, r24
    1f90:	99 f7       	brne	.-26     	; 0x1f78 <xTaskResumeAll+0xec>
    1f92:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <uxPendedTicks>
    1f96:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xYieldPending>
    1f9a:	88 23       	and	r24, r24
    1f9c:	21 f0       	breq	.+8      	; 0x1fa6 <xTaskResumeAll+0x11a>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	8b 83       	std	Y+3, r24	; 0x03
    1fa2:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1fa6:	0f 90       	pop	r0
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <xTaskGetTickCount>:
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <xTaskGetTickCount+0x6>
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	0f 92       	push	r0
    1fca:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTickCount>
    1fce:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTickCount+0x1>
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	0f 90       	pop	r0
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	08 95       	ret

00001fe8 <xTaskIncrementTick>:
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	29 97       	sbiw	r28, 0x09	; 9
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	19 82       	std	Y+1, r1	; 0x01
    1ffe:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    2002:	88 23       	and	r24, r24
    2004:	09 f0       	breq	.+2      	; 0x2008 <xTaskIncrementTick+0x20>
    2006:	c8 c0       	rjmp	.+400    	; 0x2198 <xTaskIncrementTick+0x1b0>
    2008:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTickCount>
    200c:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTickCount+0x1>
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	9b 83       	std	Y+3, r25	; 0x03
    2014:	8a 83       	std	Y+2, r24	; 0x02
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	9b 81       	ldd	r25, Y+3	; 0x03
    201a:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <xTickCount+0x1>
    201e:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <xTickCount>
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	9b 81       	ldd	r25, Y+3	; 0x03
    2026:	89 2b       	or	r24, r25
    2028:	d9 f4       	brne	.+54     	; 0x2060 <xTaskIncrementTick+0x78>
    202a:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    202e:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    2032:	9d 83       	std	Y+5, r25	; 0x05
    2034:	8c 83       	std	Y+4, r24	; 0x04
    2036:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <pxOverflowDelayedTaskList>
    203a:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <pxOverflowDelayedTaskList+0x1>
    203e:	90 93 7e 07 	sts	0x077E, r25	; 0x80077e <pxDelayedTaskList+0x1>
    2042:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <pxDelayedTaskList>
    2046:	8c 81       	ldd	r24, Y+4	; 0x04
    2048:	9d 81       	ldd	r25, Y+5	; 0x05
    204a:	90 93 80 07 	sts	0x0780, r25	; 0x800780 <pxOverflowDelayedTaskList+0x1>
    204e:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <pxOverflowDelayedTaskList>
    2052:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xNumOfOverflows>
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <xNumOfOverflows>
    205c:	0e 94 07 13 	call	0x260e	; 0x260e <prvResetNextTaskUnblockTime>
    2060:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <xNextTaskUnblockTime>
    2064:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <xNextTaskUnblockTime+0x1>
    2068:	2a 81       	ldd	r18, Y+2	; 0x02
    206a:	3b 81       	ldd	r19, Y+3	; 0x03
    206c:	28 17       	cp	r18, r24
    206e:	39 07       	cpc	r19, r25
    2070:	08 f4       	brcc	.+2      	; 0x2074 <xTaskIncrementTick+0x8c>
    2072:	78 c0       	rjmp	.+240    	; 0x2164 <xTaskIncrementTick+0x17c>
    2074:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    2078:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    207c:	fc 01       	movw	r30, r24
    207e:	80 81       	ld	r24, Z
    2080:	88 23       	and	r24, r24
    2082:	39 f4       	brne	.+14     	; 0x2092 <xTaskIncrementTick+0xaa>
    2084:	8f ef       	ldi	r24, 0xFF	; 255
    2086:	9f ef       	ldi	r25, 0xFF	; 255
    2088:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    208c:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>
    2090:	69 c0       	rjmp	.+210    	; 0x2164 <xTaskIncrementTick+0x17c>
    2092:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    2096:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    209a:	fc 01       	movw	r30, r24
    209c:	85 81       	ldd	r24, Z+5	; 0x05
    209e:	96 81       	ldd	r25, Z+6	; 0x06
    20a0:	fc 01       	movw	r30, r24
    20a2:	86 81       	ldd	r24, Z+6	; 0x06
    20a4:	97 81       	ldd	r25, Z+7	; 0x07
    20a6:	9f 83       	std	Y+7, r25	; 0x07
    20a8:	8e 83       	std	Y+6, r24	; 0x06
    20aa:	8e 81       	ldd	r24, Y+6	; 0x06
    20ac:	9f 81       	ldd	r25, Y+7	; 0x07
    20ae:	fc 01       	movw	r30, r24
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	99 87       	std	Y+9, r25	; 0x09
    20b6:	88 87       	std	Y+8, r24	; 0x08
    20b8:	2a 81       	ldd	r18, Y+2	; 0x02
    20ba:	3b 81       	ldd	r19, Y+3	; 0x03
    20bc:	88 85       	ldd	r24, Y+8	; 0x08
    20be:	99 85       	ldd	r25, Y+9	; 0x09
    20c0:	28 17       	cp	r18, r24
    20c2:	39 07       	cpc	r19, r25
    20c4:	38 f4       	brcc	.+14     	; 0x20d4 <xTaskIncrementTick+0xec>
    20c6:	88 85       	ldd	r24, Y+8	; 0x08
    20c8:	99 85       	ldd	r25, Y+9	; 0x09
    20ca:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    20ce:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>
    20d2:	48 c0       	rjmp	.+144    	; 0x2164 <xTaskIncrementTick+0x17c>
    20d4:	8e 81       	ldd	r24, Y+6	; 0x06
    20d6:	9f 81       	ldd	r25, Y+7	; 0x07
    20d8:	02 96       	adiw	r24, 0x02	; 2
    20da:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    20de:	8e 81       	ldd	r24, Y+6	; 0x06
    20e0:	9f 81       	ldd	r25, Y+7	; 0x07
    20e2:	fc 01       	movw	r30, r24
    20e4:	84 89       	ldd	r24, Z+20	; 0x14
    20e6:	95 89       	ldd	r25, Z+21	; 0x15
    20e8:	89 2b       	or	r24, r25
    20ea:	29 f0       	breq	.+10     	; 0x20f6 <xTaskIncrementTick+0x10e>
    20ec:	8e 81       	ldd	r24, Y+6	; 0x06
    20ee:	9f 81       	ldd	r25, Y+7	; 0x07
    20f0:	0c 96       	adiw	r24, 0x0c	; 12
    20f2:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    20f6:	8e 81       	ldd	r24, Y+6	; 0x06
    20f8:	9f 81       	ldd	r25, Y+7	; 0x07
    20fa:	fc 01       	movw	r30, r24
    20fc:	96 89       	ldd	r25, Z+22	; 0x16
    20fe:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    2102:	89 17       	cp	r24, r25
    2104:	30 f4       	brcc	.+12     	; 0x2112 <xTaskIncrementTick+0x12a>
    2106:	8e 81       	ldd	r24, Y+6	; 0x06
    2108:	9f 81       	ldd	r25, Y+7	; 0x07
    210a:	fc 01       	movw	r30, r24
    210c:	86 89       	ldd	r24, Z+22	; 0x16
    210e:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    2112:	8e 81       	ldd	r24, Y+6	; 0x06
    2114:	9f 81       	ldd	r25, Y+7	; 0x07
    2116:	ac 01       	movw	r20, r24
    2118:	4e 5f       	subi	r20, 0xFE	; 254
    211a:	5f 4f       	sbci	r21, 0xFF	; 255
    211c:	8e 81       	ldd	r24, Y+6	; 0x06
    211e:	9f 81       	ldd	r25, Y+7	; 0x07
    2120:	fc 01       	movw	r30, r24
    2122:	86 89       	ldd	r24, Z+22	; 0x16
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	c9 01       	movw	r24, r18
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	82 0f       	add	r24, r18
    2138:	93 1f       	adc	r25, r19
    213a:	89 5b       	subi	r24, 0xB9	; 185
    213c:	98 4f       	sbci	r25, 0xF8	; 248
    213e:	ba 01       	movw	r22, r20
    2140:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    2144:	8e 81       	ldd	r24, Y+6	; 0x06
    2146:	9f 81       	ldd	r25, Y+7	; 0x07
    2148:	fc 01       	movw	r30, r24
    214a:	26 89       	ldd	r18, Z+22	; 0x16
    214c:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2150:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2154:	fc 01       	movw	r30, r24
    2156:	86 89       	ldd	r24, Z+22	; 0x16
    2158:	28 17       	cp	r18, r24
    215a:	08 f4       	brcc	.+2      	; 0x215e <xTaskIncrementTick+0x176>
    215c:	8b cf       	rjmp	.-234    	; 0x2074 <xTaskIncrementTick+0x8c>
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	88 cf       	rjmp	.-240    	; 0x2074 <xTaskIncrementTick+0x8c>
    2164:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2168:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    216c:	fc 01       	movw	r30, r24
    216e:	86 89       	ldd	r24, Z+22	; 0x16
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	c9 01       	movw	r24, r18
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	82 0f       	add	r24, r18
    2184:	93 1f       	adc	r25, r19
    2186:	89 5b       	subi	r24, 0xB9	; 185
    2188:	98 4f       	sbci	r25, 0xF8	; 248
    218a:	fc 01       	movw	r30, r24
    218c:	80 81       	ld	r24, Z
    218e:	82 30       	cpi	r24, 0x02	; 2
    2190:	40 f0       	brcs	.+16     	; 0x21a2 <xTaskIncrementTick+0x1ba>
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	05 c0       	rjmp	.+10     	; 0x21a2 <xTaskIncrementTick+0x1ba>
    2198:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxPendedTicks>
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <uxPendedTicks>
    21a2:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xYieldPending>
    21a6:	88 23       	and	r24, r24
    21a8:	11 f0       	breq	.+4      	; 0x21ae <xTaskIncrementTick+0x1c6>
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	29 96       	adiw	r28, 0x09	; 9
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	08 95       	ret

000021c2 <vTaskSetApplicationTaskTag>:
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <vTaskSetApplicationTaskTag+0x6>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <vTaskSetApplicationTaskTag+0x8>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <vTaskSetApplicationTaskTag+0xa>
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
    21d4:	7e 83       	std	Y+6, r23	; 0x06
    21d6:	6d 83       	std	Y+5, r22	; 0x05
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	89 2b       	or	r24, r25
    21de:	39 f4       	brne	.+14     	; 0x21ee <vTaskSetApplicationTaskTag+0x2c>
    21e0:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    21e4:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    21e8:	9a 83       	std	Y+2, r25	; 0x02
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	04 c0       	rjmp	.+8      	; 0x21f6 <vTaskSetApplicationTaskTag+0x34>
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	0f 92       	push	r0
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2200:	2d 81       	ldd	r18, Y+5	; 0x05
    2202:	3e 81       	ldd	r19, Y+6	; 0x06
    2204:	fc 01       	movw	r30, r24
    2206:	30 a3       	std	Z+32, r19	; 0x20
    2208:	27 8f       	std	Z+31, r18	; 0x1f
    220a:	0f 90       	pop	r0
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	00 00       	nop
    2210:	26 96       	adiw	r28, 0x06	; 6
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	08 95       	ret

00002222 <vTaskSwitchContext>:
    2222:	1f 93       	push	r17
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	00 d0       	rcall	.+0      	; 0x222a <vTaskSwitchContext+0x8>
    222a:	1f 92       	push	r1
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    2234:	88 23       	and	r24, r24
    2236:	21 f0       	breq	.+8      	; 0x2240 <vTaskSwitchContext+0x1e>
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xYieldPending>
    223e:	6e c0       	rjmp	.+220    	; 0x231c <vTaskSwitchContext+0xfa>
    2240:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <xYieldPending>
    2244:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <vTaskSwitchContext+0x30>
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	81 50       	subi	r24, 0x01	; 1
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	c9 01       	movw	r24, r18
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	82 0f       	add	r24, r18
    2268:	93 1f       	adc	r25, r19
    226a:	89 5b       	subi	r24, 0xB9	; 185
    226c:	98 4f       	sbci	r25, 0xF8	; 248
    226e:	fc 01       	movw	r30, r24
    2270:	80 81       	ld	r24, Z
    2272:	88 23       	and	r24, r24
    2274:	59 f3       	breq	.-42     	; 0x224c <vTaskSwitchContext+0x2a>
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	c9 01       	movw	r24, r18
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	82 0f       	add	r24, r18
    228c:	93 1f       	adc	r25, r19
    228e:	89 5b       	subi	r24, 0xB9	; 185
    2290:	98 4f       	sbci	r25, 0xF8	; 248
    2292:	9b 83       	std	Y+3, r25	; 0x03
    2294:	8a 83       	std	Y+2, r24	; 0x02
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	9b 81       	ldd	r25, Y+3	; 0x03
    229a:	fc 01       	movw	r30, r24
    229c:	81 81       	ldd	r24, Z+1	; 0x01
    229e:	92 81       	ldd	r25, Z+2	; 0x02
    22a0:	fc 01       	movw	r30, r24
    22a2:	22 81       	ldd	r18, Z+2	; 0x02
    22a4:	33 81       	ldd	r19, Z+3	; 0x03
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	9b 81       	ldd	r25, Y+3	; 0x03
    22aa:	fc 01       	movw	r30, r24
    22ac:	32 83       	std	Z+2, r19	; 0x02
    22ae:	21 83       	std	Z+1, r18	; 0x01
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	9b 81       	ldd	r25, Y+3	; 0x03
    22b4:	fc 01       	movw	r30, r24
    22b6:	21 81       	ldd	r18, Z+1	; 0x01
    22b8:	32 81       	ldd	r19, Z+2	; 0x02
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	9b 81       	ldd	r25, Y+3	; 0x03
    22be:	03 96       	adiw	r24, 0x03	; 3
    22c0:	28 17       	cp	r18, r24
    22c2:	39 07       	cpc	r19, r25
    22c4:	69 f4       	brne	.+26     	; 0x22e0 <vTaskSwitchContext+0xbe>
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ca:	fc 01       	movw	r30, r24
    22cc:	81 81       	ldd	r24, Z+1	; 0x01
    22ce:	92 81       	ldd	r25, Z+2	; 0x02
    22d0:	fc 01       	movw	r30, r24
    22d2:	22 81       	ldd	r18, Z+2	; 0x02
    22d4:	33 81       	ldd	r19, Z+3	; 0x03
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	9b 81       	ldd	r25, Y+3	; 0x03
    22da:	fc 01       	movw	r30, r24
    22dc:	32 83       	std	Z+2, r19	; 0x02
    22de:	21 83       	std	Z+1, r18	; 0x01
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	9b 81       	ldd	r25, Y+3	; 0x03
    22e4:	fc 01       	movw	r30, r24
    22e6:	81 81       	ldd	r24, Z+1	; 0x01
    22e8:	92 81       	ldd	r25, Z+2	; 0x02
    22ea:	fc 01       	movw	r30, r24
    22ec:	86 81       	ldd	r24, Z+6	; 0x06
    22ee:	97 81       	ldd	r25, Z+7	; 0x07
    22f0:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pxCurrentTCB+0x1>
    22f4:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pxCurrentTCB>
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    22fe:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2302:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2306:	fc 01       	movw	r30, r24
    2308:	87 8d       	ldd	r24, Z+31	; 0x1f
    230a:	90 a1       	ldd	r25, Z+32	; 0x20
    230c:	18 2f       	mov	r17, r24
    230e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	61 2f       	mov	r22, r17
    2318:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
    231c:	00 00       	nop
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	1f 91       	pop	r17
    232a:	08 95       	ret

0000232c <vTaskPlaceOnEventList>:
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	00 d0       	rcall	.+0      	; 0x2332 <vTaskPlaceOnEventList+0x6>
    2332:	00 d0       	rcall	.+0      	; 0x2334 <vTaskPlaceOnEventList+0x8>
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	7c 83       	std	Y+4, r23	; 0x04
    233e:	6b 83       	std	Y+3, r22	; 0x03
    2340:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2344:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2348:	9c 01       	movw	r18, r24
    234a:	24 5f       	subi	r18, 0xF4	; 244
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	9a 81       	ldd	r25, Y+2	; 0x02
    2352:	b9 01       	movw	r22, r18
    2354:	0e 94 4a 02 	call	0x494	; 0x494 <vListInsert>
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	0e 94 36 13 	call	0x266c	; 0x266c <prvAddCurrentTaskToDelayedList>
    2362:	00 00       	nop
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	08 95       	ret

00002372 <xTaskRemoveFromEventList>:
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	00 d0       	rcall	.+0      	; 0x2378 <xTaskRemoveFromEventList+0x6>
    2378:	00 d0       	rcall	.+0      	; 0x237a <xTaskRemoveFromEventList+0x8>
    237a:	1f 92       	push	r1
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	9d 83       	std	Y+5, r25	; 0x05
    2382:	8c 83       	std	Y+4, r24	; 0x04
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	9d 81       	ldd	r25, Y+5	; 0x05
    2388:	fc 01       	movw	r30, r24
    238a:	85 81       	ldd	r24, Z+5	; 0x05
    238c:	96 81       	ldd	r25, Z+6	; 0x06
    238e:	fc 01       	movw	r30, r24
    2390:	86 81       	ldd	r24, Z+6	; 0x06
    2392:	97 81       	ldd	r25, Z+7	; 0x07
    2394:	9b 83       	std	Y+3, r25	; 0x03
    2396:	8a 83       	std	Y+2, r24	; 0x02
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	9b 81       	ldd	r25, Y+3	; 0x03
    239c:	0c 96       	adiw	r24, 0x0c	; 12
    239e:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    23a2:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    23a6:	88 23       	and	r24, r24
    23a8:	69 f5       	brne	.+90     	; 0x2404 <xTaskRemoveFromEventList+0x92>
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	9b 81       	ldd	r25, Y+3	; 0x03
    23ae:	02 96       	adiw	r24, 0x02	; 2
    23b0:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	9b 81       	ldd	r25, Y+3	; 0x03
    23b8:	fc 01       	movw	r30, r24
    23ba:	96 89       	ldd	r25, Z+22	; 0x16
    23bc:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    23c0:	89 17       	cp	r24, r25
    23c2:	30 f4       	brcc	.+12     	; 0x23d0 <xTaskRemoveFromEventList+0x5e>
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	9b 81       	ldd	r25, Y+3	; 0x03
    23c8:	fc 01       	movw	r30, r24
    23ca:	86 89       	ldd	r24, Z+22	; 0x16
    23cc:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	9b 81       	ldd	r25, Y+3	; 0x03
    23d4:	ac 01       	movw	r20, r24
    23d6:	4e 5f       	subi	r20, 0xFE	; 254
    23d8:	5f 4f       	sbci	r21, 0xFF	; 255
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	9b 81       	ldd	r25, Y+3	; 0x03
    23de:	fc 01       	movw	r30, r24
    23e0:	86 89       	ldd	r24, Z+22	; 0x16
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	c9 01       	movw	r24, r18
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	82 0f       	add	r24, r18
    23f6:	93 1f       	adc	r25, r19
    23f8:	89 5b       	subi	r24, 0xB9	; 185
    23fa:	98 4f       	sbci	r25, 0xF8	; 248
    23fc:	ba 01       	movw	r22, r20
    23fe:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    2402:	08 c0       	rjmp	.+16     	; 0x2414 <xTaskRemoveFromEventList+0xa2>
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	9b 81       	ldd	r25, Y+3	; 0x03
    2408:	0c 96       	adiw	r24, 0x0c	; 12
    240a:	bc 01       	movw	r22, r24
    240c:	81 e8       	ldi	r24, 0x81	; 129
    240e:	97 e0       	ldi	r25, 0x07	; 7
    2410:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	9b 81       	ldd	r25, Y+3	; 0x03
    2418:	fc 01       	movw	r30, r24
    241a:	26 89       	ldd	r18, Z+22	; 0x16
    241c:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2420:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2424:	fc 01       	movw	r30, r24
    2426:	86 89       	ldd	r24, Z+22	; 0x16
    2428:	82 17       	cp	r24, r18
    242a:	30 f4       	brcc	.+12     	; 0x2438 <xTaskRemoveFromEventList+0xc6>
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xYieldPending>
    2436:	01 c0       	rjmp	.+2      	; 0x243a <xTaskRemoveFromEventList+0xc8>
    2438:	19 82       	std	Y+1, r1	; 0x01
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	08 95       	ret

0000244c <vTaskSetTimeOutState>:
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	00 d0       	rcall	.+0      	; 0x2452 <vTaskSetTimeOutState+0x6>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	20 91 91 07 	lds	r18, 0x0791	; 0x800791 <xNumOfOverflows>
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	9a 81       	ldd	r25, Y+2	; 0x02
    2462:	fc 01       	movw	r30, r24
    2464:	20 83       	st	Z, r18
    2466:	20 91 8b 07 	lds	r18, 0x078B	; 0x80078b <xTickCount>
    246a:	30 91 8c 07 	lds	r19, 0x078C	; 0x80078c <xTickCount+0x1>
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	fc 01       	movw	r30, r24
    2474:	32 83       	std	Z+2, r19	; 0x02
    2476:	21 83       	std	Z+1, r18	; 0x01
    2478:	00 00       	nop
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	08 95       	ret

00002484 <xTaskCheckForTimeOut>:
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	27 97       	sbiw	r28, 0x07	; 7
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	9d 83       	std	Y+5, r25	; 0x05
    249a:	8c 83       	std	Y+4, r24	; 0x04
    249c:	7f 83       	std	Y+7, r23	; 0x07
    249e:	6e 83       	std	Y+6, r22	; 0x06
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	0f 92       	push	r0
    24a6:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTickCount>
    24aa:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTickCount+0x1>
    24ae:	9b 83       	std	Y+3, r25	; 0x03
    24b0:	8a 83       	std	Y+2, r24	; 0x02
    24b2:	8c 81       	ldd	r24, Y+4	; 0x04
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	fc 01       	movw	r30, r24
    24b8:	90 81       	ld	r25, Z
    24ba:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xNumOfOverflows>
    24be:	98 17       	cp	r25, r24
    24c0:	69 f0       	breq	.+26     	; 0x24dc <xTaskCheckForTimeOut+0x58>
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	9d 81       	ldd	r25, Y+5	; 0x05
    24c6:	fc 01       	movw	r30, r24
    24c8:	21 81       	ldd	r18, Z+1	; 0x01
    24ca:	32 81       	ldd	r19, Z+2	; 0x02
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	9b 81       	ldd	r25, Y+3	; 0x03
    24d0:	82 17       	cp	r24, r18
    24d2:	93 07       	cpc	r25, r19
    24d4:	18 f0       	brcs	.+6      	; 0x24dc <xTaskCheckForTimeOut+0x58>
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	30 c0       	rjmp	.+96     	; 0x253c <xTaskCheckForTimeOut+0xb8>
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	9d 81       	ldd	r25, Y+5	; 0x05
    24e0:	fc 01       	movw	r30, r24
    24e2:	81 81       	ldd	r24, Z+1	; 0x01
    24e4:	92 81       	ldd	r25, Z+2	; 0x02
    24e6:	2a 81       	ldd	r18, Y+2	; 0x02
    24e8:	3b 81       	ldd	r19, Y+3	; 0x03
    24ea:	28 1b       	sub	r18, r24
    24ec:	39 0b       	sbc	r19, r25
    24ee:	8e 81       	ldd	r24, Y+6	; 0x06
    24f0:	9f 81       	ldd	r25, Y+7	; 0x07
    24f2:	fc 01       	movw	r30, r24
    24f4:	80 81       	ld	r24, Z
    24f6:	91 81       	ldd	r25, Z+1	; 0x01
    24f8:	28 17       	cp	r18, r24
    24fa:	39 07       	cpc	r19, r25
    24fc:	e8 f4       	brcc	.+58     	; 0x2538 <xTaskCheckForTimeOut+0xb4>
    24fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2500:	9f 81       	ldd	r25, Y+7	; 0x07
    2502:	fc 01       	movw	r30, r24
    2504:	20 81       	ld	r18, Z
    2506:	31 81       	ldd	r19, Z+1	; 0x01
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	9d 81       	ldd	r25, Y+5	; 0x05
    250c:	fc 01       	movw	r30, r24
    250e:	41 81       	ldd	r20, Z+1	; 0x01
    2510:	52 81       	ldd	r21, Z+2	; 0x02
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	9b 81       	ldd	r25, Y+3	; 0x03
    2516:	ba 01       	movw	r22, r20
    2518:	68 1b       	sub	r22, r24
    251a:	79 0b       	sbc	r23, r25
    251c:	cb 01       	movw	r24, r22
    251e:	28 0f       	add	r18, r24
    2520:	39 1f       	adc	r19, r25
    2522:	8e 81       	ldd	r24, Y+6	; 0x06
    2524:	9f 81       	ldd	r25, Y+7	; 0x07
    2526:	fc 01       	movw	r30, r24
    2528:	31 83       	std	Z+1, r19	; 0x01
    252a:	20 83       	st	Z, r18
    252c:	8c 81       	ldd	r24, Y+4	; 0x04
    252e:	9d 81       	ldd	r25, Y+5	; 0x05
    2530:	0e 94 26 12 	call	0x244c	; 0x244c <vTaskSetTimeOutState>
    2534:	19 82       	std	Y+1, r1	; 0x01
    2536:	02 c0       	rjmp	.+4      	; 0x253c <xTaskCheckForTimeOut+0xb8>
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	27 96       	adiw	r28, 0x07	; 7
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <vTaskMissedYield>:
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xYieldPending>
    2562:	00 00       	nop
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	08 95       	ret

0000256a <prvIdleTask>:
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	00 d0       	rcall	.+0      	; 0x2570 <prvIdleTask+0x6>
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	9a 83       	std	Y+2, r25	; 0x02
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	0e 94 ff 12 	call	0x25fe	; 0x25fe <prvCheckTasksWaitingTermination>
    257c:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <pxReadyTasksLists>
    2580:	82 30       	cpi	r24, 0x02	; 2
    2582:	d0 f3       	brcs	.-12     	; 0x2578 <prvIdleTask+0xe>
    2584:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    2588:	f7 cf       	rjmp	.-18     	; 0x2578 <prvIdleTask+0xe>

0000258a <prvInitialiseTaskLists>:
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	1f 92       	push	r1
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	19 82       	std	Y+1, r1	; 0x01
    2596:	13 c0       	rjmp	.+38     	; 0x25be <prvInitialiseTaskLists+0x34>
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	c9 01       	movw	r24, r18
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	82 0f       	add	r24, r18
    25ae:	93 1f       	adc	r25, r19
    25b0:	89 5b       	subi	r24, 0xB9	; 185
    25b2:	98 4f       	sbci	r25, 0xF8	; 248
    25b4:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	84 30       	cpi	r24, 0x04	; 4
    25c2:	50 f3       	brcs	.-44     	; 0x2598 <prvInitialiseTaskLists+0xe>
    25c4:	8b e6       	ldi	r24, 0x6B	; 107
    25c6:	97 e0       	ldi	r25, 0x07	; 7
    25c8:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    25cc:	84 e7       	ldi	r24, 0x74	; 116
    25ce:	97 e0       	ldi	r25, 0x07	; 7
    25d0:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    25d4:	81 e8       	ldi	r24, 0x81	; 129
    25d6:	97 e0       	ldi	r25, 0x07	; 7
    25d8:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    25dc:	8b e6       	ldi	r24, 0x6B	; 107
    25de:	97 e0       	ldi	r25, 0x07	; 7
    25e0:	90 93 7e 07 	sts	0x077E, r25	; 0x80077e <pxDelayedTaskList+0x1>
    25e4:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <pxDelayedTaskList>
    25e8:	84 e7       	ldi	r24, 0x74	; 116
    25ea:	97 e0       	ldi	r25, 0x07	; 7
    25ec:	90 93 80 07 	sts	0x0780, r25	; 0x800780 <pxOverflowDelayedTaskList+0x1>
    25f0:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <pxOverflowDelayedTaskList>
    25f4:	00 00       	nop
    25f6:	0f 90       	pop	r0
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	08 95       	ret

000025fe <prvCheckTasksWaitingTermination>:
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	00 00       	nop
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	08 95       	ret

0000260e <prvResetNextTaskUnblockTime>:
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	00 d0       	rcall	.+0      	; 0x2614 <prvResetNextTaskUnblockTime+0x6>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    261c:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    2620:	fc 01       	movw	r30, r24
    2622:	80 81       	ld	r24, Z
    2624:	88 23       	and	r24, r24
    2626:	39 f4       	brne	.+14     	; 0x2636 <prvResetNextTaskUnblockTime+0x28>
    2628:	8f ef       	ldi	r24, 0xFF	; 255
    262a:	9f ef       	ldi	r25, 0xFF	; 255
    262c:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    2630:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>
    2634:	15 c0       	rjmp	.+42     	; 0x2660 <prvResetNextTaskUnblockTime+0x52>
    2636:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    263a:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    263e:	fc 01       	movw	r30, r24
    2640:	85 81       	ldd	r24, Z+5	; 0x05
    2642:	96 81       	ldd	r25, Z+6	; 0x06
    2644:	fc 01       	movw	r30, r24
    2646:	86 81       	ldd	r24, Z+6	; 0x06
    2648:	97 81       	ldd	r25, Z+7	; 0x07
    264a:	9a 83       	std	Y+2, r25	; 0x02
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	fc 01       	movw	r30, r24
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    265c:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>
    2660:	00 00       	nop
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	08 95       	ret

0000266c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	27 97       	sbiw	r28, 0x07	; 7
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
    2684:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2686:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTickCount>
    268a:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTickCount+0x1>
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2692:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2696:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    269a:	02 96       	adiw	r24, 0x02	; 2
    269c:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    26a0:	29 81       	ldd	r18, Y+1	; 0x01
    26a2:	3a 81       	ldd	r19, Y+2	; 0x02
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	82 0f       	add	r24, r18
    26aa:	93 1f       	adc	r25, r19
    26ac:	9c 83       	std	Y+4, r25	; 0x04
    26ae:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    26b0:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    26b4:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    26b8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ba:	3c 81       	ldd	r19, Y+4	; 0x04
    26bc:	fc 01       	movw	r30, r24
    26be:	33 83       	std	Z+3, r19	; 0x03
    26c0:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    26c2:	2b 81       	ldd	r18, Y+3	; 0x03
    26c4:	3c 81       	ldd	r19, Y+4	; 0x04
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ca:	28 17       	cp	r18, r24
    26cc:	39 07       	cpc	r19, r25
    26ce:	78 f4       	brcc	.+30     	; 0x26ee <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    26d0:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    26d4:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    26d8:	9c 01       	movw	r18, r24
    26da:	2e 5f       	subi	r18, 0xFE	; 254
    26dc:	3f 4f       	sbci	r19, 0xFF	; 255
    26de:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <pxOverflowDelayedTaskList>
    26e2:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <pxOverflowDelayedTaskList+0x1>
    26e6:	b9 01       	movw	r22, r18
    26e8:	0e 94 4a 02 	call	0x494	; 0x494 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    26ec:	1d c0       	rjmp	.+58     	; 0x2728 <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    26ee:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    26f2:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    26f6:	9c 01       	movw	r18, r24
    26f8:	2e 5f       	subi	r18, 0xFE	; 254
    26fa:	3f 4f       	sbci	r19, 0xFF	; 255
    26fc:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    2700:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    2704:	b9 01       	movw	r22, r18
    2706:	0e 94 4a 02 	call	0x494	; 0x494 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    270a:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <xNextTaskUnblockTime>
    270e:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <xNextTaskUnblockTime+0x1>
    2712:	2b 81       	ldd	r18, Y+3	; 0x03
    2714:	3c 81       	ldd	r19, Y+4	; 0x04
    2716:	28 17       	cp	r18, r24
    2718:	39 07       	cpc	r19, r25
    271a:	30 f4       	brcc	.+12     	; 0x2728 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    2724:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2728:	00 00       	nop
    272a:	27 96       	adiw	r28, 0x07	; 7
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	08 95       	ret

0000273c <main>:




int main(void)
 {
    273c:	ef 92       	push	r14
    273e:	ff 92       	push	r15
    2740:	0f 93       	push	r16
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	00 d0       	rcall	.+0      	; 0x2748 <main+0xc>
    2748:	00 d0       	rcall	.+0      	; 0x274a <main+0xe>
    274a:	00 d0       	rcall	.+0      	; 0x274c <main+0x10>
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
	 // Initialize HW

	InitHW();
    2750:	0e 94 1c 1b 	call	0x3638	; 0x3638 <InitHW>
	xSemaphore = xSemaphoreCreateBinary();
    2754:	43 e0       	ldi	r20, 0x03	; 3
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	0e 94 35 08 	call	0x106a	; 0x106a <xQueueGenericCreate>
    275e:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <xSemaphore+0x1>
    2762:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <xSemaphore>
	xSemaphoreGive(xSemaphore);
    2766:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    276a:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	0e 94 c6 08 	call	0x118c	; 0x118c <xQueueGenericSend>
	
	//The taks handles are neccessary to change their priorities on runtime	
	TaskHandle_t t1,t2,t3;	

	  xTaskCreate
    277c:	ce 01       	movw	r24, r28
    277e:	01 96       	adiw	r24, 0x01	; 1
    2780:	7c 01       	movw	r14, r24
    2782:	01 e0       	ldi	r16, 0x01	; 1
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	44 ec       	ldi	r20, 0xC4	; 196
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	66 e1       	ldi	r22, 0x16	; 22
    278e:	71 e0       	ldi	r23, 0x01	; 1
    2790:	87 e1       	ldi	r24, 0x17	; 23
    2792:	94 e1       	ldi	r25, 0x14	; 20
    2794:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xTaskCreate>
	  (	 T1_func,	 (char*)"T1",	 configMINIMAL_STACK_SIZE,	 NULL,	 min_TASK_PRIORITY,&t1);
	  
	  xTaskCreate
    2798:	ce 01       	movw	r24, r28
    279a:	03 96       	adiw	r24, 0x03	; 3
    279c:	7c 01       	movw	r14, r24
    279e:	01 e0       	ldi	r16, 0x01	; 1
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	44 ec       	ldi	r20, 0xC4	; 196
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	69 e1       	ldi	r22, 0x19	; 25
    27aa:	71 e0       	ldi	r23, 0x01	; 1
    27ac:	82 e7       	ldi	r24, 0x72	; 114
    27ae:	94 e1       	ldi	r25, 0x14	; 20
    27b0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xTaskCreate>
	  (
	  T2_func, (char*)"T2", configMINIMAL_STACK_SIZE,        NULL,        min_TASK_PRIORITY,&t2);
	
	 xTaskCreate
    27b4:	ce 01       	movw	r24, r28
    27b6:	05 96       	adiw	r24, 0x05	; 5
    27b8:	7c 01       	movw	r14, r24
    27ba:	01 e0       	ldi	r16, 0x01	; 1
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	44 ec       	ldi	r20, 0xC4	; 196
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	6c e1       	ldi	r22, 0x1C	; 28
    27c6:	71 e0       	ldi	r23, 0x01	; 1
    27c8:	8d ec       	ldi	r24, 0xCD	; 205
    27ca:	94 e1       	ldi	r25, 0x14	; 20
    27cc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xTaskCreate>
	  (
	  T3_func, (char*)"T3", configMINIMAL_STACK_SIZE,        NULL,        min_TASK_PRIORITY,&t3);

	xTaskCreate
    27d0:	e1 2c       	mov	r14, r1
    27d2:	f1 2c       	mov	r15, r1
    27d4:	04 e0       	ldi	r16, 0x04	; 4
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	44 ec       	ldi	r20, 0xC4	; 196
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	6f e1       	ldi	r22, 0x1F	; 31
    27e0:	71 e0       	ldi	r23, 0x01	; 1
    27e2:	88 e2       	ldi	r24, 0x28	; 40
    27e4:	95 e1       	ldi	r25, 0x15	; 21
    27e6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xTaskCreate>
	(
	T4_func, (char*)"T4", configMINIMAL_STACK_SIZE,        NULL,        max_TASK_PRIORITY,NULL);

	  //array of task handles
	  tasklist[0]=t1;
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <tasklist+0x1>
    27f2:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <tasklist>
	  tasklist[1]=t2;
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <tasklist+0x3>
    27fe:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <tasklist+0x2>
	  tasklist[2]=t3;
    2802:	8d 81       	ldd	r24, Y+5	; 0x05
    2804:	9e 81       	ldd	r25, Y+6	; 0x06
    2806:	90 93 b0 07 	sts	0x07B0, r25	; 0x8007b0 <tasklist+0x5>
    280a:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <tasklist+0x4>
	  
	  vTaskStartScheduler();
    280e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <vTaskStartScheduler>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
	
 }
    2816:	26 96       	adiw	r28, 0x06	; 6
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	0f 91       	pop	r16
    2828:	ff 90       	pop	r15
    282a:	ef 90       	pop	r14
    282c:	08 95       	ret

0000282e <T1_func>:
/******************************************************************************
 * Private function definitions.
 ******************************************************************************/

static void T1_func(void* pvParameters)
{
    282e:	cf 93       	push	r28
    2830:	df 93       	push	r29
    2832:	00 d0       	rcall	.+0      	; 0x2834 <T1_func+0x6>
    2834:	00 d0       	rcall	.+0      	; 0x2836 <T1_func+0x8>
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	8b 83       	std	Y+3, r24	; 0x03
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime;
	xLastWakeTime = 0;
    284a:	1a 82       	std	Y+2, r1	; 0x02
    284c:	19 82       	std	Y+1, r1	; 0x01
	for ( ;; )
	{
		//first call to consumeCPU must indicate the task tag
		consumeCPU(1,40);
    284e:	68 e2       	ldi	r22, 0x28	; 40
    2850:	70 e0       	ldi	r23, 0x00	; 0
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	0e 94 c3 1a 	call	0x3586	; 0x3586 <consumeCPU>
		if( xSemaphore != NULL )
    2858:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    285c:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2860:	89 2b       	or	r24, r25
    2862:	b1 f1       	breq	.+108    	; 0x28d0 <T1_func+0xa2>
		{
			my_trace(xTaskGetTickCount(),1,3,0);
    2864:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	43 e0       	ldi	r20, 0x03	; 3
    286c:	61 e0       	ldi	r22, 0x01	; 1
    286e:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
			if( xSemaphoreTake( xSemaphore, portMAX_DELAY))
    2872:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2876:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	4f ef       	ldi	r20, 0xFF	; 255
    287e:	5f ef       	ldi	r21, 0xFF	; 255
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	0e 94 77 09 	call	0x12ee	; 0x12ee <xQueueGenericReceive>
    2888:	88 23       	and	r24, r24
    288a:	11 f1       	breq	.+68     	; 0x28d0 <T1_func+0xa2>
			{
				//trace_data: tick, tag, userdata=1 for taking the resource
				my_trace(xTaskGetTickCount(),1,1,0);
    288c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	61 e0       	ldi	r22, 0x01	; 1
    2896:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
				//use tag 0 for the rest
				consumeCPU(0,computationTime[0] - 40);
    289a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <computationTime>
    289e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <computationTime+0x1>
    28a2:	88 97       	sbiw	r24, 0x28	; 40
    28a4:	bc 01       	movw	r22, r24
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	0e 94 c3 1a 	call	0x3586	; 0x3586 <consumeCPU>
				//userdata=2 when releasing the resource
				my_trace(xTaskGetTickCount(),1,2,0);
    28ac:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	42 e0       	ldi	r20, 0x02	; 2
    28b4:	61 e0       	ldi	r22, 0x01	; 1
    28b6:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
				xSemaphoreGive( xSemaphore );
    28ba:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    28be:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	0e 94 c6 08 	call	0x118c	; 0x118c <xQueueGenericSend>
			}
			//userdata=3 eagering for the resource
		}
		vTaskDelayUntil( &xLastWakeTime, taskPeriod[0] );
    28d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <taskPeriod>
    28d4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <taskPeriod+0x1>
    28d8:	bc 01       	movw	r22, r24
    28da:	ce 01       	movw	r24, r28
    28dc:	01 96       	adiw	r24, 0x01	; 1
    28de:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <vTaskDelayUntil>
	}
    28e2:	b5 cf       	rjmp	.-150    	; 0x284e <T1_func+0x20>

000028e4 <T2_func>:
} 
static void T2_func(void* pvParameters)
{
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <T2_func+0x6>
    28ea:	00 d0       	rcall	.+0      	; 0x28ec <T2_func+0x8>
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
    28f4:	62 e0       	ldi	r22, 0x02	; 2
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime;
	xLastWakeTime = 0;
    2900:	1a 82       	std	Y+2, r1	; 0x02
    2902:	19 82       	std	Y+1, r1	; 0x01
	for ( ;; )
	{
		//first call to consumeCPU must indicate the task tag
		consumeCPU(1,20);
    2904:	64 e1       	ldi	r22, 0x14	; 20
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	0e 94 c3 1a 	call	0x3586	; 0x3586 <consumeCPU>
		if( xSemaphore != NULL )
    290e:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2912:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2916:	89 2b       	or	r24, r25
    2918:	b1 f1       	breq	.+108    	; 0x2986 <T2_func+0xa2>
		{
			my_trace(xTaskGetTickCount(),2,3,0);
    291a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	43 e0       	ldi	r20, 0x03	; 3
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
			if( xSemaphoreTake( xSemaphore, portMAX_DELAY))
    2928:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    292c:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	4f ef       	ldi	r20, 0xFF	; 255
    2934:	5f ef       	ldi	r21, 0xFF	; 255
    2936:	60 e0       	ldi	r22, 0x00	; 0
    2938:	70 e0       	ldi	r23, 0x00	; 0
    293a:	0e 94 77 09 	call	0x12ee	; 0x12ee <xQueueGenericReceive>
    293e:	88 23       	and	r24, r24
    2940:	11 f1       	breq	.+68     	; 0x2986 <T2_func+0xa2>
			{
				//trace_data: tick, tag, userdata=1 for taking the resource
				my_trace(xTaskGetTickCount(),2,1,0);
    2942:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	41 e0       	ldi	r20, 0x01	; 1
    294a:	62 e0       	ldi	r22, 0x02	; 2
    294c:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
				//use tag 0 for the rest
				consumeCPU(0,computationTime[1] - 20);
    2950:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <computationTime+0x2>
    2954:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <computationTime+0x3>
    2958:	44 97       	sbiw	r24, 0x14	; 20
    295a:	bc 01       	movw	r22, r24
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <consumeCPU>
				//userdata=2 when releasing the resource
				my_trace(xTaskGetTickCount(),2,2,0);
    2962:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	42 e0       	ldi	r20, 0x02	; 2
    296a:	62 e0       	ldi	r22, 0x02	; 2
    296c:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
				xSemaphoreGive( xSemaphore );
    2970:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2974:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	0e 94 c6 08 	call	0x118c	; 0x118c <xQueueGenericSend>
			}
			//userdata=3 eagering for the resource
		}
		vTaskDelayUntil( &xLastWakeTime, taskPeriod[1] );
    2986:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <taskPeriod+0x2>
    298a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <taskPeriod+0x3>
    298e:	bc 01       	movw	r22, r24
    2990:	ce 01       	movw	r24, r28
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <vTaskDelayUntil>
	}
    2998:	b5 cf       	rjmp	.-150    	; 0x2904 <T2_func+0x20>

0000299a <T3_func>:
}

static void T3_func(void* pvParameters)
{
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <T3_func+0x6>
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <T3_func+0x8>
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	9c 83       	std	Y+4, r25	; 0x04
    29a8:	8b 83       	std	Y+3, r24	; 0x03
	vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
    29aa:	63 e0       	ldi	r22, 0x03	; 3
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime;
	xLastWakeTime = 0;
    29b6:	1a 82       	std	Y+2, r1	; 0x02
    29b8:	19 82       	std	Y+1, r1	; 0x01
	for ( ;; )
	{
		//first call to consumeCPU must indicate the task tag
		consumeCPU(1,30);
    29ba:	6e e1       	ldi	r22, 0x1E	; 30
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	0e 94 c3 1a 	call	0x3586	; 0x3586 <consumeCPU>
		if( xSemaphore != NULL )
    29c4:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    29c8:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    29cc:	89 2b       	or	r24, r25
    29ce:	b1 f1       	breq	.+108    	; 0x2a3c <T3_func+0xa2>
		{
			my_trace(xTaskGetTickCount(),3,3,0);
    29d0:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	43 e0       	ldi	r20, 0x03	; 3
    29d8:	63 e0       	ldi	r22, 0x03	; 3
    29da:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
			if( xSemaphoreTake( xSemaphore, portMAX_DELAY))
    29de:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    29e2:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	4f ef       	ldi	r20, 0xFF	; 255
    29ea:	5f ef       	ldi	r21, 0xFF	; 255
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	0e 94 77 09 	call	0x12ee	; 0x12ee <xQueueGenericReceive>
    29f4:	88 23       	and	r24, r24
    29f6:	11 f1       	breq	.+68     	; 0x2a3c <T3_func+0xa2>
			{
				//trace_data: tick, tag, userdata=1 for taking the resource
				my_trace(xTaskGetTickCount(),3,1,0);
    29f8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	63 e0       	ldi	r22, 0x03	; 3
    2a02:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
				//use tag 0 for the rest
				consumeCPU(0,computationTime[2] - 30);
    2a06:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <computationTime+0x4>
    2a0a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <computationTime+0x5>
    2a0e:	4e 97       	sbiw	r24, 0x1e	; 30
    2a10:	bc 01       	movw	r22, r24
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	0e 94 c3 1a 	call	0x3586	; 0x3586 <consumeCPU>
				//userdata=2 when releasing the resource
				my_trace(xTaskGetTickCount(),3,2,0);
    2a18:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	42 e0       	ldi	r20, 0x02	; 2
    2a20:	63 e0       	ldi	r22, 0x03	; 3
    2a22:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
				xSemaphoreGive( xSemaphore );
    2a26:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2a2a:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	60 e0       	ldi	r22, 0x00	; 0
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	0e 94 c6 08 	call	0x118c	; 0x118c <xQueueGenericSend>
			}
			//userdata=3 eagering for the resource
		}
		vTaskDelayUntil( &xLastWakeTime, taskPeriod[2] );
    2a3c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <taskPeriod+0x4>
    2a40:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <taskPeriod+0x5>
    2a44:	bc 01       	movw	r22, r24
    2a46:	ce 01       	movw	r24, r28
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <vTaskDelayUntil>
	}
    2a4e:	b5 cf       	rjmp	.-150    	; 0x29ba <T3_func+0x20>

00002a50 <T4_func>:
}

//////Tasks dealing with EDF. DO Not touch
//////Yep, it nos efficient, but it works for a few tasks.
static void T4_func(void* pvParameters)
{
    2a50:	cf 92       	push	r12
    2a52:	df 92       	push	r13
    2a54:	ef 92       	push	r14
    2a56:	ff 92       	push	r15
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	6b 97       	sbiw	r28, 0x1b	; 27
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	9b 8f       	std	Y+27, r25	; 0x1b
    2a6e:	8a 8f       	std	Y+26, r24	; 0x1a

	
	unsigned char temp_order;
	
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = 0;
    2a70:	18 8a       	std	Y+16, r1	; 0x10
    2a72:	1f 86       	std	Y+15, r1	; 0x0f
	vTaskSetApplicationTaskTag( NULL, ( void * ) 4 );
    2a74:	64 e0       	ldi	r22, 0x04	; 4
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vTaskSetApplicationTaskTag>

	for( ; ;)
	{
		now= xTaskGetTickCount();
    2a80:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
		
		unsigned char pos=0;
    2a88:	1f 82       	std	Y+7, r1	; 0x07
		min=0xFFFF;
    2a8a:	8f ef       	ldi	r24, 0xFF	; 255
    2a8c:	9f ef       	ldi	r25, 0xFF	; 255
    2a8e:	99 87       	std	Y+9, r25	; 0x09
    2a90:	88 87       	std	Y+8, r24	; 0x08
		//reset priorities and compute the current deadline for each task.
		for (unsigned char k=0;k<num_tasks;k++)
    2a92:	19 82       	std	Y+1, r1	; 0x01
    2a94:	66 c0       	rjmp	.+204    	; 0x2b62 <T4_func+0x112>
		{
			
			vTaskPrioritySet(tasklist[k],min_TASK_PRIORITY);
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	85 55       	subi	r24, 0x55	; 85
    2aa2:	98 4f       	sbci	r25, 0xF8	; 248
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	80 81       	ld	r24, Z
    2aa8:	91 81       	ldd	r25, Z+1	; 0x01
    2aaa:	61 e0       	ldi	r22, 0x01	; 1
    2aac:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <vTaskPrioritySet>
			t=(int)((double)now/(double)taskPeriod[k])+1;
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab4:	cc 01       	movw	r24, r24
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <__floatunsisf>
    2ac2:	6b 01       	movw	r12, r22
    2ac4:	7c 01       	movw	r14, r24
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	8d 5f       	subi	r24, 0xFD	; 253
    2ad2:	9e 4f       	sbci	r25, 0xFE	; 254
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	80 81       	ld	r24, Z
    2ad8:	91 81       	ldd	r25, Z+1	; 0x01
    2ada:	cc 01       	movw	r24, r24
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <__floatunsisf>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9c 01       	movw	r18, r24
    2aee:	ad 01       	movw	r20, r26
    2af0:	c7 01       	movw	r24, r14
    2af2:	b6 01       	movw	r22, r12
    2af4:	0e 94 30 1b 	call	0x3660	; 0x3660 <__divsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__fixsfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	9e 87       	std	Y+14, r25	; 0x0e
    2b0c:	8d 87       	std	Y+13, r24	; 0x0d
			aux[k]=(t*taskPeriod[k])-now;
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	88 2f       	mov	r24, r24
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	29 81       	ldd	r18, Y+1	; 0x01
    2b16:	22 2f       	mov	r18, r18
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	22 0f       	add	r18, r18
    2b1c:	33 1f       	adc	r19, r19
    2b1e:	2d 5f       	subi	r18, 0xFD	; 253
    2b20:	3e 4f       	sbci	r19, 0xFE	; 254
    2b22:	f9 01       	movw	r30, r18
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b2a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b2c:	62 9f       	mul	r22, r18
    2b2e:	a0 01       	movw	r20, r0
    2b30:	63 9f       	mul	r22, r19
    2b32:	50 0d       	add	r21, r0
    2b34:	72 9f       	mul	r23, r18
    2b36:	50 0d       	add	r21, r0
    2b38:	11 24       	eor	r1, r1
    2b3a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b3c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b3e:	ba 01       	movw	r22, r20
    2b40:	62 1b       	sub	r22, r18
    2b42:	73 0b       	sbc	r23, r19
    2b44:	9b 01       	movw	r18, r22
    2b46:	88 0f       	add	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	ae 01       	movw	r20, r28
    2b4c:	4f 5f       	subi	r20, 0xFF	; 255
    2b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b50:	84 0f       	add	r24, r20
    2b52:	95 1f       	adc	r25, r21
    2b54:	40 96       	adiw	r24, 0x10	; 16
    2b56:	fc 01       	movw	r30, r24
    2b58:	31 83       	std	Z+1, r19	; 0x01
    2b5a:	20 83       	st	Z, r18
		now= xTaskGetTickCount();
		
		unsigned char pos=0;
		min=0xFFFF;
		//reset priorities and compute the current deadline for each task.
		for (unsigned char k=0;k<num_tasks;k++)
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	8f 5f       	subi	r24, 0xFF	; 255
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    2b66:	99 81       	ldd	r25, Y+1	; 0x01
    2b68:	98 17       	cp	r25, r24
    2b6a:	08 f4       	brcc	.+2      	; 0x2b6e <T4_func+0x11e>
    2b6c:	94 cf       	rjmp	.-216    	; 0x2a96 <T4_func+0x46>
			t=(int)((double)now/(double)taskPeriod[k])+1;
			aux[k]=(t*taskPeriod[k])-now;
		}
		
		//sorting deadlines
		unsigned char order[3]={0,1,2};
    2b6e:	1f 8a       	std	Y+23, r1	; 0x17
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	88 8f       	std	Y+24, r24	; 0x18
    2b74:	82 e0       	ldi	r24, 0x02	; 2
    2b76:	89 8f       	std	Y+25, r24	; 0x19
		for (unsigned char i=0;i<num_tasks-1;i++)
    2b78:	1a 82       	std	Y+2, r1	; 0x02
    2b7a:	a9 c0       	rjmp	.+338    	; 0x2cce <T4_func+0x27e>
		{
			for (unsigned char j=0;j<num_tasks-1-i;j++)
    2b7c:	1b 82       	std	Y+3, r1	; 0x03
    2b7e:	8f c0       	rjmp	.+286    	; 0x2c9e <T4_func+0x24e>
			{
				if (aux[j]>aux[j+1])
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	88 0f       	add	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	9e 01       	movw	r18, r28
    2b8c:	2f 5f       	subi	r18, 0xFF	; 255
    2b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b90:	82 0f       	add	r24, r18
    2b92:	93 1f       	adc	r25, r19
    2b94:	40 96       	adiw	r24, 0x10	; 16
    2b96:	fc 01       	movw	r30, r24
    2b98:	20 81       	ld	r18, Z
    2b9a:	31 81       	ldd	r19, Z+1	; 0x01
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	88 2f       	mov	r24, r24
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	ae 01       	movw	r20, r28
    2baa:	4f 5f       	subi	r20, 0xFF	; 255
    2bac:	5f 4f       	sbci	r21, 0xFF	; 255
    2bae:	84 0f       	add	r24, r20
    2bb0:	95 1f       	adc	r25, r21
    2bb2:	40 96       	adiw	r24, 0x10	; 16
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	82 17       	cp	r24, r18
    2bbc:	93 07       	cpc	r25, r19
    2bbe:	08 f0       	brcs	.+2      	; 0x2bc2 <T4_func+0x172>
    2bc0:	6b c0       	rjmp	.+214    	; 0x2c98 <T4_func+0x248>
				{
					temp=aux[j+1];
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	88 2f       	mov	r24, r24
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	01 96       	adiw	r24, 0x01	; 1
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	9e 01       	movw	r18, r28
    2bd0:	2f 5f       	subi	r18, 0xFF	; 255
    2bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd4:	82 0f       	add	r24, r18
    2bd6:	93 1f       	adc	r25, r19
    2bd8:	40 96       	adiw	r24, 0x10	; 16
    2bda:	fc 01       	movw	r30, r24
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	9b 87       	std	Y+11, r25	; 0x0b
    2be2:	8a 87       	std	Y+10, r24	; 0x0a
					aux[j+1]=aux[j];
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	88 2f       	mov	r24, r24
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	01 96       	adiw	r24, 0x01	; 1
    2bec:	2b 81       	ldd	r18, Y+3	; 0x03
    2bee:	22 2f       	mov	r18, r18
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	22 0f       	add	r18, r18
    2bf4:	33 1f       	adc	r19, r19
    2bf6:	ae 01       	movw	r20, r28
    2bf8:	4f 5f       	subi	r20, 0xFF	; 255
    2bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfc:	24 0f       	add	r18, r20
    2bfe:	35 1f       	adc	r19, r21
    2c00:	20 5f       	subi	r18, 0xF0	; 240
    2c02:	3f 4f       	sbci	r19, 0xFF	; 255
    2c04:	f9 01       	movw	r30, r18
    2c06:	20 81       	ld	r18, Z
    2c08:	31 81       	ldd	r19, Z+1	; 0x01
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	ae 01       	movw	r20, r28
    2c10:	4f 5f       	subi	r20, 0xFF	; 255
    2c12:	5f 4f       	sbci	r21, 0xFF	; 255
    2c14:	84 0f       	add	r24, r20
    2c16:	95 1f       	adc	r25, r21
    2c18:	40 96       	adiw	r24, 0x10	; 16
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	31 83       	std	Z+1, r19	; 0x01
    2c1e:	20 83       	st	Z, r18
					aux[j]=temp;
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	88 2f       	mov	r24, r24
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	9e 01       	movw	r18, r28
    2c2c:	2f 5f       	subi	r18, 0xFF	; 255
    2c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c30:	82 0f       	add	r24, r18
    2c32:	93 1f       	adc	r25, r19
    2c34:	40 96       	adiw	r24, 0x10	; 16
    2c36:	2a 85       	ldd	r18, Y+10	; 0x0a
    2c38:	3b 85       	ldd	r19, Y+11	; 0x0b
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	31 83       	std	Z+1, r19	; 0x01
    2c3e:	20 83       	st	Z, r18
					
					temp_order=order[j+1];
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	88 2f       	mov	r24, r24
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	9e 01       	movw	r18, r28
    2c4a:	29 5e       	subi	r18, 0xE9	; 233
    2c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4e:	82 0f       	add	r24, r18
    2c50:	93 1f       	adc	r25, r19
    2c52:	fc 01       	movw	r30, r24
    2c54:	80 81       	ld	r24, Z
    2c56:	8c 87       	std	Y+12, r24	; 0x0c
					order[j+1]=order[j];
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	88 2f       	mov	r24, r24
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	01 96       	adiw	r24, 0x01	; 1
    2c60:	2b 81       	ldd	r18, Y+3	; 0x03
    2c62:	22 2f       	mov	r18, r18
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	ae 01       	movw	r20, r28
    2c68:	49 5e       	subi	r20, 0xE9	; 233
    2c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6c:	24 0f       	add	r18, r20
    2c6e:	35 1f       	adc	r19, r21
    2c70:	f9 01       	movw	r30, r18
    2c72:	40 81       	ld	r20, Z
    2c74:	9e 01       	movw	r18, r28
    2c76:	29 5e       	subi	r18, 0xE9	; 233
    2c78:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7a:	82 0f       	add	r24, r18
    2c7c:	93 1f       	adc	r25, r19
    2c7e:	fc 01       	movw	r30, r24
    2c80:	40 83       	st	Z, r20
					order[j]=temp_order;
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9e 01       	movw	r18, r28
    2c8a:	29 5e       	subi	r18, 0xE9	; 233
    2c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8e:	82 0f       	add	r24, r18
    2c90:	93 1f       	adc	r25, r19
    2c92:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c94:	fc 01       	movw	r30, r24
    2c96:	20 83       	st	Z, r18
		
		//sorting deadlines
		unsigned char order[3]={0,1,2};
		for (unsigned char i=0;i<num_tasks-1;i++)
		{
			for (unsigned char j=0;j<num_tasks-1-i;j++)
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	8f 5f       	subi	r24, 0xFF	; 255
    2c9c:	8b 83       	std	Y+3, r24	; 0x03
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	28 2f       	mov	r18, r24
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    2ca8:	88 2f       	mov	r24, r24
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	ac 01       	movw	r20, r24
    2cae:	41 50       	subi	r20, 0x01	; 1
    2cb0:	51 09       	sbc	r21, r1
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	88 2f       	mov	r24, r24
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	ba 01       	movw	r22, r20
    2cba:	68 1b       	sub	r22, r24
    2cbc:	79 0b       	sbc	r23, r25
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	28 17       	cp	r18, r24
    2cc2:	39 07       	cpc	r19, r25
    2cc4:	0c f4       	brge	.+2      	; 0x2cc8 <T4_func+0x278>
    2cc6:	5c cf       	rjmp	.-328    	; 0x2b80 <T4_func+0x130>
			aux[k]=(t*taskPeriod[k])-now;
		}
		
		//sorting deadlines
		unsigned char order[3]={0,1,2};
		for (unsigned char i=0;i<num_tasks-1;i++)
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	8f 5f       	subi	r24, 0xFF	; 255
    2ccc:	8a 83       	std	Y+2, r24	; 0x02
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	28 17       	cp	r18, r24
    2ce0:	39 07       	cpc	r19, r25
    2ce2:	0c f4       	brge	.+2      	; 0x2ce6 <T4_func+0x296>
    2ce4:	4b cf       	rjmp	.-362    	; 0x2b7c <T4_func+0x12c>
			}
		}
		
		//assigining priorities in the same order...
		
		for (unsigned char k=0;k<num_tasks;k++)
    2ce6:	1c 82       	std	Y+4, r1	; 0x04
    2ce8:	1d c0       	rjmp	.+58     	; 0x2d24 <T4_func+0x2d4>
		{
			
			vTaskPrioritySet(tasklist[order[k]],max_TASK_PRIORITY-k-1);
    2cea:	93 e0       	ldi	r25, 0x03	; 3
    2cec:	8c 81       	ldd	r24, Y+4	; 0x04
    2cee:	49 2f       	mov	r20, r25
    2cf0:	48 1b       	sub	r20, r24
    2cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf4:	88 2f       	mov	r24, r24
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9e 01       	movw	r18, r28
    2cfa:	29 5e       	subi	r18, 0xE9	; 233
    2cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfe:	82 0f       	add	r24, r18
    2d00:	93 1f       	adc	r25, r19
    2d02:	fc 01       	movw	r30, r24
    2d04:	80 81       	ld	r24, Z
    2d06:	88 2f       	mov	r24, r24
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	85 55       	subi	r24, 0x55	; 85
    2d10:	98 4f       	sbci	r25, 0xF8	; 248
    2d12:	fc 01       	movw	r30, r24
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	64 2f       	mov	r22, r20
    2d1a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <vTaskPrioritySet>
			}
		}
		
		//assigining priorities in the same order...
		
		for (unsigned char k=0;k<num_tasks;k++)
    2d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d20:	8f 5f       	subi	r24, 0xFF	; 255
    2d22:	8c 83       	std	Y+4, r24	; 0x04
    2d24:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    2d28:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2a:	98 17       	cp	r25, r24
    2d2c:	f0 f2       	brcs	.-68     	; 0x2cea <T4_func+0x29a>
			
			vTaskPrioritySet(tasklist[order[k]],max_TASK_PRIORITY-k-1);
			
		}
		
		vTaskDelayUntil( &xLastWakeTime, edfPeriod);
    2d2e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <edfPeriod>
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	ce 01       	movw	r24, r28
    2d38:	0f 96       	adiw	r24, 0x0f	; 15
    2d3a:	b9 01       	movw	r22, r18
    2d3c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <vTaskDelayUntil>
	}//for;;
    2d40:	9f ce       	rjmp	.-706    	; 0x2a80 <T4_func+0x30>

00002d42 <__vector_18>:
		rs232bufferstate=RS232_RS_PAUSE;
		if (inpcp!=NULL) memcpy(inpcp,(const void *)&rs232inputreport,sizeof(RS232InputReport));
		// enable again ISR work
		RS232_PrepareToRead();
	}
}
    2d42:	1f 92       	push	r1
    2d44:	0f 92       	push	r0
    2d46:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2d4a:	0f 92       	push	r0
    2d4c:	11 24       	eor	r1, r1
    2d4e:	2f 93       	push	r18
    2d50:	3f 93       	push	r19
    2d52:	8f 93       	push	r24
    2d54:	9f 93       	push	r25
    2d56:	ef 93       	push	r30
    2d58:	ff 93       	push	r31
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	80 ec       	ldi	r24, 0xC0	; 192
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	fc 01       	movw	r30, r24
    2d68:	80 81       	ld	r24, Z
    2d6a:	8c 71       	andi	r24, 0x1C	; 28
    2d6c:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <rs232inputreport+0x2>
    2d70:	86 ec       	ldi	r24, 0xC6	; 198
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	fc 01       	movw	r30, r24
    2d76:	80 81       	ld	r24, Z
    2d78:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <rs232inputreport+0x3>
    2d7c:	81 ec       	ldi	r24, 0xC1	; 193
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	21 ec       	ldi	r18, 0xC1	; 193
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	f9 01       	movw	r30, r18
    2d86:	20 81       	ld	r18, Z
    2d88:	2f 77       	andi	r18, 0x7F	; 127
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	20 83       	st	Z, r18
    2d8e:	78 94       	sei
    2d90:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rs232bufferstate>
    2d94:	88 2f       	mov	r24, r24
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	81 30       	cpi	r24, 0x01	; 1
    2d9a:	91 05       	cpc	r25, r1
    2d9c:	61 f1       	breq	.+88     	; 0x2df6 <__vector_18+0xb4>
    2d9e:	82 30       	cpi	r24, 0x02	; 2
    2da0:	91 05       	cpc	r25, r1
    2da2:	e1 f1       	breq	.+120    	; 0x2e1c <__vector_18+0xda>
    2da4:	89 2b       	or	r24, r25
    2da6:	09 f0       	breq	.+2      	; 0x2daa <__vector_18+0x68>
    2da8:	40 c0       	rjmp	.+128    	; 0x2e2a <__vector_18+0xe8>
    2daa:	20 91 9e 07 	lds	r18, 0x079E	; 0x80079e <rs232buffer>
    2dae:	30 91 9f 07 	lds	r19, 0x079F	; 0x80079f <rs232buffer+0x1>
    2db2:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <rs232bufferpos>
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	98 0f       	add	r25, r24
    2dba:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <rs232bufferpos>
    2dbe:	88 2f       	mov	r24, r24
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	82 0f       	add	r24, r18
    2dc4:	93 1f       	adc	r25, r19
    2dc6:	20 91 a6 07 	lds	r18, 0x07A6	; 0x8007a6 <rs232inputreport+0x3>
    2dca:	fc 01       	movw	r30, r24
    2dcc:	20 83       	st	Z, r18
    2dce:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <rs232inputreport+0x3>
    2dd2:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <rs232endchar>
    2dd6:	98 17       	cp	r25, r24
    2dd8:	21 f4       	brne	.+8      	; 0x2de2 <__vector_18+0xa0>
    2dda:	82 e0       	ldi	r24, 0x02	; 2
    2ddc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rs232bufferstate>
    2de0:	21 c0       	rjmp	.+66     	; 0x2e24 <__vector_18+0xe2>
    2de2:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <rs232bufferpos>
    2de6:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <rs232buffersize>
    2dea:	98 17       	cp	r25, r24
    2dec:	d9 f4       	brne	.+54     	; 0x2e24 <__vector_18+0xe2>
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rs232bufferstate>
    2df4:	17 c0       	rjmp	.+46     	; 0x2e24 <__vector_18+0xe2>
    2df6:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <rs232inputreport>
    2dfa:	90 91 a4 07 	lds	r25, 0x07A4	; 0x8007a4 <rs232inputreport+0x1>
    2dfe:	01 96       	adiw	r24, 0x01	; 1
    2e00:	90 93 a4 07 	sts	0x07A4, r25	; 0x8007a4 <rs232inputreport+0x1>
    2e04:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <rs232inputreport>
    2e08:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <rs232inputreport+0x3>
    2e0c:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <rs232endchar>
    2e10:	98 17       	cp	r25, r24
    2e12:	51 f4       	brne	.+20     	; 0x2e28 <__vector_18+0xe6>
    2e14:	82 e0       	ldi	r24, 0x02	; 2
    2e16:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rs232bufferstate>
    2e1a:	06 c0       	rjmp	.+12     	; 0x2e28 <__vector_18+0xe6>
    2e1c:	83 e0       	ldi	r24, 0x03	; 3
    2e1e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rs232bufferstate>
    2e22:	03 c0       	rjmp	.+6      	; 0x2e2a <__vector_18+0xe8>
    2e24:	00 00       	nop
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <__vector_18+0xe8>
    2e28:	00 00       	nop
    2e2a:	f8 94       	cli
    2e2c:	81 ec       	ldi	r24, 0xC1	; 193
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	21 ec       	ldi	r18, 0xC1	; 193
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	f9 01       	movw	r30, r18
    2e36:	20 81       	ld	r18, Z
    2e38:	20 68       	ori	r18, 0x80	; 128
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	20 83       	st	Z, r18
    2e3e:	00 00       	nop
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	ff 91       	pop	r31
    2e46:	ef 91       	pop	r30
    2e48:	9f 91       	pop	r25
    2e4a:	8f 91       	pop	r24
    2e4c:	3f 91       	pop	r19
    2e4e:	2f 91       	pop	r18
    2e50:	0f 90       	pop	r0
    2e52:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2e56:	0f 90       	pop	r0
    2e58:	1f 90       	pop	r1
    2e5a:	18 95       	reti

00002e5c <RS232_PrepareToRead>:
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	84 e0       	ldi	r24, 0x04	; 4
    2e66:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rs232bufferstate>
    2e6a:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <rs232buffer>
    2e6e:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <rs232buffer+0x1>
    2e72:	89 2b       	or	r24, r25
    2e74:	61 f0       	breq	.+24     	; 0x2e8e <RS232_PrepareToRead+0x32>
    2e76:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <rs232bufferpos>
    2e7a:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <rs232inputreport+0x1>
    2e7e:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <rs232inputreport>
    2e82:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <rs232inputreport+0x2>
    2e86:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <rs232inputreport+0x3>
    2e8a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rs232bufferstate>
    2e8e:	00 00       	nop
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	08 95       	ret

00002e96 <RS232_Init>:
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	00 d0       	rcall	.+0      	; 0x2e9c <RS232_Init+0x6>
    2e9c:	00 d0       	rcall	.+0      	; 0x2e9e <RS232_Init+0x8>
    2e9e:	1f 92       	push	r1
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	9b 83       	std	Y+3, r25	; 0x03
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
    2ea8:	6c 83       	std	Y+4, r22	; 0x04
    2eaa:	4d 83       	std	Y+5, r20	; 0x05
    2eac:	8f e5       	ldi	r24, 0x5F	; 95
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	80 81       	ld	r24, Z
    2eb4:	80 78       	andi	r24, 0x80	; 128
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <RS232_Init+0x2a>
    2ebe:	f8 94       	cli
    2ec0:	85 ec       	ldi	r24, 0xC5	; 197
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	10 82       	st	Z, r1
    2ec8:	84 ec       	ldi	r24, 0xC4	; 196
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	29 e1       	ldi	r18, 0x19	; 25
    2ece:	fc 01       	movw	r30, r24
    2ed0:	20 83       	st	Z, r18
    2ed2:	80 ec       	ldi	r24, 0xC0	; 192
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	20 ec       	ldi	r18, 0xC0	; 192
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	f9 01       	movw	r30, r18
    2edc:	20 81       	ld	r18, Z
    2ede:	2c 7f       	andi	r18, 0xFC	; 252
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	20 83       	st	Z, r18
    2ee4:	81 ec       	ldi	r24, 0xC1	; 193
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	28 e9       	ldi	r18, 0x98	; 152
    2eea:	fc 01       	movw	r30, r24
    2eec:	20 83       	st	Z, r18
    2eee:	82 ec       	ldi	r24, 0xC2	; 194
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	26 e0       	ldi	r18, 0x06	; 6
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	20 83       	st	Z, r18
    2ef8:	09 c0       	rjmp	.+18     	; 0x2f0c <RS232_Init+0x76>
    2efa:	1f 93       	push	r17
    2efc:	ef 93       	push	r30
    2efe:	ff 93       	push	r31
    2f00:	e6 ec       	ldi	r30, 0xC6	; 198
    2f02:	ff 27       	eor	r31, r31
    2f04:	10 81       	ld	r17, Z
    2f06:	ff 91       	pop	r31
    2f08:	ef 91       	pop	r30
    2f0a:	1f 91       	pop	r17
    2f0c:	80 ec       	ldi	r24, 0xC0	; 192
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	fc 01       	movw	r30, r24
    2f12:	80 81       	ld	r24, Z
    2f14:	88 23       	and	r24, r24
    2f16:	8c f3       	brlt	.-30     	; 0x2efa <RS232_Init+0x64>
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1c:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <rs232buffer+0x1>
    2f20:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <rs232buffer>
    2f24:	8c 81       	ldd	r24, Y+4	; 0x04
    2f26:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <rs232buffersize>
    2f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2c:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <rs232endchar>
    2f30:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <RS232_PrepareToRead>
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	88 23       	and	r24, r24
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <RS232_Init+0xa6>
    2f3a:	78 94       	sei
    2f3c:	00 00       	nop
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	08 95       	ret

00002f4e <RS232_Send>:

void RS232_Send(const char *c, unsigned char endchar)
// Send command in C and return after the whole transmission
{
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <RS232_Send+0x6>
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <RS232_Send+0x8>
    2f56:	1f 92       	push	r1
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	9c 83       	std	Y+4, r25	; 0x04
    2f5e:	8b 83       	std	Y+3, r24	; 0x03
    2f60:	6d 83       	std	Y+5, r22	; 0x05
	if (c==NULL) return;
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	9c 81       	ldd	r25, Y+4	; 0x04
    2f66:	89 2b       	or	r24, r25
    2f68:	d9 f1       	breq	.+118    	; 0x2fe0 <RS232_Send+0x92>
	// send command
	unsigned f=0;
    2f6a:	1a 82       	std	Y+2, r1	; 0x02
    2f6c:	19 82       	std	Y+1, r1	; 0x01
	while (c[f]!=endchar)
    2f6e:	1c c0       	rjmp	.+56     	; 0x2fa8 <RS232_Send+0x5a>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
    2f70:	00 00       	nop
    2f72:	80 ec       	ldi	r24, 0xC0	; 192
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	fc 01       	movw	r30, r24
    2f78:	80 81       	ld	r24, Z
    2f7a:	88 2f       	mov	r24, r24
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	80 72       	andi	r24, 0x20	; 32
    2f80:	99 27       	eor	r25, r25
    2f82:	89 2b       	or	r24, r25
    2f84:	b1 f3       	breq	.-20     	; 0x2f72 <RS232_Send+0x24>
		UDR0=c[f++];
    2f86:	26 ec       	ldi	r18, 0xC6	; 198
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8e:	ac 01       	movw	r20, r24
    2f90:	4f 5f       	subi	r20, 0xFF	; 255
    2f92:	5f 4f       	sbci	r21, 0xFF	; 255
    2f94:	5a 83       	std	Y+2, r21	; 0x02
    2f96:	49 83       	std	Y+1, r20	; 0x01
    2f98:	4b 81       	ldd	r20, Y+3	; 0x03
    2f9a:	5c 81       	ldd	r21, Y+4	; 0x04
    2f9c:	84 0f       	add	r24, r20
    2f9e:	95 1f       	adc	r25, r21
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	80 81       	ld	r24, Z
    2fa4:	f9 01       	movw	r30, r18
    2fa6:	80 83       	st	Z, r24
// Send command in C and return after the whole transmission
{
	if (c==NULL) return;
	// send command
	unsigned f=0;
	while (c[f]!=endchar)
    2fa8:	2b 81       	ldd	r18, Y+3	; 0x03
    2faa:	3c 81       	ldd	r19, Y+4	; 0x04
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb0:	82 0f       	add	r24, r18
    2fb2:	93 1f       	adc	r25, r19
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	90 81       	ld	r25, Z
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	98 17       	cp	r25, r24
    2fbc:	c9 f6       	brne	.-78     	; 0x2f70 <RS232_Send+0x22>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0=c[f++];
	}
	while ( !( UCSR0A & (1<<UDRE0)) );
    2fbe:	00 00       	nop
    2fc0:	80 ec       	ldi	r24, 0xC0	; 192
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	80 81       	ld	r24, Z
    2fc8:	88 2f       	mov	r24, r24
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	80 72       	andi	r24, 0x20	; 32
    2fce:	99 27       	eor	r25, r25
    2fd0:	89 2b       	or	r24, r25
    2fd2:	b1 f3       	breq	.-20     	; 0x2fc0 <RS232_Send+0x72>
	UDR0=endchar;
    2fd4:	86 ec       	ldi	r24, 0xC6	; 198
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	2d 81       	ldd	r18, Y+5	; 0x05
    2fda:	fc 01       	movw	r30, r24
    2fdc:	20 83       	st	Z, r18
    2fde:	01 c0       	rjmp	.+2      	; 0x2fe2 <RS232_Send+0x94>
}

void RS232_Send(const char *c, unsigned char endchar)
// Send command in C and return after the whole transmission
{
	if (c==NULL) return;
    2fe0:	00 00       	nop
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0=c[f++];
	}
	while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0=endchar;
}
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	df 91       	pop	r29
    2fee:	cf 91       	pop	r28
    2ff0:	08 95       	ret

00002ff2 <SRAMinitiate>:
					   // no real data is being transmitted.
			SRAMREAD(resp[f]);
		}
	}
	SRAMDISABLE;
}
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	84 e2       	ldi	r24, 0x24	; 36
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	24 e2       	ldi	r18, 0x24	; 36
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	f9 01       	movw	r30, r18
    3004:	20 81       	ld	r18, Z
    3006:	2f 7e       	andi	r18, 0xEF	; 239
    3008:	fc 01       	movw	r30, r24
    300a:	20 83       	st	Z, r18
    300c:	84 e2       	ldi	r24, 0x24	; 36
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	24 e2       	ldi	r18, 0x24	; 36
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	f9 01       	movw	r30, r18
    3016:	20 81       	ld	r18, Z
    3018:	28 62       	ori	r18, 0x28	; 40
    301a:	fc 01       	movw	r30, r24
    301c:	20 83       	st	Z, r18
    301e:	8a e2       	ldi	r24, 0x2A	; 42
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	2a e2       	ldi	r18, 0x2A	; 42
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	f9 01       	movw	r30, r18
    3028:	20 81       	ld	r18, Z
    302a:	28 60       	ori	r18, 0x08	; 8
    302c:	fc 01       	movw	r30, r24
    302e:	20 83       	st	Z, r18
    3030:	84 e2       	ldi	r24, 0x24	; 36
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	24 e2       	ldi	r18, 0x24	; 36
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	f9 01       	movw	r30, r18
    303a:	20 81       	ld	r18, Z
    303c:	24 60       	ori	r18, 0x04	; 4
    303e:	fc 01       	movw	r30, r24
    3040:	20 83       	st	Z, r18
    3042:	8b e2       	ldi	r24, 0x2B	; 43
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	2b e2       	ldi	r18, 0x2B	; 43
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	f9 01       	movw	r30, r18
    304c:	20 81       	ld	r18, Z
    304e:	28 60       	ori	r18, 0x08	; 8
    3050:	fc 01       	movw	r30, r24
    3052:	20 83       	st	Z, r18
    3054:	8c e4       	ldi	r24, 0x4C	; 76
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	2c e5       	ldi	r18, 0x5C	; 92
    305a:	fc 01       	movw	r30, r24
    305c:	20 83       	st	Z, r18
    305e:	8d e4       	ldi	r24, 0x4D	; 77
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	2d e4       	ldi	r18, 0x4D	; 77
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	f9 01       	movw	r30, r18
    3068:	20 81       	ld	r18, Z
    306a:	21 60       	ori	r18, 0x01	; 1
    306c:	fc 01       	movw	r30, r24
    306e:	20 83       	st	Z, r18
    3070:	00 00       	nop
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	08 95       	ret

00003078 <SRAMwriteblock>:

void SRAMwriteblock(unsigned address, const unsigned char *block,
					unsigned length)
// Write from ADDRESS up, LENGTH bytes taken from BLOCK
{
    3078:	af 92       	push	r10
    307a:	bf 92       	push	r11
    307c:	cf 92       	push	r12
    307e:	df 92       	push	r13
    3080:	ef 92       	push	r14
    3082:	ff 92       	push	r15
    3084:	cf 93       	push	r28
    3086:	df 93       	push	r29
    3088:	00 d0       	rcall	.+0      	; 0x308a <SRAMwriteblock+0x12>
    308a:	00 d0       	rcall	.+0      	; 0x308c <SRAMwriteblock+0x14>
    308c:	00 d0       	rcall	.+0      	; 0x308e <SRAMwriteblock+0x16>
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	9a 83       	std	Y+2, r25	; 0x02
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	7c 83       	std	Y+4, r23	; 0x04
    3098:	6b 83       	std	Y+3, r22	; 0x03
    309a:	5e 83       	std	Y+6, r21	; 0x06
    309c:	4d 83       	std	Y+5, r20	; 0x05
		"pop r28"		" \n\t"
		"pop r31"		" \n\t"
		"pop r30"		" \n\t"
		"pop r18"		" \n\t"
		::[_wrinstr] "M" (SRAMINSTR_WR),
		  [_lengthlow] "l" ((unsigned char)(length & 0xff)),
    309e:	2d 81       	ldd	r18, Y+5	; 0x05
		  [_lengthhigh] "l" ((unsigned char)(length >> 8)),
    30a0:	8d 81       	ldd	r24, Y+5	; 0x05
    30a2:	9e 81       	ldd	r25, Y+6	; 0x06
    30a4:	89 2f       	mov	r24, r25
    30a6:	99 27       	eor	r25, r25
    30a8:	48 2f       	mov	r20, r24
		  [_addresslow] "l" ((unsigned char)(address & 0xff)),
    30aa:	39 81       	ldd	r19, Y+1	; 0x01
		  [_addresshigh] "l" ((unsigned char)(address >> 8)),
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	89 2f       	mov	r24, r25
    30b2:	99 27       	eor	r25, r25
    30b4:	58 2f       	mov	r21, r24
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ba:	68 2f       	mov	r22, r24
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
    30bc:	8b 81       	ldd	r24, Y+3	; 0x03
    30be:	9c 81       	ldd	r25, Y+4	; 0x04
    30c0:	89 2f       	mov	r24, r25
    30c2:	99 27       	eor	r25, r25
	//
	// We assume a communication speed of 8MHz. That means that
	// transmitting a byte to the external sram takes 1microsec = 16 nops
	// The \n\t sequences are completely necessary; otherwise, the next
	// instruction will not be assembled.
	__asm__ __volatile__ (
    30c4:	a2 2e       	mov	r10, r18
    30c6:	b4 2e       	mov	r11, r20
    30c8:	c3 2e       	mov	r12, r19
    30ca:	d5 2e       	mov	r13, r21
    30cc:	e6 2e       	mov	r14, r22
    30ce:	f8 2e       	mov	r15, r24
    30d0:	2f 93       	push	r18
    30d2:	ef 93       	push	r30
    30d4:	ff 93       	push	r31
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	af 93       	push	r26
    30dc:	bf 93       	push	r27
    30de:	aa 2d       	mov	r26, r10
    30e0:	bb 2d       	mov	r27, r11
    30e2:	0b 2e       	mov	r0, r27
    30e4:	0a 2a       	or	r0, r26
    30e6:	09 f1       	breq	.+66     	; 0x312a <SRAMwriteblock_endsending>
    30e8:	ed e4       	ldi	r30, 0x4D	; 77
    30ea:	ff 27       	eor	r31, r31
    30ec:	5b 98       	cbi	0x0b, 3	; 11
    30ee:	22 e0       	ldi	r18, 0x02	; 2
    30f0:	2e bd       	out	0x2e, r18	; 46
    30f2:	0d 2c       	mov	r0, r13

000030f4 <SRAMwriteblock_wait1>:
    30f4:	20 81       	ld	r18, Z
    30f6:	27 fb       	bst	r18, 7
    30f8:	ee f7       	brtc	.-6      	; 0x30f4 <SRAMwriteblock_wait1>
    30fa:	2e b5       	in	r18, 0x2e	; 46
    30fc:	0e bc       	out	0x2e, r0	; 46
    30fe:	0c 2c       	mov	r0, r12

00003100 <SRAMwriteblock_wait2>:
    3100:	20 81       	ld	r18, Z
    3102:	27 fb       	bst	r18, 7
    3104:	ee f7       	brtc	.-6      	; 0x3100 <SRAMwriteblock_wait2>
    3106:	2e b5       	in	r18, 0x2e	; 46
    3108:	0e bc       	out	0x2e, r0	; 46

0000310a <SRAMwriteblock_wait3>:
    310a:	20 81       	ld	r18, Z
    310c:	27 fb       	bst	r18, 7
    310e:	ee f7       	brtc	.-6      	; 0x310a <SRAMwriteblock_wait3>
    3110:	2e b5       	in	r18, 0x2e	; 46
    3112:	ce 2d       	mov	r28, r14
    3114:	df 2d       	mov	r29, r15
    3116:	09 90       	ld	r0, Y+

00003118 <SRAMwriteblock_sending>:
    3118:	0e bc       	out	0x2e, r0	; 46
    311a:	09 90       	ld	r0, Y+

0000311c <SRAMwriteblock_wait4>:
    311c:	20 81       	ld	r18, Z
    311e:	27 fb       	bst	r18, 7
    3120:	ee f7       	brtc	.-6      	; 0x311c <SRAMwriteblock_wait4>
    3122:	2e b5       	in	r18, 0x2e	; 46
    3124:	11 97       	sbiw	r26, 0x01	; 1
    3126:	c1 f7       	brne	.-16     	; 0x3118 <SRAMwriteblock_sending>
    3128:	5b 9a       	sbi	0x0b, 3	; 11

0000312a <SRAMwriteblock_endsending>:
    312a:	bf 91       	pop	r27
    312c:	af 91       	pop	r26
    312e:	df 91       	pop	r29
    3130:	cf 91       	pop	r28
    3132:	ff 91       	pop	r31
    3134:	ef 91       	pop	r30
    3136:	2f 91       	pop	r18
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
	);

	#endif
}
    3138:	00 00       	nop
    313a:	26 96       	adiw	r28, 0x06	; 6
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	ff 90       	pop	r15
    314c:	ef 90       	pop	r14
    314e:	df 90       	pop	r13
    3150:	cf 90       	pop	r12
    3152:	bf 90       	pop	r11
    3154:	af 90       	pop	r10
    3156:	08 95       	ret

00003158 <SRAMreadblock>:

void SRAMreadblock(unsigned address, unsigned char *block, unsigned length)
{
    3158:	af 92       	push	r10
    315a:	bf 92       	push	r11
    315c:	cf 92       	push	r12
    315e:	df 92       	push	r13
    3160:	ef 92       	push	r14
    3162:	ff 92       	push	r15
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	00 d0       	rcall	.+0      	; 0x316a <SRAMreadblock+0x12>
    316a:	00 d0       	rcall	.+0      	; 0x316c <SRAMreadblock+0x14>
    316c:	00 d0       	rcall	.+0      	; 0x316e <SRAMreadblock+0x16>
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	9a 83       	std	Y+2, r25	; 0x02
    3174:	89 83       	std	Y+1, r24	; 0x01
    3176:	7c 83       	std	Y+4, r23	; 0x04
    3178:	6b 83       	std	Y+3, r22	; 0x03
    317a:	5e 83       	std	Y+6, r21	; 0x06
    317c:	4d 83       	std	Y+5, r20	; 0x05
		"pop r28"		" \n\t"
		"pop r31"		" \n\t"
		"pop r30"		" \n\t"
		"pop r18"		" \n\t"
	::[_rdinstr] "M" (SRAMINSTR_RD),
		  [_lengthlow] "l" ((unsigned char)(length & 0xff)),
    317e:	2d 81       	ldd	r18, Y+5	; 0x05
		  [_lengthhigh] "l" ((unsigned char)(length >> 8)),
    3180:	8d 81       	ldd	r24, Y+5	; 0x05
    3182:	9e 81       	ldd	r25, Y+6	; 0x06
    3184:	89 2f       	mov	r24, r25
    3186:	99 27       	eor	r25, r25
    3188:	48 2f       	mov	r20, r24
		  [_addresslow] "l" ((unsigned char)(address & 0xff)),
    318a:	39 81       	ldd	r19, Y+1	; 0x01
		  [_addresshigh] "l" ((unsigned char)(address >> 8)),
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	89 2f       	mov	r24, r25
    3192:	99 27       	eor	r25, r25
    3194:	58 2f       	mov	r21, r24
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	9c 81       	ldd	r25, Y+4	; 0x04
    319a:	68 2f       	mov	r22, r24
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	9c 81       	ldd	r25, Y+4	; 0x04
    31a0:	89 2f       	mov	r24, r25
    31a2:	99 27       	eor	r25, r25
		}
		SRAMDISABLE;

	#else

		__asm__ __volatile__ (
    31a4:	a2 2e       	mov	r10, r18
    31a6:	b4 2e       	mov	r11, r20
    31a8:	c3 2e       	mov	r12, r19
    31aa:	d5 2e       	mov	r13, r21
    31ac:	e6 2e       	mov	r14, r22
    31ae:	f8 2e       	mov	r15, r24
    31b0:	2f 93       	push	r18
    31b2:	ef 93       	push	r30
    31b4:	ff 93       	push	r31
    31b6:	cf 93       	push	r28
    31b8:	df 93       	push	r29
    31ba:	af 93       	push	r26
    31bc:	bf 93       	push	r27
    31be:	aa 2d       	mov	r26, r10
    31c0:	bb 2d       	mov	r27, r11
    31c2:	0a 2e       	mov	r0, r26
    31c4:	0b 2a       	or	r0, r27
    31c6:	39 f1       	breq	.+78     	; 0x3216 <SRAMreadblock_endreading>
    31c8:	ed e4       	ldi	r30, 0x4D	; 77
    31ca:	ff 27       	eor	r31, r31
    31cc:	5b 98       	cbi	0x0b, 3	; 11
    31ce:	23 e0       	ldi	r18, 0x03	; 3
    31d0:	2e bd       	out	0x2e, r18	; 46
    31d2:	0d 2c       	mov	r0, r13

000031d4 <SRAMreadblock_wait1>:
    31d4:	20 81       	ld	r18, Z
    31d6:	27 fb       	bst	r18, 7
    31d8:	ee f7       	brtc	.-6      	; 0x31d4 <SRAMreadblock_wait1>
    31da:	2e b5       	in	r18, 0x2e	; 46
    31dc:	0e bc       	out	0x2e, r0	; 46
    31de:	0c 2c       	mov	r0, r12

000031e0 <SRAMreadblock_wait2>:
    31e0:	20 81       	ld	r18, Z
    31e2:	27 fb       	bst	r18, 7
    31e4:	ee f7       	brtc	.-6      	; 0x31e0 <SRAMreadblock_wait2>
    31e6:	2e b5       	in	r18, 0x2e	; 46
    31e8:	0e bc       	out	0x2e, r0	; 46
    31ea:	2f ef       	ldi	r18, 0xFF	; 255
    31ec:	02 2e       	mov	r0, r18

000031ee <SRAMreadblock_wait3>:
    31ee:	20 81       	ld	r18, Z
    31f0:	27 fb       	bst	r18, 7
    31f2:	ee f7       	brtc	.-6      	; 0x31ee <SRAMreadblock_wait3>
    31f4:	2e b5       	in	r18, 0x2e	; 46
    31f6:	0e bc       	out	0x2e, r0	; 46
    31f8:	ce 2d       	mov	r28, r14
    31fa:	df 2d       	mov	r29, r15
    31fc:	2f ef       	ldi	r18, 0xFF	; 255

000031fe <SRAMreadblock_wait4>:
    31fe:	00 80       	ld	r0, Z
    3200:	07 fa       	bst	r0, 7
    3202:	ee f7       	brtc	.-6      	; 0x31fe <SRAMreadblock_wait4>
    3204:	0e b4       	in	r0, 0x2e	; 46
    3206:	2e bd       	out	0x2e, r18	; 46
    3208:	09 92       	st	Y+, r0
    320a:	11 97       	sbiw	r26, 0x01	; 1
    320c:	c1 f7       	brne	.-16     	; 0x31fe <SRAMreadblock_wait4>

0000320e <SRAMreadblock_wait5>:
    320e:	00 80       	ld	r0, Z
    3210:	07 fa       	bst	r0, 7
    3212:	ee f7       	brtc	.-6      	; 0x320e <SRAMreadblock_wait5>
    3214:	5b 9a       	sbi	0x0b, 3	; 11

00003216 <SRAMreadblock_endreading>:
    3216:	bf 91       	pop	r27
    3218:	af 91       	pop	r26
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	ff 91       	pop	r31
    3220:	ef 91       	pop	r30
    3222:	2f 91       	pop	r18
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
	);

	#endif
}
    3224:	00 00       	nop
    3226:	26 96       	adiw	r28, 0x06	; 6
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	ff 90       	pop	r15
    3238:	ef 90       	pop	r14
    323a:	df 90       	pop	r13
    323c:	cf 90       	pop	r12
    323e:	bf 90       	pop	r11
    3240:	af 90       	pop	r10
    3242:	08 95       	ret

00003244 <my_trace>:
//void my_trace(uint16_t tick, char tag,char userdata,char resource_id);
//void consumeCPU(unsigned char task_id, unsigned short ms);
//void InitHW();

void my_trace(uint16_t tick, char tag,char userdata,char resource_id)
{
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	28 97       	sbiw	r28, 0x08	; 8
    324e:	0f b6       	in	r0, 0x3f	; 63
    3250:	f8 94       	cli
    3252:	de bf       	out	0x3e, r29	; 62
    3254:	0f be       	out	0x3f, r0	; 63
    3256:	cd bf       	out	0x3d, r28	; 61
    3258:	9d 83       	std	Y+5, r25	; 0x05
    325a:	8c 83       	std	Y+4, r24	; 0x04
    325c:	6e 83       	std	Y+6, r22	; 0x06
    325e:	4f 83       	std	Y+7, r20	; 0x07
    3260:	28 87       	std	Y+8, r18	; 0x08
	static unsigned mem_pointer=0;
DigitalWrite(tag);
    3262:	8e 81       	ldd	r24, Y+6	; 0x06
    3264:	0e 94 ce 00 	call	0x19c	; 0x19c <DigitalWrite>
ev[0]=tick;
    3268:	8c 81       	ldd	r24, Y+4	; 0x04
    326a:	9d 81       	ldd	r25, Y+5	; 0x05
    326c:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <ev+0x1>
    3270:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <ev>
ev[1]=tag;
    3274:	8e 81       	ldd	r24, Y+6	; 0x06
    3276:	88 2f       	mov	r24, r24
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <ev+0x3>
    327e:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <ev+0x2>
ev[2]=userdata;
    3282:	8f 81       	ldd	r24, Y+7	; 0x07
    3284:	88 2f       	mov	r24, r24
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	90 93 c6 07 	sts	0x07C6, r25	; 0x8007c6 <ev+0x5>
    328c:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <ev+0x4>
ev[3]=resource_id;
    3290:	88 85       	ldd	r24, Y+8	; 0x08
    3292:	88 2f       	mov	r24, r24
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	90 93 c8 07 	sts	0x07C8, r25	; 0x8007c8 <ev+0x7>
    329a:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <ev+0x6>
SRAMwriteblock(mem_pointer,(unsigned char*)ev,8);
    329e:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2350>
    32a2:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2350+0x1>
    32a6:	48 e0       	ldi	r20, 0x08	; 8
    32a8:	50 e0       	ldi	r21, 0x00	; 0
    32aa:	61 ec       	ldi	r22, 0xC1	; 193
    32ac:	77 e0       	ldi	r23, 0x07	; 7
    32ae:	0e 94 3c 18 	call	0x3078	; 0x3078 <SRAMwriteblock>
mem_pointer+=8;
    32b2:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2350>
    32b6:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2350+0x1>
    32ba:	08 96       	adiw	r24, 0x08	; 8
    32bc:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <mem_pointer.2350+0x1>
    32c0:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <mem_pointer.2350>

if (mem_pointer>time2save)
    32c4:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2350>
    32c8:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2350+0x1>
    32cc:	81 32       	cpi	r24, 0x21	; 33
    32ce:	9e 44       	sbci	r25, 0x4E	; 78
    32d0:	08 f4       	brcc	.+2      	; 0x32d4 <my_trace+0x90>
    32d2:	4f c1       	rjmp	.+670    	; 0x3572 <my_trace+0x32e>
{	DigitalWrite(127);
    32d4:	8f e7       	ldi	r24, 0x7F	; 127
    32d6:	0e 94 ce 00 	call	0x19c	; 0x19c <DigitalWrite>
mem_pointer=0;
    32da:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mem_pointer.2350+0x1>
    32de:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <mem_pointer.2350>
//Starting
sprintf(trama,"INIT TRACE\r\n");
    32e2:	8d e0       	ldi	r24, 0x0D	; 13
    32e4:	e2 e2       	ldi	r30, 0x22	; 34
    32e6:	f1 e0       	ldi	r31, 0x01	; 1
    32e8:	a1 eb       	ldi	r26, 0xB1	; 177
    32ea:	b7 e0       	ldi	r27, 0x07	; 7
    32ec:	01 90       	ld	r0, Z+
    32ee:	0d 92       	st	X+, r0
    32f0:	8a 95       	dec	r24
    32f2:	e1 f7       	brne	.-8      	; 0x32ec <my_trace+0xa8>
RS232_Send(trama,'\r');
    32f4:	6d e0       	ldi	r22, 0x0D	; 13
    32f6:	81 eb       	ldi	r24, 0xB1	; 177
    32f8:	97 e0       	ldi	r25, 0x07	; 7
    32fa:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <RS232_Send>
//Write the number of tasks
sprintf(trama,"%u 0 0 0\r\n",num_tasks);
    32fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    3302:	88 2f       	mov	r24, r24
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	29 2f       	mov	r18, r25
    3308:	2f 93       	push	r18
    330a:	8f 93       	push	r24
    330c:	8f e2       	ldi	r24, 0x2F	; 47
    330e:	91 e0       	ldi	r25, 0x01	; 1
    3310:	89 2f       	mov	r24, r25
    3312:	8f 93       	push	r24
    3314:	8f e2       	ldi	r24, 0x2F	; 47
    3316:	91 e0       	ldi	r25, 0x01	; 1
    3318:	8f 93       	push	r24
    331a:	81 eb       	ldi	r24, 0xB1	; 177
    331c:	97 e0       	ldi	r25, 0x07	; 7
    331e:	89 2f       	mov	r24, r25
    3320:	8f 93       	push	r24
    3322:	81 eb       	ldi	r24, 0xB1	; 177
    3324:	97 e0       	ldi	r25, 0x07	; 7
    3326:	8f 93       	push	r24
    3328:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sprintf>
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
RS232_Send(trama,'\r');
    3338:	6d e0       	ldi	r22, 0x0D	; 13
    333a:	81 eb       	ldi	r24, 0xB1	; 177
    333c:	97 e0       	ldi	r25, 0x07	; 7
    333e:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <RS232_Send>
//Write the computation times: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    3342:	19 82       	std	Y+1, r1	; 0x01
    3344:	34 c0       	rjmp	.+104    	; 0x33ae <my_trace+0x16a>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,computationTime[q]);
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	88 2f       	mov	r24, r24
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	87 5f       	subi	r24, 0xF7	; 247
    3352:	9e 4f       	sbci	r25, 0xFE	; 254
    3354:	fc 01       	movw	r30, r24
    3356:	20 81       	ld	r18, Z
    3358:	31 81       	ldd	r19, Z+1	; 0x01
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	88 2f       	mov	r24, r24
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	01 96       	adiw	r24, 0x01	; 1
    3362:	43 2f       	mov	r20, r19
    3364:	4f 93       	push	r20
    3366:	2f 93       	push	r18
    3368:	29 2f       	mov	r18, r25
    336a:	2f 93       	push	r18
    336c:	8f 93       	push	r24
    336e:	8a e3       	ldi	r24, 0x3A	; 58
    3370:	91 e0       	ldi	r25, 0x01	; 1
    3372:	89 2f       	mov	r24, r25
    3374:	8f 93       	push	r24
    3376:	8a e3       	ldi	r24, 0x3A	; 58
    3378:	91 e0       	ldi	r25, 0x01	; 1
    337a:	8f 93       	push	r24
    337c:	81 eb       	ldi	r24, 0xB1	; 177
    337e:	97 e0       	ldi	r25, 0x07	; 7
    3380:	89 2f       	mov	r24, r25
    3382:	8f 93       	push	r24
    3384:	81 eb       	ldi	r24, 0xB1	; 177
    3386:	97 e0       	ldi	r25, 0x07	; 7
    3388:	8f 93       	push	r24
    338a:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sprintf>
    338e:	8d b7       	in	r24, 0x3d	; 61
    3390:	9e b7       	in	r25, 0x3e	; 62
    3392:	08 96       	adiw	r24, 0x08	; 8
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
RS232_Send(trama,'\r');
    339e:	6d e0       	ldi	r22, 0x0D	; 13
    33a0:	81 eb       	ldi	r24, 0xB1	; 177
    33a2:	97 e0       	ldi	r25, 0x07	; 7
    33a4:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <RS232_Send>
RS232_Send(trama,'\r');
//Write the number of tasks
sprintf(trama,"%u 0 0 0\r\n",num_tasks);
RS232_Send(trama,'\r');
//Write the computation times: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	8f 5f       	subi	r24, 0xFF	; 255
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    33b2:	99 81       	ldd	r25, Y+1	; 0x01
    33b4:	98 17       	cp	r25, r24
    33b6:	38 f2       	brcs	.-114    	; 0x3346 <my_trace+0x102>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,computationTime[q]);
RS232_Send(trama,'\r');
}
//Write the tasks' periods: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    33b8:	1a 82       	std	Y+2, r1	; 0x02
    33ba:	34 c0       	rjmp	.+104    	; 0x3424 <my_trace+0x1e0>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,taskPeriod[q]);
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	88 2f       	mov	r24, r24
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	88 0f       	add	r24, r24
    33c4:	99 1f       	adc	r25, r25
    33c6:	8d 5f       	subi	r24, 0xFD	; 253
    33c8:	9e 4f       	sbci	r25, 0xFE	; 254
    33ca:	fc 01       	movw	r30, r24
    33cc:	20 81       	ld	r18, Z
    33ce:	31 81       	ldd	r19, Z+1	; 0x01
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	88 2f       	mov	r24, r24
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	01 96       	adiw	r24, 0x01	; 1
    33d8:	43 2f       	mov	r20, r19
    33da:	4f 93       	push	r20
    33dc:	2f 93       	push	r18
    33de:	29 2f       	mov	r18, r25
    33e0:	2f 93       	push	r18
    33e2:	8f 93       	push	r24
    33e4:	8a e3       	ldi	r24, 0x3A	; 58
    33e6:	91 e0       	ldi	r25, 0x01	; 1
    33e8:	89 2f       	mov	r24, r25
    33ea:	8f 93       	push	r24
    33ec:	8a e3       	ldi	r24, 0x3A	; 58
    33ee:	91 e0       	ldi	r25, 0x01	; 1
    33f0:	8f 93       	push	r24
    33f2:	81 eb       	ldi	r24, 0xB1	; 177
    33f4:	97 e0       	ldi	r25, 0x07	; 7
    33f6:	89 2f       	mov	r24, r25
    33f8:	8f 93       	push	r24
    33fa:	81 eb       	ldi	r24, 0xB1	; 177
    33fc:	97 e0       	ldi	r25, 0x07	; 7
    33fe:	8f 93       	push	r24
    3400:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sprintf>
    3404:	8d b7       	in	r24, 0x3d	; 61
    3406:	9e b7       	in	r25, 0x3e	; 62
    3408:	08 96       	adiw	r24, 0x08	; 8
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
RS232_Send(trama,'\r');
    3414:	6d e0       	ldi	r22, 0x0D	; 13
    3416:	81 eb       	ldi	r24, 0xB1	; 177
    3418:	97 e0       	ldi	r25, 0x07	; 7
    341a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <RS232_Send>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,computationTime[q]);
RS232_Send(trama,'\r');
}
//Write the tasks' periods: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    341e:	8a 81       	ldd	r24, Y+2	; 0x02
    3420:	8f 5f       	subi	r24, 0xFF	; 255
    3422:	8a 83       	std	Y+2, r24	; 0x02
    3424:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    3428:	9a 81       	ldd	r25, Y+2	; 0x02
    342a:	98 17       	cp	r25, r24
    342c:	38 f2       	brcs	.-114    	; 0x33bc <my_trace+0x178>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,taskPeriod[q]);
RS232_Send(trama,'\r');
}
//Write the first activation: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    342e:	1b 82       	std	Y+3, r1	; 0x03
    3430:	34 c0       	rjmp	.+104    	; 0x349a <my_trace+0x256>
{
	sprintf(trama,"%u %u 0 0\r\n",q+1,start[q]);
    3432:	8b 81       	ldd	r24, Y+3	; 0x03
    3434:	88 2f       	mov	r24, r24
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	88 56       	subi	r24, 0x68	; 104
    343e:	98 4f       	sbci	r25, 0xF8	; 248
    3440:	fc 01       	movw	r30, r24
    3442:	20 81       	ld	r18, Z
    3444:	31 81       	ldd	r19, Z+1	; 0x01
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	88 2f       	mov	r24, r24
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	01 96       	adiw	r24, 0x01	; 1
    344e:	43 2f       	mov	r20, r19
    3450:	4f 93       	push	r20
    3452:	2f 93       	push	r18
    3454:	29 2f       	mov	r18, r25
    3456:	2f 93       	push	r18
    3458:	8f 93       	push	r24
    345a:	8a e3       	ldi	r24, 0x3A	; 58
    345c:	91 e0       	ldi	r25, 0x01	; 1
    345e:	89 2f       	mov	r24, r25
    3460:	8f 93       	push	r24
    3462:	8a e3       	ldi	r24, 0x3A	; 58
    3464:	91 e0       	ldi	r25, 0x01	; 1
    3466:	8f 93       	push	r24
    3468:	81 eb       	ldi	r24, 0xB1	; 177
    346a:	97 e0       	ldi	r25, 0x07	; 7
    346c:	89 2f       	mov	r24, r25
    346e:	8f 93       	push	r24
    3470:	81 eb       	ldi	r24, 0xB1	; 177
    3472:	97 e0       	ldi	r25, 0x07	; 7
    3474:	8f 93       	push	r24
    3476:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sprintf>
    347a:	8d b7       	in	r24, 0x3d	; 61
    347c:	9e b7       	in	r25, 0x3e	; 62
    347e:	08 96       	adiw	r24, 0x08	; 8
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
	RS232_Send(trama,'\r');
    348a:	6d e0       	ldi	r22, 0x0D	; 13
    348c:	81 eb       	ldi	r24, 0xB1	; 177
    348e:	97 e0       	ldi	r25, 0x07	; 7
    3490:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <RS232_Send>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,taskPeriod[q]);
RS232_Send(trama,'\r');
}
//Write the first activation: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	8f 5f       	subi	r24, 0xFF	; 255
    3498:	8b 83       	std	Y+3, r24	; 0x03
    349a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    349e:	9b 81       	ldd	r25, Y+3	; 0x03
    34a0:	98 17       	cp	r25, r24
    34a2:	38 f2       	brcs	.-114    	; 0x3432 <my_trace+0x1ee>
{
	sprintf(trama,"%u %u 0 0\r\n",q+1,start[q]);
	RS232_Send(trama,'\r');
}
//read from memory and send through rs232
while (mem_pointer<time2save)
    34a4:	4c c0       	rjmp	.+152    	; 0x353e <my_trace+0x2fa>
{
SRAMreadblock(mem_pointer,(unsigned char*)ev,8);
    34a6:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2350>
    34aa:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2350+0x1>
    34ae:	48 e0       	ldi	r20, 0x08	; 8
    34b0:	50 e0       	ldi	r21, 0x00	; 0
    34b2:	61 ec       	ldi	r22, 0xC1	; 193
    34b4:	77 e0       	ldi	r23, 0x07	; 7
    34b6:	0e 94 ac 18 	call	0x3158	; 0x3158 <SRAMreadblock>
sprintf(trama,"%u %u %u %u\r\n",ev[0],ev[1],ev[2],ev[3]);
    34ba:	60 91 c7 07 	lds	r22, 0x07C7	; 0x8007c7 <ev+0x6>
    34be:	70 91 c8 07 	lds	r23, 0x07C8	; 0x8007c8 <ev+0x7>
    34c2:	40 91 c5 07 	lds	r20, 0x07C5	; 0x8007c5 <ev+0x4>
    34c6:	50 91 c6 07 	lds	r21, 0x07C6	; 0x8007c6 <ev+0x5>
    34ca:	20 91 c3 07 	lds	r18, 0x07C3	; 0x8007c3 <ev+0x2>
    34ce:	30 91 c4 07 	lds	r19, 0x07C4	; 0x8007c4 <ev+0x3>
    34d2:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <ev>
    34d6:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <ev+0x1>
    34da:	e7 2f       	mov	r30, r23
    34dc:	ef 93       	push	r30
    34de:	6f 93       	push	r22
    34e0:	65 2f       	mov	r22, r21
    34e2:	6f 93       	push	r22
    34e4:	4f 93       	push	r20
    34e6:	43 2f       	mov	r20, r19
    34e8:	4f 93       	push	r20
    34ea:	2f 93       	push	r18
    34ec:	29 2f       	mov	r18, r25
    34ee:	2f 93       	push	r18
    34f0:	8f 93       	push	r24
    34f2:	86 e4       	ldi	r24, 0x46	; 70
    34f4:	91 e0       	ldi	r25, 0x01	; 1
    34f6:	89 2f       	mov	r24, r25
    34f8:	8f 93       	push	r24
    34fa:	86 e4       	ldi	r24, 0x46	; 70
    34fc:	91 e0       	ldi	r25, 0x01	; 1
    34fe:	8f 93       	push	r24
    3500:	81 eb       	ldi	r24, 0xB1	; 177
    3502:	97 e0       	ldi	r25, 0x07	; 7
    3504:	89 2f       	mov	r24, r25
    3506:	8f 93       	push	r24
    3508:	81 eb       	ldi	r24, 0xB1	; 177
    350a:	97 e0       	ldi	r25, 0x07	; 7
    350c:	8f 93       	push	r24
    350e:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sprintf>
    3512:	ed b7       	in	r30, 0x3d	; 61
    3514:	fe b7       	in	r31, 0x3e	; 62
    3516:	3c 96       	adiw	r30, 0x0c	; 12
    3518:	0f b6       	in	r0, 0x3f	; 63
    351a:	f8 94       	cli
    351c:	de bf       	out	0x3e, r29	; 62
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	cd bf       	out	0x3d, r28	; 61
RS232_Send(trama,'\r');
    3522:	6d e0       	ldi	r22, 0x0D	; 13
    3524:	81 eb       	ldi	r24, 0xB1	; 177
    3526:	97 e0       	ldi	r25, 0x07	; 7
    3528:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <RS232_Send>
mem_pointer+=8;
    352c:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2350>
    3530:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2350+0x1>
    3534:	08 96       	adiw	r24, 0x08	; 8
    3536:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <mem_pointer.2350+0x1>
    353a:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <mem_pointer.2350>
{
	sprintf(trama,"%u %u 0 0\r\n",q+1,start[q]);
	RS232_Send(trama,'\r');
}
//read from memory and send through rs232
while (mem_pointer<time2save)
    353e:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2350>
    3542:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2350+0x1>
    3546:	80 32       	cpi	r24, 0x20	; 32
    3548:	9e 44       	sbci	r25, 0x4E	; 78
    354a:	08 f4       	brcc	.+2      	; 0x354e <my_trace+0x30a>
    354c:	ac cf       	rjmp	.-168    	; 0x34a6 <my_trace+0x262>
SRAMreadblock(mem_pointer,(unsigned char*)ev,8);
sprintf(trama,"%u %u %u %u\r\n",ev[0],ev[1],ev[2],ev[3]);
RS232_Send(trama,'\r');
mem_pointer+=8;
}
sprintf(trama,"END TRACE\r\n");
    354e:	8c e0       	ldi	r24, 0x0C	; 12
    3550:	e4 e5       	ldi	r30, 0x54	; 84
    3552:	f1 e0       	ldi	r31, 0x01	; 1
    3554:	a1 eb       	ldi	r26, 0xB1	; 177
    3556:	b7 e0       	ldi	r27, 0x07	; 7
    3558:	01 90       	ld	r0, Z+
    355a:	0d 92       	st	X+, r0
    355c:	8a 95       	dec	r24
    355e:	e1 f7       	brne	.-8      	; 0x3558 <my_trace+0x314>
RS232_Send(trama,'\r');
    3560:	6d e0       	ldi	r22, 0x0D	; 13
    3562:	81 eb       	ldi	r24, 0xB1	; 177
    3564:	97 e0       	ldi	r25, 0x07	; 7
    3566:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <RS232_Send>
mem_pointer=0;
    356a:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mem_pointer.2350+0x1>
    356e:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <mem_pointer.2350>

}


}
    3572:	00 00       	nop
    3574:	28 96       	adiw	r28, 0x08	; 8
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	08 95       	ret

00003586 <consumeCPU>:


void consumeCPU(unsigned char task_id, unsigned short ms)
{
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	29 97       	sbiw	r28, 0x09	; 9
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	8f 83       	std	Y+7, r24	; 0x07
    359c:	79 87       	std	Y+9, r23	; 0x09
    359e:	68 87       	std	Y+8, r22	; 0x08
TickType_t current_load=0;
    35a0:	1a 82       	std	Y+2, r1	; 0x02
    35a2:	19 82       	std	Y+1, r1	; 0x01
TickType_t last_tick=0;
    35a4:	1c 82       	std	Y+4, r1	; 0x04
    35a6:	1b 82       	std	Y+3, r1	; 0x03
last_tick=xTaskGetTickCount();
    35a8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    35ac:	9c 83       	std	Y+4, r25	; 0x04
    35ae:	8b 83       	std	Y+3, r24	; 0x03
TickType_t tick;

if (task_id!=0 && current_load==0)
    35b0:	8f 81       	ldd	r24, Y+7	; 0x07
    35b2:	88 23       	and	r24, r24
    35b4:	71 f1       	breq	.+92     	; 0x3612 <consumeCPU+0x8c>
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	89 2b       	or	r24, r25
    35bc:	51 f5       	brne	.+84     	; 0x3612 <consumeCPU+0x8c>
{	ev[0]=last_tick;
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	9c 81       	ldd	r25, Y+4	; 0x04
    35c2:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <ev+0x1>
    35c6:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <ev>
ev[1]=10+task_id;
    35ca:	8f 81       	ldd	r24, Y+7	; 0x07
    35cc:	88 2f       	mov	r24, r24
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	0a 96       	adiw	r24, 0x0a	; 10
    35d2:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <ev+0x3>
    35d6:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <ev+0x2>
my_trace(last_tick,task_id,10,0);
    35da:	8b 81       	ldd	r24, Y+3	; 0x03
    35dc:	9c 81       	ldd	r25, Y+4	; 0x04
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	4a e0       	ldi	r20, 0x0A	; 10
    35e2:	6f 81       	ldd	r22, Y+7	; 0x07
    35e4:	0e 94 22 19 	call	0x3244	; 0x3244 <my_trace>
}
while (current_load<ms)
    35e8:	14 c0       	rjmp	.+40     	; 0x3612 <consumeCPU+0x8c>
{
tick=xTaskGetTickCount();
    35ea:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskGetTickCount>
    35ee:	9e 83       	std	Y+6, r25	; 0x06
    35f0:	8d 83       	std	Y+5, r24	; 0x05
if (last_tick!=tick)
    35f2:	2b 81       	ldd	r18, Y+3	; 0x03
    35f4:	3c 81       	ldd	r19, Y+4	; 0x04
    35f6:	8d 81       	ldd	r24, Y+5	; 0x05
    35f8:	9e 81       	ldd	r25, Y+6	; 0x06
    35fa:	28 17       	cp	r18, r24
    35fc:	39 07       	cpc	r19, r25
    35fe:	49 f0       	breq	.+18     	; 0x3612 <consumeCPU+0x8c>
{
current_load++;
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	9a 81       	ldd	r25, Y+2	; 0x02
    3604:	01 96       	adiw	r24, 0x01	; 1
    3606:	9a 83       	std	Y+2, r25	; 0x02
    3608:	89 83       	std	Y+1, r24	; 0x01
last_tick=tick;
    360a:	8d 81       	ldd	r24, Y+5	; 0x05
    360c:	9e 81       	ldd	r25, Y+6	; 0x06
    360e:	9c 83       	std	Y+4, r25	; 0x04
    3610:	8b 83       	std	Y+3, r24	; 0x03
if (task_id!=0 && current_load==0)
{	ev[0]=last_tick;
ev[1]=10+task_id;
my_trace(last_tick,task_id,10,0);
}
while (current_load<ms)
    3612:	29 81       	ldd	r18, Y+1	; 0x01
    3614:	3a 81       	ldd	r19, Y+2	; 0x02
    3616:	88 85       	ldd	r24, Y+8	; 0x08
    3618:	99 85       	ldd	r25, Y+9	; 0x09
    361a:	28 17       	cp	r18, r24
    361c:	39 07       	cpc	r19, r25
    361e:	28 f3       	brcs	.-54     	; 0x35ea <consumeCPU+0x64>
{
current_load++;
last_tick=tick;
}
}
current_load=0;
    3620:	1a 82       	std	Y+2, r1	; 0x02
    3622:	19 82       	std	Y+1, r1	; 0x01
}
    3624:	00 00       	nop
    3626:	29 96       	adiw	r28, 0x09	; 9
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	08 95       	ret

00003638 <InitHW>:

void InitHW()
{
    3638:	cf 93       	push	r28
    363a:	df 93       	push	r29
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
// Initialize HW
cli();
    3640:	f8 94       	cli
SRAMinitiate();
    3642:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <SRAMinitiate>
DigitalInit();
    3646:	0e 94 53 00 	call	0xa6	; 0xa6 <DigitalInit>
RS232_Init(NULL,16,'\r');
    364a:	4d e0       	ldi	r20, 0x0D	; 13
    364c:	60 e1       	ldi	r22, 0x10	; 16
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <RS232_Init>

sei();
    3656:	78 94       	sei
}
    3658:	00 00       	nop
    365a:	df 91       	pop	r29
    365c:	cf 91       	pop	r28
    365e:	08 95       	ret

00003660 <__divsf3>:
    3660:	0e 94 44 1b 	call	0x3688	; 0x3688 <__divsf3x>
    3664:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__fp_round>
    3668:	0e 94 25 1c 	call	0x384a	; 0x384a <__fp_pscB>
    366c:	58 f0       	brcs	.+22     	; 0x3684 <__divsf3+0x24>
    366e:	0e 94 1e 1c 	call	0x383c	; 0x383c <__fp_pscA>
    3672:	40 f0       	brcs	.+16     	; 0x3684 <__divsf3+0x24>
    3674:	29 f4       	brne	.+10     	; 0x3680 <__divsf3+0x20>
    3676:	5f 3f       	cpi	r21, 0xFF	; 255
    3678:	29 f0       	breq	.+10     	; 0x3684 <__divsf3+0x24>
    367a:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__fp_inf>
    367e:	51 11       	cpse	r21, r1
    3680:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__fp_szero>
    3684:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_nan>

00003688 <__divsf3x>:
    3688:	0e 94 3d 1c 	call	0x387a	; 0x387a <__fp_split3>
    368c:	68 f3       	brcs	.-38     	; 0x3668 <__divsf3+0x8>

0000368e <__divsf3_pse>:
    368e:	99 23       	and	r25, r25
    3690:	b1 f3       	breq	.-20     	; 0x367e <__divsf3+0x1e>
    3692:	55 23       	and	r21, r21
    3694:	91 f3       	breq	.-28     	; 0x367a <__divsf3+0x1a>
    3696:	95 1b       	sub	r25, r21
    3698:	55 0b       	sbc	r21, r21
    369a:	bb 27       	eor	r27, r27
    369c:	aa 27       	eor	r26, r26
    369e:	62 17       	cp	r22, r18
    36a0:	73 07       	cpc	r23, r19
    36a2:	84 07       	cpc	r24, r20
    36a4:	38 f0       	brcs	.+14     	; 0x36b4 <__divsf3_pse+0x26>
    36a6:	9f 5f       	subi	r25, 0xFF	; 255
    36a8:	5f 4f       	sbci	r21, 0xFF	; 255
    36aa:	22 0f       	add	r18, r18
    36ac:	33 1f       	adc	r19, r19
    36ae:	44 1f       	adc	r20, r20
    36b0:	aa 1f       	adc	r26, r26
    36b2:	a9 f3       	breq	.-22     	; 0x369e <__divsf3_pse+0x10>
    36b4:	35 d0       	rcall	.+106    	; 0x3720 <__divsf3_pse+0x92>
    36b6:	0e 2e       	mov	r0, r30
    36b8:	3a f0       	brmi	.+14     	; 0x36c8 <__divsf3_pse+0x3a>
    36ba:	e0 e8       	ldi	r30, 0x80	; 128
    36bc:	32 d0       	rcall	.+100    	; 0x3722 <__divsf3_pse+0x94>
    36be:	91 50       	subi	r25, 0x01	; 1
    36c0:	50 40       	sbci	r21, 0x00	; 0
    36c2:	e6 95       	lsr	r30
    36c4:	00 1c       	adc	r0, r0
    36c6:	ca f7       	brpl	.-14     	; 0x36ba <__divsf3_pse+0x2c>
    36c8:	2b d0       	rcall	.+86     	; 0x3720 <__divsf3_pse+0x92>
    36ca:	fe 2f       	mov	r31, r30
    36cc:	29 d0       	rcall	.+82     	; 0x3720 <__divsf3_pse+0x92>
    36ce:	66 0f       	add	r22, r22
    36d0:	77 1f       	adc	r23, r23
    36d2:	88 1f       	adc	r24, r24
    36d4:	bb 1f       	adc	r27, r27
    36d6:	26 17       	cp	r18, r22
    36d8:	37 07       	cpc	r19, r23
    36da:	48 07       	cpc	r20, r24
    36dc:	ab 07       	cpc	r26, r27
    36de:	b0 e8       	ldi	r27, 0x80	; 128
    36e0:	09 f0       	breq	.+2      	; 0x36e4 <__divsf3_pse+0x56>
    36e2:	bb 0b       	sbc	r27, r27
    36e4:	80 2d       	mov	r24, r0
    36e6:	bf 01       	movw	r22, r30
    36e8:	ff 27       	eor	r31, r31
    36ea:	93 58       	subi	r25, 0x83	; 131
    36ec:	5f 4f       	sbci	r21, 0xFF	; 255
    36ee:	3a f0       	brmi	.+14     	; 0x36fe <__divsf3_pse+0x70>
    36f0:	9e 3f       	cpi	r25, 0xFE	; 254
    36f2:	51 05       	cpc	r21, r1
    36f4:	78 f0       	brcs	.+30     	; 0x3714 <__divsf3_pse+0x86>
    36f6:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__fp_inf>
    36fa:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__fp_szero>
    36fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3700:	e4 f3       	brlt	.-8      	; 0x36fa <__divsf3_pse+0x6c>
    3702:	98 3e       	cpi	r25, 0xE8	; 232
    3704:	d4 f3       	brlt	.-12     	; 0x36fa <__divsf3_pse+0x6c>
    3706:	86 95       	lsr	r24
    3708:	77 95       	ror	r23
    370a:	67 95       	ror	r22
    370c:	b7 95       	ror	r27
    370e:	f7 95       	ror	r31
    3710:	9f 5f       	subi	r25, 0xFF	; 255
    3712:	c9 f7       	brne	.-14     	; 0x3706 <__divsf3_pse+0x78>
    3714:	88 0f       	add	r24, r24
    3716:	91 1d       	adc	r25, r1
    3718:	96 95       	lsr	r25
    371a:	87 95       	ror	r24
    371c:	97 f9       	bld	r25, 7
    371e:	08 95       	ret
    3720:	e1 e0       	ldi	r30, 0x01	; 1
    3722:	66 0f       	add	r22, r22
    3724:	77 1f       	adc	r23, r23
    3726:	88 1f       	adc	r24, r24
    3728:	bb 1f       	adc	r27, r27
    372a:	62 17       	cp	r22, r18
    372c:	73 07       	cpc	r23, r19
    372e:	84 07       	cpc	r24, r20
    3730:	ba 07       	cpc	r27, r26
    3732:	20 f0       	brcs	.+8      	; 0x373c <__divsf3_pse+0xae>
    3734:	62 1b       	sub	r22, r18
    3736:	73 0b       	sbc	r23, r19
    3738:	84 0b       	sbc	r24, r20
    373a:	ba 0b       	sbc	r27, r26
    373c:	ee 1f       	adc	r30, r30
    373e:	88 f7       	brcc	.-30     	; 0x3722 <__divsf3_pse+0x94>
    3740:	e0 95       	com	r30
    3742:	08 95       	ret

00003744 <__fixsfsi>:
    3744:	0e 94 a9 1b 	call	0x3752	; 0x3752 <__fixunssfsi>
    3748:	68 94       	set
    374a:	b1 11       	cpse	r27, r1
    374c:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__fp_szero>
    3750:	08 95       	ret

00003752 <__fixunssfsi>:
    3752:	0e 94 45 1c 	call	0x388a	; 0x388a <__fp_splitA>
    3756:	88 f0       	brcs	.+34     	; 0x377a <__fixunssfsi+0x28>
    3758:	9f 57       	subi	r25, 0x7F	; 127
    375a:	98 f0       	brcs	.+38     	; 0x3782 <__fixunssfsi+0x30>
    375c:	b9 2f       	mov	r27, r25
    375e:	99 27       	eor	r25, r25
    3760:	b7 51       	subi	r27, 0x17	; 23
    3762:	b0 f0       	brcs	.+44     	; 0x3790 <__fixunssfsi+0x3e>
    3764:	e1 f0       	breq	.+56     	; 0x379e <__fixunssfsi+0x4c>
    3766:	66 0f       	add	r22, r22
    3768:	77 1f       	adc	r23, r23
    376a:	88 1f       	adc	r24, r24
    376c:	99 1f       	adc	r25, r25
    376e:	1a f0       	brmi	.+6      	; 0x3776 <__fixunssfsi+0x24>
    3770:	ba 95       	dec	r27
    3772:	c9 f7       	brne	.-14     	; 0x3766 <__fixunssfsi+0x14>
    3774:	14 c0       	rjmp	.+40     	; 0x379e <__fixunssfsi+0x4c>
    3776:	b1 30       	cpi	r27, 0x01	; 1
    3778:	91 f0       	breq	.+36     	; 0x379e <__fixunssfsi+0x4c>
    377a:	0e 94 5f 1c 	call	0x38be	; 0x38be <__fp_zero>
    377e:	b1 e0       	ldi	r27, 0x01	; 1
    3780:	08 95       	ret
    3782:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <__fp_zero>
    3786:	67 2f       	mov	r22, r23
    3788:	78 2f       	mov	r23, r24
    378a:	88 27       	eor	r24, r24
    378c:	b8 5f       	subi	r27, 0xF8	; 248
    378e:	39 f0       	breq	.+14     	; 0x379e <__fixunssfsi+0x4c>
    3790:	b9 3f       	cpi	r27, 0xF9	; 249
    3792:	cc f3       	brlt	.-14     	; 0x3786 <__fixunssfsi+0x34>
    3794:	86 95       	lsr	r24
    3796:	77 95       	ror	r23
    3798:	67 95       	ror	r22
    379a:	b3 95       	inc	r27
    379c:	d9 f7       	brne	.-10     	; 0x3794 <__fixunssfsi+0x42>
    379e:	3e f4       	brtc	.+14     	; 0x37ae <__fixunssfsi+0x5c>
    37a0:	90 95       	com	r25
    37a2:	80 95       	com	r24
    37a4:	70 95       	com	r23
    37a6:	61 95       	neg	r22
    37a8:	7f 4f       	sbci	r23, 0xFF	; 255
    37aa:	8f 4f       	sbci	r24, 0xFF	; 255
    37ac:	9f 4f       	sbci	r25, 0xFF	; 255
    37ae:	08 95       	ret

000037b0 <__floatunsisf>:
    37b0:	e8 94       	clt
    37b2:	09 c0       	rjmp	.+18     	; 0x37c6 <__floatsisf+0x12>

000037b4 <__floatsisf>:
    37b4:	97 fb       	bst	r25, 7
    37b6:	3e f4       	brtc	.+14     	; 0x37c6 <__floatsisf+0x12>
    37b8:	90 95       	com	r25
    37ba:	80 95       	com	r24
    37bc:	70 95       	com	r23
    37be:	61 95       	neg	r22
    37c0:	7f 4f       	sbci	r23, 0xFF	; 255
    37c2:	8f 4f       	sbci	r24, 0xFF	; 255
    37c4:	9f 4f       	sbci	r25, 0xFF	; 255
    37c6:	99 23       	and	r25, r25
    37c8:	a9 f0       	breq	.+42     	; 0x37f4 <__floatsisf+0x40>
    37ca:	f9 2f       	mov	r31, r25
    37cc:	96 e9       	ldi	r25, 0x96	; 150
    37ce:	bb 27       	eor	r27, r27
    37d0:	93 95       	inc	r25
    37d2:	f6 95       	lsr	r31
    37d4:	87 95       	ror	r24
    37d6:	77 95       	ror	r23
    37d8:	67 95       	ror	r22
    37da:	b7 95       	ror	r27
    37dc:	f1 11       	cpse	r31, r1
    37de:	f8 cf       	rjmp	.-16     	; 0x37d0 <__floatsisf+0x1c>
    37e0:	fa f4       	brpl	.+62     	; 0x3820 <__floatsisf+0x6c>
    37e2:	bb 0f       	add	r27, r27
    37e4:	11 f4       	brne	.+4      	; 0x37ea <__floatsisf+0x36>
    37e6:	60 ff       	sbrs	r22, 0
    37e8:	1b c0       	rjmp	.+54     	; 0x3820 <__floatsisf+0x6c>
    37ea:	6f 5f       	subi	r22, 0xFF	; 255
    37ec:	7f 4f       	sbci	r23, 0xFF	; 255
    37ee:	8f 4f       	sbci	r24, 0xFF	; 255
    37f0:	9f 4f       	sbci	r25, 0xFF	; 255
    37f2:	16 c0       	rjmp	.+44     	; 0x3820 <__floatsisf+0x6c>
    37f4:	88 23       	and	r24, r24
    37f6:	11 f0       	breq	.+4      	; 0x37fc <__floatsisf+0x48>
    37f8:	96 e9       	ldi	r25, 0x96	; 150
    37fa:	11 c0       	rjmp	.+34     	; 0x381e <__floatsisf+0x6a>
    37fc:	77 23       	and	r23, r23
    37fe:	21 f0       	breq	.+8      	; 0x3808 <__floatsisf+0x54>
    3800:	9e e8       	ldi	r25, 0x8E	; 142
    3802:	87 2f       	mov	r24, r23
    3804:	76 2f       	mov	r23, r22
    3806:	05 c0       	rjmp	.+10     	; 0x3812 <__floatsisf+0x5e>
    3808:	66 23       	and	r22, r22
    380a:	71 f0       	breq	.+28     	; 0x3828 <__floatsisf+0x74>
    380c:	96 e8       	ldi	r25, 0x86	; 134
    380e:	86 2f       	mov	r24, r22
    3810:	70 e0       	ldi	r23, 0x00	; 0
    3812:	60 e0       	ldi	r22, 0x00	; 0
    3814:	2a f0       	brmi	.+10     	; 0x3820 <__floatsisf+0x6c>
    3816:	9a 95       	dec	r25
    3818:	66 0f       	add	r22, r22
    381a:	77 1f       	adc	r23, r23
    381c:	88 1f       	adc	r24, r24
    381e:	da f7       	brpl	.-10     	; 0x3816 <__floatsisf+0x62>
    3820:	88 0f       	add	r24, r24
    3822:	96 95       	lsr	r25
    3824:	87 95       	ror	r24
    3826:	97 f9       	bld	r25, 7
    3828:	08 95       	ret

0000382a <__fp_inf>:
    382a:	97 f9       	bld	r25, 7
    382c:	9f 67       	ori	r25, 0x7F	; 127
    382e:	80 e8       	ldi	r24, 0x80	; 128
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	60 e0       	ldi	r22, 0x00	; 0
    3834:	08 95       	ret

00003836 <__fp_nan>:
    3836:	9f ef       	ldi	r25, 0xFF	; 255
    3838:	80 ec       	ldi	r24, 0xC0	; 192
    383a:	08 95       	ret

0000383c <__fp_pscA>:
    383c:	00 24       	eor	r0, r0
    383e:	0a 94       	dec	r0
    3840:	16 16       	cp	r1, r22
    3842:	17 06       	cpc	r1, r23
    3844:	18 06       	cpc	r1, r24
    3846:	09 06       	cpc	r0, r25
    3848:	08 95       	ret

0000384a <__fp_pscB>:
    384a:	00 24       	eor	r0, r0
    384c:	0a 94       	dec	r0
    384e:	12 16       	cp	r1, r18
    3850:	13 06       	cpc	r1, r19
    3852:	14 06       	cpc	r1, r20
    3854:	05 06       	cpc	r0, r21
    3856:	08 95       	ret

00003858 <__fp_round>:
    3858:	09 2e       	mov	r0, r25
    385a:	03 94       	inc	r0
    385c:	00 0c       	add	r0, r0
    385e:	11 f4       	brne	.+4      	; 0x3864 <__fp_round+0xc>
    3860:	88 23       	and	r24, r24
    3862:	52 f0       	brmi	.+20     	; 0x3878 <__fp_round+0x20>
    3864:	bb 0f       	add	r27, r27
    3866:	40 f4       	brcc	.+16     	; 0x3878 <__fp_round+0x20>
    3868:	bf 2b       	or	r27, r31
    386a:	11 f4       	brne	.+4      	; 0x3870 <__fp_round+0x18>
    386c:	60 ff       	sbrs	r22, 0
    386e:	04 c0       	rjmp	.+8      	; 0x3878 <__fp_round+0x20>
    3870:	6f 5f       	subi	r22, 0xFF	; 255
    3872:	7f 4f       	sbci	r23, 0xFF	; 255
    3874:	8f 4f       	sbci	r24, 0xFF	; 255
    3876:	9f 4f       	sbci	r25, 0xFF	; 255
    3878:	08 95       	ret

0000387a <__fp_split3>:
    387a:	57 fd       	sbrc	r21, 7
    387c:	90 58       	subi	r25, 0x80	; 128
    387e:	44 0f       	add	r20, r20
    3880:	55 1f       	adc	r21, r21
    3882:	59 f0       	breq	.+22     	; 0x389a <__fp_splitA+0x10>
    3884:	5f 3f       	cpi	r21, 0xFF	; 255
    3886:	71 f0       	breq	.+28     	; 0x38a4 <__fp_splitA+0x1a>
    3888:	47 95       	ror	r20

0000388a <__fp_splitA>:
    388a:	88 0f       	add	r24, r24
    388c:	97 fb       	bst	r25, 7
    388e:	99 1f       	adc	r25, r25
    3890:	61 f0       	breq	.+24     	; 0x38aa <__fp_splitA+0x20>
    3892:	9f 3f       	cpi	r25, 0xFF	; 255
    3894:	79 f0       	breq	.+30     	; 0x38b4 <__fp_splitA+0x2a>
    3896:	87 95       	ror	r24
    3898:	08 95       	ret
    389a:	12 16       	cp	r1, r18
    389c:	13 06       	cpc	r1, r19
    389e:	14 06       	cpc	r1, r20
    38a0:	55 1f       	adc	r21, r21
    38a2:	f2 cf       	rjmp	.-28     	; 0x3888 <__fp_split3+0xe>
    38a4:	46 95       	lsr	r20
    38a6:	f1 df       	rcall	.-30     	; 0x388a <__fp_splitA>
    38a8:	08 c0       	rjmp	.+16     	; 0x38ba <__fp_splitA+0x30>
    38aa:	16 16       	cp	r1, r22
    38ac:	17 06       	cpc	r1, r23
    38ae:	18 06       	cpc	r1, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	f1 cf       	rjmp	.-30     	; 0x3896 <__fp_splitA+0xc>
    38b4:	86 95       	lsr	r24
    38b6:	71 05       	cpc	r23, r1
    38b8:	61 05       	cpc	r22, r1
    38ba:	08 94       	sec
    38bc:	08 95       	ret

000038be <__fp_zero>:
    38be:	e8 94       	clt

000038c0 <__fp_szero>:
    38c0:	bb 27       	eor	r27, r27
    38c2:	66 27       	eor	r22, r22
    38c4:	77 27       	eor	r23, r23
    38c6:	cb 01       	movw	r24, r22
    38c8:	97 f9       	bld	r25, 7
    38ca:	08 95       	ret

000038cc <memcpy>:
    38cc:	fb 01       	movw	r30, r22
    38ce:	dc 01       	movw	r26, r24
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <memcpy+0xa>
    38d2:	01 90       	ld	r0, Z+
    38d4:	0d 92       	st	X+, r0
    38d6:	41 50       	subi	r20, 0x01	; 1
    38d8:	50 40       	sbci	r21, 0x00	; 0
    38da:	d8 f7       	brcc	.-10     	; 0x38d2 <memcpy+0x6>
    38dc:	08 95       	ret

000038de <memset>:
    38de:	dc 01       	movw	r26, r24
    38e0:	01 c0       	rjmp	.+2      	; 0x38e4 <memset+0x6>
    38e2:	6d 93       	st	X+, r22
    38e4:	41 50       	subi	r20, 0x01	; 1
    38e6:	50 40       	sbci	r21, 0x00	; 0
    38e8:	e0 f7       	brcc	.-8      	; 0x38e2 <memset+0x4>
    38ea:	08 95       	ret

000038ec <sprintf>:
    38ec:	ae e0       	ldi	r26, 0x0E	; 14
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	ec e7       	ldi	r30, 0x7C	; 124
    38f2:	fc e1       	ldi	r31, 0x1C	; 28
    38f4:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <__prologue_saves__+0x1c>
    38f8:	0d 89       	ldd	r16, Y+21	; 0x15
    38fa:	1e 89       	ldd	r17, Y+22	; 0x16
    38fc:	86 e0       	ldi	r24, 0x06	; 6
    38fe:	8c 83       	std	Y+4, r24	; 0x04
    3900:	1a 83       	std	Y+2, r17	; 0x02
    3902:	09 83       	std	Y+1, r16	; 0x01
    3904:	8f ef       	ldi	r24, 0xFF	; 255
    3906:	9f e7       	ldi	r25, 0x7F	; 127
    3908:	9e 83       	std	Y+6, r25	; 0x06
    390a:	8d 83       	std	Y+5, r24	; 0x05
    390c:	ae 01       	movw	r20, r28
    390e:	47 5e       	subi	r20, 0xE7	; 231
    3910:	5f 4f       	sbci	r21, 0xFF	; 255
    3912:	6f 89       	ldd	r22, Y+23	; 0x17
    3914:	78 8d       	ldd	r23, Y+24	; 0x18
    3916:	ce 01       	movw	r24, r28
    3918:	01 96       	adiw	r24, 0x01	; 1
    391a:	0e 94 98 1c 	call	0x3930	; 0x3930 <vfprintf>
    391e:	ef 81       	ldd	r30, Y+7	; 0x07
    3920:	f8 85       	ldd	r31, Y+8	; 0x08
    3922:	e0 0f       	add	r30, r16
    3924:	f1 1f       	adc	r31, r17
    3926:	10 82       	st	Z, r1
    3928:	2e 96       	adiw	r28, 0x0e	; 14
    392a:	e4 e0       	ldi	r30, 0x04	; 4
    392c:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <__epilogue_restores__+0x1c>

00003930 <vfprintf>:
    3930:	ab e0       	ldi	r26, 0x0B	; 11
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	ee e9       	ldi	r30, 0x9E	; 158
    3936:	fc e1       	ldi	r31, 0x1C	; 28
    3938:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__>
    393c:	6c 01       	movw	r12, r24
    393e:	7b 01       	movw	r14, r22
    3940:	8a 01       	movw	r16, r20
    3942:	fc 01       	movw	r30, r24
    3944:	17 82       	std	Z+7, r1	; 0x07
    3946:	16 82       	std	Z+6, r1	; 0x06
    3948:	83 81       	ldd	r24, Z+3	; 0x03
    394a:	81 ff       	sbrs	r24, 1
    394c:	cc c1       	rjmp	.+920    	; 0x3ce6 <vfprintf+0x3b6>
    394e:	ce 01       	movw	r24, r28
    3950:	01 96       	adiw	r24, 0x01	; 1
    3952:	3c 01       	movw	r6, r24
    3954:	f6 01       	movw	r30, r12
    3956:	93 81       	ldd	r25, Z+3	; 0x03
    3958:	f7 01       	movw	r30, r14
    395a:	93 fd       	sbrc	r25, 3
    395c:	85 91       	lpm	r24, Z+
    395e:	93 ff       	sbrs	r25, 3
    3960:	81 91       	ld	r24, Z+
    3962:	7f 01       	movw	r14, r30
    3964:	88 23       	and	r24, r24
    3966:	09 f4       	brne	.+2      	; 0x396a <vfprintf+0x3a>
    3968:	ba c1       	rjmp	.+884    	; 0x3cde <vfprintf+0x3ae>
    396a:	85 32       	cpi	r24, 0x25	; 37
    396c:	39 f4       	brne	.+14     	; 0x397c <vfprintf+0x4c>
    396e:	93 fd       	sbrc	r25, 3
    3970:	85 91       	lpm	r24, Z+
    3972:	93 ff       	sbrs	r25, 3
    3974:	81 91       	ld	r24, Z+
    3976:	7f 01       	movw	r14, r30
    3978:	85 32       	cpi	r24, 0x25	; 37
    397a:	29 f4       	brne	.+10     	; 0x3986 <vfprintf+0x56>
    397c:	b6 01       	movw	r22, r12
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <fputc>
    3984:	e7 cf       	rjmp	.-50     	; 0x3954 <vfprintf+0x24>
    3986:	91 2c       	mov	r9, r1
    3988:	21 2c       	mov	r2, r1
    398a:	31 2c       	mov	r3, r1
    398c:	ff e1       	ldi	r31, 0x1F	; 31
    398e:	f3 15       	cp	r31, r3
    3990:	d8 f0       	brcs	.+54     	; 0x39c8 <vfprintf+0x98>
    3992:	8b 32       	cpi	r24, 0x2B	; 43
    3994:	79 f0       	breq	.+30     	; 0x39b4 <vfprintf+0x84>
    3996:	38 f4       	brcc	.+14     	; 0x39a6 <vfprintf+0x76>
    3998:	80 32       	cpi	r24, 0x20	; 32
    399a:	79 f0       	breq	.+30     	; 0x39ba <vfprintf+0x8a>
    399c:	83 32       	cpi	r24, 0x23	; 35
    399e:	a1 f4       	brne	.+40     	; 0x39c8 <vfprintf+0x98>
    39a0:	23 2d       	mov	r18, r3
    39a2:	20 61       	ori	r18, 0x10	; 16
    39a4:	1d c0       	rjmp	.+58     	; 0x39e0 <vfprintf+0xb0>
    39a6:	8d 32       	cpi	r24, 0x2D	; 45
    39a8:	61 f0       	breq	.+24     	; 0x39c2 <vfprintf+0x92>
    39aa:	80 33       	cpi	r24, 0x30	; 48
    39ac:	69 f4       	brne	.+26     	; 0x39c8 <vfprintf+0x98>
    39ae:	23 2d       	mov	r18, r3
    39b0:	21 60       	ori	r18, 0x01	; 1
    39b2:	16 c0       	rjmp	.+44     	; 0x39e0 <vfprintf+0xb0>
    39b4:	83 2d       	mov	r24, r3
    39b6:	82 60       	ori	r24, 0x02	; 2
    39b8:	38 2e       	mov	r3, r24
    39ba:	e3 2d       	mov	r30, r3
    39bc:	e4 60       	ori	r30, 0x04	; 4
    39be:	3e 2e       	mov	r3, r30
    39c0:	2a c0       	rjmp	.+84     	; 0x3a16 <vfprintf+0xe6>
    39c2:	f3 2d       	mov	r31, r3
    39c4:	f8 60       	ori	r31, 0x08	; 8
    39c6:	1d c0       	rjmp	.+58     	; 0x3a02 <vfprintf+0xd2>
    39c8:	37 fc       	sbrc	r3, 7
    39ca:	2d c0       	rjmp	.+90     	; 0x3a26 <vfprintf+0xf6>
    39cc:	20 ed       	ldi	r18, 0xD0	; 208
    39ce:	28 0f       	add	r18, r24
    39d0:	2a 30       	cpi	r18, 0x0A	; 10
    39d2:	40 f0       	brcs	.+16     	; 0x39e4 <vfprintf+0xb4>
    39d4:	8e 32       	cpi	r24, 0x2E	; 46
    39d6:	b9 f4       	brne	.+46     	; 0x3a06 <vfprintf+0xd6>
    39d8:	36 fc       	sbrc	r3, 6
    39da:	81 c1       	rjmp	.+770    	; 0x3cde <vfprintf+0x3ae>
    39dc:	23 2d       	mov	r18, r3
    39de:	20 64       	ori	r18, 0x40	; 64
    39e0:	32 2e       	mov	r3, r18
    39e2:	19 c0       	rjmp	.+50     	; 0x3a16 <vfprintf+0xe6>
    39e4:	36 fe       	sbrs	r3, 6
    39e6:	06 c0       	rjmp	.+12     	; 0x39f4 <vfprintf+0xc4>
    39e8:	8a e0       	ldi	r24, 0x0A	; 10
    39ea:	98 9e       	mul	r9, r24
    39ec:	20 0d       	add	r18, r0
    39ee:	11 24       	eor	r1, r1
    39f0:	92 2e       	mov	r9, r18
    39f2:	11 c0       	rjmp	.+34     	; 0x3a16 <vfprintf+0xe6>
    39f4:	ea e0       	ldi	r30, 0x0A	; 10
    39f6:	2e 9e       	mul	r2, r30
    39f8:	20 0d       	add	r18, r0
    39fa:	11 24       	eor	r1, r1
    39fc:	22 2e       	mov	r2, r18
    39fe:	f3 2d       	mov	r31, r3
    3a00:	f0 62       	ori	r31, 0x20	; 32
    3a02:	3f 2e       	mov	r3, r31
    3a04:	08 c0       	rjmp	.+16     	; 0x3a16 <vfprintf+0xe6>
    3a06:	8c 36       	cpi	r24, 0x6C	; 108
    3a08:	21 f4       	brne	.+8      	; 0x3a12 <vfprintf+0xe2>
    3a0a:	83 2d       	mov	r24, r3
    3a0c:	80 68       	ori	r24, 0x80	; 128
    3a0e:	38 2e       	mov	r3, r24
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <vfprintf+0xe6>
    3a12:	88 36       	cpi	r24, 0x68	; 104
    3a14:	41 f4       	brne	.+16     	; 0x3a26 <vfprintf+0xf6>
    3a16:	f7 01       	movw	r30, r14
    3a18:	93 fd       	sbrc	r25, 3
    3a1a:	85 91       	lpm	r24, Z+
    3a1c:	93 ff       	sbrs	r25, 3
    3a1e:	81 91       	ld	r24, Z+
    3a20:	7f 01       	movw	r14, r30
    3a22:	81 11       	cpse	r24, r1
    3a24:	b3 cf       	rjmp	.-154    	; 0x398c <vfprintf+0x5c>
    3a26:	98 2f       	mov	r25, r24
    3a28:	9f 7d       	andi	r25, 0xDF	; 223
    3a2a:	95 54       	subi	r25, 0x45	; 69
    3a2c:	93 30       	cpi	r25, 0x03	; 3
    3a2e:	28 f4       	brcc	.+10     	; 0x3a3a <vfprintf+0x10a>
    3a30:	0c 5f       	subi	r16, 0xFC	; 252
    3a32:	1f 4f       	sbci	r17, 0xFF	; 255
    3a34:	9f e3       	ldi	r25, 0x3F	; 63
    3a36:	99 83       	std	Y+1, r25	; 0x01
    3a38:	0d c0       	rjmp	.+26     	; 0x3a54 <vfprintf+0x124>
    3a3a:	83 36       	cpi	r24, 0x63	; 99
    3a3c:	31 f0       	breq	.+12     	; 0x3a4a <vfprintf+0x11a>
    3a3e:	83 37       	cpi	r24, 0x73	; 115
    3a40:	71 f0       	breq	.+28     	; 0x3a5e <vfprintf+0x12e>
    3a42:	83 35       	cpi	r24, 0x53	; 83
    3a44:	09 f0       	breq	.+2      	; 0x3a48 <vfprintf+0x118>
    3a46:	59 c0       	rjmp	.+178    	; 0x3afa <vfprintf+0x1ca>
    3a48:	21 c0       	rjmp	.+66     	; 0x3a8c <vfprintf+0x15c>
    3a4a:	f8 01       	movw	r30, r16
    3a4c:	80 81       	ld	r24, Z
    3a4e:	89 83       	std	Y+1, r24	; 0x01
    3a50:	0e 5f       	subi	r16, 0xFE	; 254
    3a52:	1f 4f       	sbci	r17, 0xFF	; 255
    3a54:	88 24       	eor	r8, r8
    3a56:	83 94       	inc	r8
    3a58:	91 2c       	mov	r9, r1
    3a5a:	53 01       	movw	r10, r6
    3a5c:	13 c0       	rjmp	.+38     	; 0x3a84 <vfprintf+0x154>
    3a5e:	28 01       	movw	r4, r16
    3a60:	f2 e0       	ldi	r31, 0x02	; 2
    3a62:	4f 0e       	add	r4, r31
    3a64:	51 1c       	adc	r5, r1
    3a66:	f8 01       	movw	r30, r16
    3a68:	a0 80       	ld	r10, Z
    3a6a:	b1 80       	ldd	r11, Z+1	; 0x01
    3a6c:	36 fe       	sbrs	r3, 6
    3a6e:	03 c0       	rjmp	.+6      	; 0x3a76 <vfprintf+0x146>
    3a70:	69 2d       	mov	r22, r9
    3a72:	70 e0       	ldi	r23, 0x00	; 0
    3a74:	02 c0       	rjmp	.+4      	; 0x3a7a <vfprintf+0x14a>
    3a76:	6f ef       	ldi	r22, 0xFF	; 255
    3a78:	7f ef       	ldi	r23, 0xFF	; 255
    3a7a:	c5 01       	movw	r24, r10
    3a7c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <strnlen>
    3a80:	4c 01       	movw	r8, r24
    3a82:	82 01       	movw	r16, r4
    3a84:	f3 2d       	mov	r31, r3
    3a86:	ff 77       	andi	r31, 0x7F	; 127
    3a88:	3f 2e       	mov	r3, r31
    3a8a:	16 c0       	rjmp	.+44     	; 0x3ab8 <vfprintf+0x188>
    3a8c:	28 01       	movw	r4, r16
    3a8e:	22 e0       	ldi	r18, 0x02	; 2
    3a90:	42 0e       	add	r4, r18
    3a92:	51 1c       	adc	r5, r1
    3a94:	f8 01       	movw	r30, r16
    3a96:	a0 80       	ld	r10, Z
    3a98:	b1 80       	ldd	r11, Z+1	; 0x01
    3a9a:	36 fe       	sbrs	r3, 6
    3a9c:	03 c0       	rjmp	.+6      	; 0x3aa4 <vfprintf+0x174>
    3a9e:	69 2d       	mov	r22, r9
    3aa0:	70 e0       	ldi	r23, 0x00	; 0
    3aa2:	02 c0       	rjmp	.+4      	; 0x3aa8 <vfprintf+0x178>
    3aa4:	6f ef       	ldi	r22, 0xFF	; 255
    3aa6:	7f ef       	ldi	r23, 0xFF	; 255
    3aa8:	c5 01       	movw	r24, r10
    3aaa:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <strnlen_P>
    3aae:	4c 01       	movw	r8, r24
    3ab0:	f3 2d       	mov	r31, r3
    3ab2:	f0 68       	ori	r31, 0x80	; 128
    3ab4:	3f 2e       	mov	r3, r31
    3ab6:	82 01       	movw	r16, r4
    3ab8:	33 fc       	sbrc	r3, 3
    3aba:	1b c0       	rjmp	.+54     	; 0x3af2 <vfprintf+0x1c2>
    3abc:	82 2d       	mov	r24, r2
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	88 16       	cp	r8, r24
    3ac2:	99 06       	cpc	r9, r25
    3ac4:	b0 f4       	brcc	.+44     	; 0x3af2 <vfprintf+0x1c2>
    3ac6:	b6 01       	movw	r22, r12
    3ac8:	80 e2       	ldi	r24, 0x20	; 32
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <fputc>
    3ad0:	2a 94       	dec	r2
    3ad2:	f4 cf       	rjmp	.-24     	; 0x3abc <vfprintf+0x18c>
    3ad4:	f5 01       	movw	r30, r10
    3ad6:	37 fc       	sbrc	r3, 7
    3ad8:	85 91       	lpm	r24, Z+
    3ada:	37 fe       	sbrs	r3, 7
    3adc:	81 91       	ld	r24, Z+
    3ade:	5f 01       	movw	r10, r30
    3ae0:	b6 01       	movw	r22, r12
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <fputc>
    3ae8:	21 10       	cpse	r2, r1
    3aea:	2a 94       	dec	r2
    3aec:	21 e0       	ldi	r18, 0x01	; 1
    3aee:	82 1a       	sub	r8, r18
    3af0:	91 08       	sbc	r9, r1
    3af2:	81 14       	cp	r8, r1
    3af4:	91 04       	cpc	r9, r1
    3af6:	71 f7       	brne	.-36     	; 0x3ad4 <vfprintf+0x1a4>
    3af8:	e8 c0       	rjmp	.+464    	; 0x3cca <vfprintf+0x39a>
    3afa:	84 36       	cpi	r24, 0x64	; 100
    3afc:	11 f0       	breq	.+4      	; 0x3b02 <vfprintf+0x1d2>
    3afe:	89 36       	cpi	r24, 0x69	; 105
    3b00:	41 f5       	brne	.+80     	; 0x3b52 <vfprintf+0x222>
    3b02:	f8 01       	movw	r30, r16
    3b04:	37 fe       	sbrs	r3, 7
    3b06:	07 c0       	rjmp	.+14     	; 0x3b16 <vfprintf+0x1e6>
    3b08:	60 81       	ld	r22, Z
    3b0a:	71 81       	ldd	r23, Z+1	; 0x01
    3b0c:	82 81       	ldd	r24, Z+2	; 0x02
    3b0e:	93 81       	ldd	r25, Z+3	; 0x03
    3b10:	0c 5f       	subi	r16, 0xFC	; 252
    3b12:	1f 4f       	sbci	r17, 0xFF	; 255
    3b14:	08 c0       	rjmp	.+16     	; 0x3b26 <vfprintf+0x1f6>
    3b16:	60 81       	ld	r22, Z
    3b18:	71 81       	ldd	r23, Z+1	; 0x01
    3b1a:	07 2e       	mov	r0, r23
    3b1c:	00 0c       	add	r0, r0
    3b1e:	88 0b       	sbc	r24, r24
    3b20:	99 0b       	sbc	r25, r25
    3b22:	0e 5f       	subi	r16, 0xFE	; 254
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	f3 2d       	mov	r31, r3
    3b28:	ff 76       	andi	r31, 0x6F	; 111
    3b2a:	3f 2e       	mov	r3, r31
    3b2c:	97 ff       	sbrs	r25, 7
    3b2e:	09 c0       	rjmp	.+18     	; 0x3b42 <vfprintf+0x212>
    3b30:	90 95       	com	r25
    3b32:	80 95       	com	r24
    3b34:	70 95       	com	r23
    3b36:	61 95       	neg	r22
    3b38:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3e:	f0 68       	ori	r31, 0x80	; 128
    3b40:	3f 2e       	mov	r3, r31
    3b42:	2a e0       	ldi	r18, 0x0A	; 10
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	a3 01       	movw	r20, r6
    3b48:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__ultoa_invert>
    3b4c:	88 2e       	mov	r8, r24
    3b4e:	86 18       	sub	r8, r6
    3b50:	45 c0       	rjmp	.+138    	; 0x3bdc <vfprintf+0x2ac>
    3b52:	85 37       	cpi	r24, 0x75	; 117
    3b54:	31 f4       	brne	.+12     	; 0x3b62 <vfprintf+0x232>
    3b56:	23 2d       	mov	r18, r3
    3b58:	2f 7e       	andi	r18, 0xEF	; 239
    3b5a:	b2 2e       	mov	r11, r18
    3b5c:	2a e0       	ldi	r18, 0x0A	; 10
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	25 c0       	rjmp	.+74     	; 0x3bac <vfprintf+0x27c>
    3b62:	93 2d       	mov	r25, r3
    3b64:	99 7f       	andi	r25, 0xF9	; 249
    3b66:	b9 2e       	mov	r11, r25
    3b68:	8f 36       	cpi	r24, 0x6F	; 111
    3b6a:	c1 f0       	breq	.+48     	; 0x3b9c <vfprintf+0x26c>
    3b6c:	18 f4       	brcc	.+6      	; 0x3b74 <vfprintf+0x244>
    3b6e:	88 35       	cpi	r24, 0x58	; 88
    3b70:	79 f0       	breq	.+30     	; 0x3b90 <vfprintf+0x260>
    3b72:	b5 c0       	rjmp	.+362    	; 0x3cde <vfprintf+0x3ae>
    3b74:	80 37       	cpi	r24, 0x70	; 112
    3b76:	19 f0       	breq	.+6      	; 0x3b7e <vfprintf+0x24e>
    3b78:	88 37       	cpi	r24, 0x78	; 120
    3b7a:	21 f0       	breq	.+8      	; 0x3b84 <vfprintf+0x254>
    3b7c:	b0 c0       	rjmp	.+352    	; 0x3cde <vfprintf+0x3ae>
    3b7e:	e9 2f       	mov	r30, r25
    3b80:	e0 61       	ori	r30, 0x10	; 16
    3b82:	be 2e       	mov	r11, r30
    3b84:	b4 fe       	sbrs	r11, 4
    3b86:	0d c0       	rjmp	.+26     	; 0x3ba2 <vfprintf+0x272>
    3b88:	fb 2d       	mov	r31, r11
    3b8a:	f4 60       	ori	r31, 0x04	; 4
    3b8c:	bf 2e       	mov	r11, r31
    3b8e:	09 c0       	rjmp	.+18     	; 0x3ba2 <vfprintf+0x272>
    3b90:	34 fe       	sbrs	r3, 4
    3b92:	0a c0       	rjmp	.+20     	; 0x3ba8 <vfprintf+0x278>
    3b94:	29 2f       	mov	r18, r25
    3b96:	26 60       	ori	r18, 0x06	; 6
    3b98:	b2 2e       	mov	r11, r18
    3b9a:	06 c0       	rjmp	.+12     	; 0x3ba8 <vfprintf+0x278>
    3b9c:	28 e0       	ldi	r18, 0x08	; 8
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	05 c0       	rjmp	.+10     	; 0x3bac <vfprintf+0x27c>
    3ba2:	20 e1       	ldi	r18, 0x10	; 16
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <vfprintf+0x27c>
    3ba8:	20 e1       	ldi	r18, 0x10	; 16
    3baa:	32 e0       	ldi	r19, 0x02	; 2
    3bac:	f8 01       	movw	r30, r16
    3bae:	b7 fe       	sbrs	r11, 7
    3bb0:	07 c0       	rjmp	.+14     	; 0x3bc0 <vfprintf+0x290>
    3bb2:	60 81       	ld	r22, Z
    3bb4:	71 81       	ldd	r23, Z+1	; 0x01
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	93 81       	ldd	r25, Z+3	; 0x03
    3bba:	0c 5f       	subi	r16, 0xFC	; 252
    3bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bbe:	06 c0       	rjmp	.+12     	; 0x3bcc <vfprintf+0x29c>
    3bc0:	60 81       	ld	r22, Z
    3bc2:	71 81       	ldd	r23, Z+1	; 0x01
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	0e 5f       	subi	r16, 0xFE	; 254
    3bca:	1f 4f       	sbci	r17, 0xFF	; 255
    3bcc:	a3 01       	movw	r20, r6
    3bce:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__ultoa_invert>
    3bd2:	88 2e       	mov	r8, r24
    3bd4:	86 18       	sub	r8, r6
    3bd6:	fb 2d       	mov	r31, r11
    3bd8:	ff 77       	andi	r31, 0x7F	; 127
    3bda:	3f 2e       	mov	r3, r31
    3bdc:	36 fe       	sbrs	r3, 6
    3bde:	0d c0       	rjmp	.+26     	; 0x3bfa <vfprintf+0x2ca>
    3be0:	23 2d       	mov	r18, r3
    3be2:	2e 7f       	andi	r18, 0xFE	; 254
    3be4:	a2 2e       	mov	r10, r18
    3be6:	89 14       	cp	r8, r9
    3be8:	58 f4       	brcc	.+22     	; 0x3c00 <vfprintf+0x2d0>
    3bea:	34 fe       	sbrs	r3, 4
    3bec:	0b c0       	rjmp	.+22     	; 0x3c04 <vfprintf+0x2d4>
    3bee:	32 fc       	sbrc	r3, 2
    3bf0:	09 c0       	rjmp	.+18     	; 0x3c04 <vfprintf+0x2d4>
    3bf2:	83 2d       	mov	r24, r3
    3bf4:	8e 7e       	andi	r24, 0xEE	; 238
    3bf6:	a8 2e       	mov	r10, r24
    3bf8:	05 c0       	rjmp	.+10     	; 0x3c04 <vfprintf+0x2d4>
    3bfa:	b8 2c       	mov	r11, r8
    3bfc:	a3 2c       	mov	r10, r3
    3bfe:	03 c0       	rjmp	.+6      	; 0x3c06 <vfprintf+0x2d6>
    3c00:	b8 2c       	mov	r11, r8
    3c02:	01 c0       	rjmp	.+2      	; 0x3c06 <vfprintf+0x2d6>
    3c04:	b9 2c       	mov	r11, r9
    3c06:	a4 fe       	sbrs	r10, 4
    3c08:	0f c0       	rjmp	.+30     	; 0x3c28 <vfprintf+0x2f8>
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	e8 0d       	add	r30, r8
    3c0e:	f1 1d       	adc	r31, r1
    3c10:	80 81       	ld	r24, Z
    3c12:	80 33       	cpi	r24, 0x30	; 48
    3c14:	21 f4       	brne	.+8      	; 0x3c1e <vfprintf+0x2ee>
    3c16:	9a 2d       	mov	r25, r10
    3c18:	99 7e       	andi	r25, 0xE9	; 233
    3c1a:	a9 2e       	mov	r10, r25
    3c1c:	09 c0       	rjmp	.+18     	; 0x3c30 <vfprintf+0x300>
    3c1e:	a2 fe       	sbrs	r10, 2
    3c20:	06 c0       	rjmp	.+12     	; 0x3c2e <vfprintf+0x2fe>
    3c22:	b3 94       	inc	r11
    3c24:	b3 94       	inc	r11
    3c26:	04 c0       	rjmp	.+8      	; 0x3c30 <vfprintf+0x300>
    3c28:	8a 2d       	mov	r24, r10
    3c2a:	86 78       	andi	r24, 0x86	; 134
    3c2c:	09 f0       	breq	.+2      	; 0x3c30 <vfprintf+0x300>
    3c2e:	b3 94       	inc	r11
    3c30:	a3 fc       	sbrc	r10, 3
    3c32:	11 c0       	rjmp	.+34     	; 0x3c56 <vfprintf+0x326>
    3c34:	a0 fe       	sbrs	r10, 0
    3c36:	06 c0       	rjmp	.+12     	; 0x3c44 <vfprintf+0x314>
    3c38:	b2 14       	cp	r11, r2
    3c3a:	88 f4       	brcc	.+34     	; 0x3c5e <vfprintf+0x32e>
    3c3c:	28 0c       	add	r2, r8
    3c3e:	92 2c       	mov	r9, r2
    3c40:	9b 18       	sub	r9, r11
    3c42:	0e c0       	rjmp	.+28     	; 0x3c60 <vfprintf+0x330>
    3c44:	b2 14       	cp	r11, r2
    3c46:	60 f4       	brcc	.+24     	; 0x3c60 <vfprintf+0x330>
    3c48:	b6 01       	movw	r22, r12
    3c4a:	80 e2       	ldi	r24, 0x20	; 32
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <fputc>
    3c52:	b3 94       	inc	r11
    3c54:	f7 cf       	rjmp	.-18     	; 0x3c44 <vfprintf+0x314>
    3c56:	b2 14       	cp	r11, r2
    3c58:	18 f4       	brcc	.+6      	; 0x3c60 <vfprintf+0x330>
    3c5a:	2b 18       	sub	r2, r11
    3c5c:	02 c0       	rjmp	.+4      	; 0x3c62 <vfprintf+0x332>
    3c5e:	98 2c       	mov	r9, r8
    3c60:	21 2c       	mov	r2, r1
    3c62:	a4 fe       	sbrs	r10, 4
    3c64:	10 c0       	rjmp	.+32     	; 0x3c86 <vfprintf+0x356>
    3c66:	b6 01       	movw	r22, r12
    3c68:	80 e3       	ldi	r24, 0x30	; 48
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <fputc>
    3c70:	a2 fe       	sbrs	r10, 2
    3c72:	17 c0       	rjmp	.+46     	; 0x3ca2 <vfprintf+0x372>
    3c74:	a1 fc       	sbrc	r10, 1
    3c76:	03 c0       	rjmp	.+6      	; 0x3c7e <vfprintf+0x34e>
    3c78:	88 e7       	ldi	r24, 0x78	; 120
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	02 c0       	rjmp	.+4      	; 0x3c82 <vfprintf+0x352>
    3c7e:	88 e5       	ldi	r24, 0x58	; 88
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	b6 01       	movw	r22, r12
    3c84:	0c c0       	rjmp	.+24     	; 0x3c9e <vfprintf+0x36e>
    3c86:	8a 2d       	mov	r24, r10
    3c88:	86 78       	andi	r24, 0x86	; 134
    3c8a:	59 f0       	breq	.+22     	; 0x3ca2 <vfprintf+0x372>
    3c8c:	a1 fe       	sbrs	r10, 1
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <vfprintf+0x364>
    3c90:	8b e2       	ldi	r24, 0x2B	; 43
    3c92:	01 c0       	rjmp	.+2      	; 0x3c96 <vfprintf+0x366>
    3c94:	80 e2       	ldi	r24, 0x20	; 32
    3c96:	a7 fc       	sbrc	r10, 7
    3c98:	8d e2       	ldi	r24, 0x2D	; 45
    3c9a:	b6 01       	movw	r22, r12
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <fputc>
    3ca2:	89 14       	cp	r8, r9
    3ca4:	38 f4       	brcc	.+14     	; 0x3cb4 <vfprintf+0x384>
    3ca6:	b6 01       	movw	r22, r12
    3ca8:	80 e3       	ldi	r24, 0x30	; 48
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <fputc>
    3cb0:	9a 94       	dec	r9
    3cb2:	f7 cf       	rjmp	.-18     	; 0x3ca2 <vfprintf+0x372>
    3cb4:	8a 94       	dec	r8
    3cb6:	f3 01       	movw	r30, r6
    3cb8:	e8 0d       	add	r30, r8
    3cba:	f1 1d       	adc	r31, r1
    3cbc:	80 81       	ld	r24, Z
    3cbe:	b6 01       	movw	r22, r12
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <fputc>
    3cc6:	81 10       	cpse	r8, r1
    3cc8:	f5 cf       	rjmp	.-22     	; 0x3cb4 <vfprintf+0x384>
    3cca:	22 20       	and	r2, r2
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <vfprintf+0x3a0>
    3cce:	42 ce       	rjmp	.-892    	; 0x3954 <vfprintf+0x24>
    3cd0:	b6 01       	movw	r22, r12
    3cd2:	80 e2       	ldi	r24, 0x20	; 32
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <fputc>
    3cda:	2a 94       	dec	r2
    3cdc:	f6 cf       	rjmp	.-20     	; 0x3cca <vfprintf+0x39a>
    3cde:	f6 01       	movw	r30, r12
    3ce0:	86 81       	ldd	r24, Z+6	; 0x06
    3ce2:	97 81       	ldd	r25, Z+7	; 0x07
    3ce4:	02 c0       	rjmp	.+4      	; 0x3cea <vfprintf+0x3ba>
    3ce6:	8f ef       	ldi	r24, 0xFF	; 255
    3ce8:	9f ef       	ldi	r25, 0xFF	; 255
    3cea:	2b 96       	adiw	r28, 0x0b	; 11
    3cec:	e2 e1       	ldi	r30, 0x12	; 18
    3cee:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__>

00003cf2 <strnlen_P>:
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	05 90       	lpm	r0, Z+
    3cf6:	61 50       	subi	r22, 0x01	; 1
    3cf8:	70 40       	sbci	r23, 0x00	; 0
    3cfa:	01 10       	cpse	r0, r1
    3cfc:	d8 f7       	brcc	.-10     	; 0x3cf4 <strnlen_P+0x2>
    3cfe:	80 95       	com	r24
    3d00:	90 95       	com	r25
    3d02:	8e 0f       	add	r24, r30
    3d04:	9f 1f       	adc	r25, r31
    3d06:	08 95       	ret

00003d08 <strnlen>:
    3d08:	fc 01       	movw	r30, r24
    3d0a:	61 50       	subi	r22, 0x01	; 1
    3d0c:	70 40       	sbci	r23, 0x00	; 0
    3d0e:	01 90       	ld	r0, Z+
    3d10:	01 10       	cpse	r0, r1
    3d12:	d8 f7       	brcc	.-10     	; 0x3d0a <strnlen+0x2>
    3d14:	80 95       	com	r24
    3d16:	90 95       	com	r25
    3d18:	8e 0f       	add	r24, r30
    3d1a:	9f 1f       	adc	r25, r31
    3d1c:	08 95       	ret

00003d1e <fputc>:
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	fb 01       	movw	r30, r22
    3d28:	23 81       	ldd	r18, Z+3	; 0x03
    3d2a:	21 fd       	sbrc	r18, 1
    3d2c:	03 c0       	rjmp	.+6      	; 0x3d34 <fputc+0x16>
    3d2e:	8f ef       	ldi	r24, 0xFF	; 255
    3d30:	9f ef       	ldi	r25, 0xFF	; 255
    3d32:	2c c0       	rjmp	.+88     	; 0x3d8c <fputc+0x6e>
    3d34:	22 ff       	sbrs	r18, 2
    3d36:	16 c0       	rjmp	.+44     	; 0x3d64 <fputc+0x46>
    3d38:	46 81       	ldd	r20, Z+6	; 0x06
    3d3a:	57 81       	ldd	r21, Z+7	; 0x07
    3d3c:	24 81       	ldd	r18, Z+4	; 0x04
    3d3e:	35 81       	ldd	r19, Z+5	; 0x05
    3d40:	42 17       	cp	r20, r18
    3d42:	53 07       	cpc	r21, r19
    3d44:	44 f4       	brge	.+16     	; 0x3d56 <fputc+0x38>
    3d46:	a0 81       	ld	r26, Z
    3d48:	b1 81       	ldd	r27, Z+1	; 0x01
    3d4a:	9d 01       	movw	r18, r26
    3d4c:	2f 5f       	subi	r18, 0xFF	; 255
    3d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d50:	31 83       	std	Z+1, r19	; 0x01
    3d52:	20 83       	st	Z, r18
    3d54:	8c 93       	st	X, r24
    3d56:	26 81       	ldd	r18, Z+6	; 0x06
    3d58:	37 81       	ldd	r19, Z+7	; 0x07
    3d5a:	2f 5f       	subi	r18, 0xFF	; 255
    3d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5e:	37 83       	std	Z+7, r19	; 0x07
    3d60:	26 83       	std	Z+6, r18	; 0x06
    3d62:	14 c0       	rjmp	.+40     	; 0x3d8c <fputc+0x6e>
    3d64:	8b 01       	movw	r16, r22
    3d66:	ec 01       	movw	r28, r24
    3d68:	fb 01       	movw	r30, r22
    3d6a:	00 84       	ldd	r0, Z+8	; 0x08
    3d6c:	f1 85       	ldd	r31, Z+9	; 0x09
    3d6e:	e0 2d       	mov	r30, r0
    3d70:	09 95       	icall
    3d72:	89 2b       	or	r24, r25
    3d74:	e1 f6       	brne	.-72     	; 0x3d2e <fputc+0x10>
    3d76:	d8 01       	movw	r26, r16
    3d78:	16 96       	adiw	r26, 0x06	; 6
    3d7a:	8d 91       	ld	r24, X+
    3d7c:	9c 91       	ld	r25, X
    3d7e:	17 97       	sbiw	r26, 0x07	; 7
    3d80:	01 96       	adiw	r24, 0x01	; 1
    3d82:	17 96       	adiw	r26, 0x07	; 7
    3d84:	9c 93       	st	X, r25
    3d86:	8e 93       	st	-X, r24
    3d88:	16 97       	sbiw	r26, 0x06	; 6
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	df 91       	pop	r29
    3d8e:	cf 91       	pop	r28
    3d90:	1f 91       	pop	r17
    3d92:	0f 91       	pop	r16
    3d94:	08 95       	ret

00003d96 <__ultoa_invert>:
    3d96:	fa 01       	movw	r30, r20
    3d98:	aa 27       	eor	r26, r26
    3d9a:	28 30       	cpi	r18, 0x08	; 8
    3d9c:	51 f1       	breq	.+84     	; 0x3df2 <__ultoa_invert+0x5c>
    3d9e:	20 31       	cpi	r18, 0x10	; 16
    3da0:	81 f1       	breq	.+96     	; 0x3e02 <__ultoa_invert+0x6c>
    3da2:	e8 94       	clt
    3da4:	6f 93       	push	r22
    3da6:	6e 7f       	andi	r22, 0xFE	; 254
    3da8:	6e 5f       	subi	r22, 0xFE	; 254
    3daa:	7f 4f       	sbci	r23, 0xFF	; 255
    3dac:	8f 4f       	sbci	r24, 0xFF	; 255
    3dae:	9f 4f       	sbci	r25, 0xFF	; 255
    3db0:	af 4f       	sbci	r26, 0xFF	; 255
    3db2:	b1 e0       	ldi	r27, 0x01	; 1
    3db4:	3e d0       	rcall	.+124    	; 0x3e32 <__ultoa_invert+0x9c>
    3db6:	b4 e0       	ldi	r27, 0x04	; 4
    3db8:	3c d0       	rcall	.+120    	; 0x3e32 <__ultoa_invert+0x9c>
    3dba:	67 0f       	add	r22, r23
    3dbc:	78 1f       	adc	r23, r24
    3dbe:	89 1f       	adc	r24, r25
    3dc0:	9a 1f       	adc	r25, r26
    3dc2:	a1 1d       	adc	r26, r1
    3dc4:	68 0f       	add	r22, r24
    3dc6:	79 1f       	adc	r23, r25
    3dc8:	8a 1f       	adc	r24, r26
    3dca:	91 1d       	adc	r25, r1
    3dcc:	a1 1d       	adc	r26, r1
    3dce:	6a 0f       	add	r22, r26
    3dd0:	71 1d       	adc	r23, r1
    3dd2:	81 1d       	adc	r24, r1
    3dd4:	91 1d       	adc	r25, r1
    3dd6:	a1 1d       	adc	r26, r1
    3dd8:	20 d0       	rcall	.+64     	; 0x3e1a <__ultoa_invert+0x84>
    3dda:	09 f4       	brne	.+2      	; 0x3dde <__ultoa_invert+0x48>
    3ddc:	68 94       	set
    3dde:	3f 91       	pop	r19
    3de0:	2a e0       	ldi	r18, 0x0A	; 10
    3de2:	26 9f       	mul	r18, r22
    3de4:	11 24       	eor	r1, r1
    3de6:	30 19       	sub	r19, r0
    3de8:	30 5d       	subi	r19, 0xD0	; 208
    3dea:	31 93       	st	Z+, r19
    3dec:	de f6       	brtc	.-74     	; 0x3da4 <__ultoa_invert+0xe>
    3dee:	cf 01       	movw	r24, r30
    3df0:	08 95       	ret
    3df2:	46 2f       	mov	r20, r22
    3df4:	47 70       	andi	r20, 0x07	; 7
    3df6:	40 5d       	subi	r20, 0xD0	; 208
    3df8:	41 93       	st	Z+, r20
    3dfa:	b3 e0       	ldi	r27, 0x03	; 3
    3dfc:	0f d0       	rcall	.+30     	; 0x3e1c <__ultoa_invert+0x86>
    3dfe:	c9 f7       	brne	.-14     	; 0x3df2 <__ultoa_invert+0x5c>
    3e00:	f6 cf       	rjmp	.-20     	; 0x3dee <__ultoa_invert+0x58>
    3e02:	46 2f       	mov	r20, r22
    3e04:	4f 70       	andi	r20, 0x0F	; 15
    3e06:	40 5d       	subi	r20, 0xD0	; 208
    3e08:	4a 33       	cpi	r20, 0x3A	; 58
    3e0a:	18 f0       	brcs	.+6      	; 0x3e12 <__ultoa_invert+0x7c>
    3e0c:	49 5d       	subi	r20, 0xD9	; 217
    3e0e:	31 fd       	sbrc	r19, 1
    3e10:	40 52       	subi	r20, 0x20	; 32
    3e12:	41 93       	st	Z+, r20
    3e14:	02 d0       	rcall	.+4      	; 0x3e1a <__ultoa_invert+0x84>
    3e16:	a9 f7       	brne	.-22     	; 0x3e02 <__ultoa_invert+0x6c>
    3e18:	ea cf       	rjmp	.-44     	; 0x3dee <__ultoa_invert+0x58>
    3e1a:	b4 e0       	ldi	r27, 0x04	; 4
    3e1c:	a6 95       	lsr	r26
    3e1e:	97 95       	ror	r25
    3e20:	87 95       	ror	r24
    3e22:	77 95       	ror	r23
    3e24:	67 95       	ror	r22
    3e26:	ba 95       	dec	r27
    3e28:	c9 f7       	brne	.-14     	; 0x3e1c <__ultoa_invert+0x86>
    3e2a:	00 97       	sbiw	r24, 0x00	; 0
    3e2c:	61 05       	cpc	r22, r1
    3e2e:	71 05       	cpc	r23, r1
    3e30:	08 95       	ret
    3e32:	9b 01       	movw	r18, r22
    3e34:	ac 01       	movw	r20, r24
    3e36:	0a 2e       	mov	r0, r26
    3e38:	06 94       	lsr	r0
    3e3a:	57 95       	ror	r21
    3e3c:	47 95       	ror	r20
    3e3e:	37 95       	ror	r19
    3e40:	27 95       	ror	r18
    3e42:	ba 95       	dec	r27
    3e44:	c9 f7       	brne	.-14     	; 0x3e38 <__ultoa_invert+0xa2>
    3e46:	62 0f       	add	r22, r18
    3e48:	73 1f       	adc	r23, r19
    3e4a:	84 1f       	adc	r24, r20
    3e4c:	95 1f       	adc	r25, r21
    3e4e:	a0 1d       	adc	r26, r0
    3e50:	08 95       	ret

00003e52 <__prologue_saves__>:
    3e52:	2f 92       	push	r2
    3e54:	3f 92       	push	r3
    3e56:	4f 92       	push	r4
    3e58:	5f 92       	push	r5
    3e5a:	6f 92       	push	r6
    3e5c:	7f 92       	push	r7
    3e5e:	8f 92       	push	r8
    3e60:	9f 92       	push	r9
    3e62:	af 92       	push	r10
    3e64:	bf 92       	push	r11
    3e66:	cf 92       	push	r12
    3e68:	df 92       	push	r13
    3e6a:	ef 92       	push	r14
    3e6c:	ff 92       	push	r15
    3e6e:	0f 93       	push	r16
    3e70:	1f 93       	push	r17
    3e72:	cf 93       	push	r28
    3e74:	df 93       	push	r29
    3e76:	cd b7       	in	r28, 0x3d	; 61
    3e78:	de b7       	in	r29, 0x3e	; 62
    3e7a:	ca 1b       	sub	r28, r26
    3e7c:	db 0b       	sbc	r29, r27
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	09 94       	ijmp

00003e8a <__epilogue_restores__>:
    3e8a:	2a 88       	ldd	r2, Y+18	; 0x12
    3e8c:	39 88       	ldd	r3, Y+17	; 0x11
    3e8e:	48 88       	ldd	r4, Y+16	; 0x10
    3e90:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e92:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e94:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e96:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e98:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e9c:	b9 84       	ldd	r11, Y+9	; 0x09
    3e9e:	c8 84       	ldd	r12, Y+8	; 0x08
    3ea0:	df 80       	ldd	r13, Y+7	; 0x07
    3ea2:	ee 80       	ldd	r14, Y+6	; 0x06
    3ea4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ea6:	0c 81       	ldd	r16, Y+4	; 0x04
    3ea8:	1b 81       	ldd	r17, Y+3	; 0x03
    3eaa:	aa 81       	ldd	r26, Y+2	; 0x02
    3eac:	b9 81       	ldd	r27, Y+1	; 0x01
    3eae:	ce 0f       	add	r28, r30
    3eb0:	d1 1d       	adc	r29, r1
    3eb2:	0f b6       	in	r0, 0x3f	; 63
    3eb4:	f8 94       	cli
    3eb6:	de bf       	out	0x3e, r29	; 62
    3eb8:	0f be       	out	0x3f, r0	; 63
    3eba:	cd bf       	out	0x3d, r28	; 61
    3ebc:	ed 01       	movw	r28, r26
    3ebe:	08 95       	ret

00003ec0 <_exit>:
    3ec0:	f8 94       	cli

00003ec2 <__stop_program>:
    3ec2:	ff cf       	rjmp	.-2      	; 0x3ec2 <__stop_program>
