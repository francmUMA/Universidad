
TestFreeRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  0000424c  000042e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000424c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000669  00800160  00800160  00004340  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000439c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d0  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d65  00000000  00000000  000048ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001149  00000000  00000000  00008611  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003757  00000000  00000000  0000975a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000116c  00000000  00000000  0000ceb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001aac  00000000  00000000  0000e020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002410  00000000  00000000  0000facc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  00011edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e4       	ldi	r30, 0x4C	; 76
      7c:	f2 e4       	ldi	r31, 0x42	; 66
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 36       	cpi	r26, 0x60	; 96
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a0 e6       	ldi	r26, 0x60	; 96
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3c       	cpi	r26, 0xC9	; 201
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <main>
      9e:	0c 94 24 21 	jmp	0x4248	; 0x4248 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DigitalInit>:
/*===============================================================================================*\
 *	DIGITAL I/O
\*===============================================================================================*/

void DigitalInit(void)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	// CONFIGURE LEDS AS OUTPUT
	MS_DIGITAL_OUT_BIT_0_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_0_PIN);
      ae:	84 e2       	ldi	r24, 0x24	; 36
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	24 e2       	ldi	r18, 0x24	; 36
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	24 60       	ori	r18, 0x04	; 4
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_1_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_1_PIN);
      c0:	84 e2       	ldi	r24, 0x24	; 36
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	24 e2       	ldi	r18, 0x24	; 36
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	22 60       	ori	r18, 0x02	; 2
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_2_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_2_PIN);
      d2:	84 e2       	ldi	r24, 0x24	; 36
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	24 e2       	ldi	r18, 0x24	; 36
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	21 60       	ori	r18, 0x01	; 1
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_3_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_3_PIN);
      e4:	8a e2       	ldi	r24, 0x2A	; 42
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	2a e2       	ldi	r18, 0x2A	; 42
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	20 68       	ori	r18, 0x80	; 128
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_4_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_4_PIN);
      f6:	8a e2       	ldi	r24, 0x2A	; 42
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2a e2       	ldi	r18, 0x2A	; 42
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	20 81       	ld	r18, Z
     102:	20 62       	ori	r18, 0x20	; 32
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_5_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_5_PIN);
     108:	8a e2       	ldi	r24, 0x2A	; 42
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	2a e2       	ldi	r18, 0x2A	; 42
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	f9 01       	movw	r30, r18
     112:	20 81       	ld	r18, Z
     114:	20 61       	ori	r18, 0x10	; 16
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_6_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_6_PIN);
     11a:	87 e2       	ldi	r24, 0x27	; 39
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	27 e2       	ldi	r18, 0x27	; 39
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	20 61       	ori	r18, 0x10	; 16
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18
	MS_DIGITAL_OUT_BIT_7_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_7_PIN);
     12c:	87 e2       	ldi	r24, 0x27	; 39
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	27 e2       	ldi	r18, 0x27	; 39
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	f9 01       	movw	r30, r18
     136:	20 81       	ld	r18, Z
     138:	28 60       	ori	r18, 0x08	; 8
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
	
	// CONFIGURE DAC WR
	MS_DIGITAL_OUT_BIT_WR_DIR |= (0x01 << MS_DIGITAL_OUT_BIT_WR_PIN);
     13e:	87 e2       	ldi	r24, 0x27	; 39
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	27 e2       	ldi	r18, 0x27	; 39
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	21 60       	ori	r18, 0x01	; 1
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
	
	// CONFIGURE BUTTONS
	//MS_BUTTON_A_DIR &= ~(0x01 << MS_BUTTON_A_PIN);
	//MS_BUTTON_B_DIR &= ~(0x01 << MS_BUTTON_B_PIN);
	//MS_BUTTON_C_DIR &= ~(0x01 << MS_BUTTON_C_PIN);
}
     150:	00 00       	nop
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <DACWRdisable>:


void DACWRdisable(void)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
	MS_DIGITAL_OUT_BIT_WR_PORT |= (0x01 << MS_DIGITAL_OUT_BIT_WR_PIN);
     160:	88 e2       	ldi	r24, 0x28	; 40
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	28 e2       	ldi	r18, 0x28	; 40
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	f9 01       	movw	r30, r18
     16a:	20 81       	ld	r18, Z
     16c:	21 60       	ori	r18, 0x01	; 1
     16e:	fc 01       	movw	r30, r24
     170:	20 83       	st	Z, r18
}
     172:	00 00       	nop
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <DACWRenable>:


void DACWRenable(void)
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
	MS_DIGITAL_OUT_BIT_WR_PORT &=  ~(0x01 << MS_DIGITAL_OUT_BIT_WR_PIN);
     182:	88 e2       	ldi	r24, 0x28	; 40
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	28 e2       	ldi	r18, 0x28	; 40
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	f9 01       	movw	r30, r18
     18c:	20 81       	ld	r18, Z
     18e:	2e 7f       	andi	r18, 0xFE	; 254
     190:	fc 01       	movw	r30, r24
     192:	20 83       	st	Z, r18
}
     194:	00 00       	nop
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <DigitalWrite>:


void DigitalWrite(unsigned char byte)
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <DigitalWrite+0x6>
     1a2:	1f 92       	push	r1
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char bit;
	unsigned char mask;
	
	DACWRdisable();
     1aa:	0e 94 ac 00 	call	0x158	; 0x158 <DACWRdisable>
	
	bit = (byte >> 0) & 0x01;
     1ae:	8b 81       	ldd	r24, Y+3	; 0x03
     1b0:	81 70       	andi	r24, 0x01	; 1
     1b2:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_0_PIN);
     1b4:	8b ef       	ldi	r24, 0xFB	; 251
     1b6:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_0_PORT = (MS_DIGITAL_OUT_BIT_0_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_0_PIN);
     1b8:	85 e2       	ldi	r24, 0x25	; 37
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	25 e2       	ldi	r18, 0x25	; 37
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	f9 01       	movw	r30, r18
     1c2:	30 81       	ld	r19, Z
     1c4:	2a 81       	ldd	r18, Y+2	; 0x02
     1c6:	23 23       	and	r18, r19
     1c8:	42 2f       	mov	r20, r18
     1ca:	29 81       	ldd	r18, Y+1	; 0x01
     1cc:	22 2f       	mov	r18, r18
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	22 0f       	add	r18, r18
     1d2:	33 1f       	adc	r19, r19
     1d4:	22 0f       	add	r18, r18
     1d6:	33 1f       	adc	r19, r19
     1d8:	24 2b       	or	r18, r20
     1da:	fc 01       	movw	r30, r24
     1dc:	20 83       	st	Z, r18
	
	bit = (byte >> 1) & 0x01;
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	86 95       	lsr	r24
     1e2:	81 70       	andi	r24, 0x01	; 1
     1e4:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_1_PIN);
     1e6:	8d ef       	ldi	r24, 0xFD	; 253
     1e8:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_1_PORT = (MS_DIGITAL_OUT_BIT_1_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_1_PIN);
     1ea:	85 e2       	ldi	r24, 0x25	; 37
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	25 e2       	ldi	r18, 0x25	; 37
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	f9 01       	movw	r30, r18
     1f4:	30 81       	ld	r19, Z
     1f6:	2a 81       	ldd	r18, Y+2	; 0x02
     1f8:	23 23       	and	r18, r19
     1fa:	42 2f       	mov	r20, r18
     1fc:	29 81       	ldd	r18, Y+1	; 0x01
     1fe:	22 2f       	mov	r18, r18
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	22 0f       	add	r18, r18
     204:	33 1f       	adc	r19, r19
     206:	24 2b       	or	r18, r20
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18

	bit = (byte >> 2) & 0x01;
     20c:	8b 81       	ldd	r24, Y+3	; 0x03
     20e:	86 95       	lsr	r24
     210:	86 95       	lsr	r24
     212:	81 70       	andi	r24, 0x01	; 1
     214:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_2_PIN);
     216:	8e ef       	ldi	r24, 0xFE	; 254
     218:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_2_PORT = (MS_DIGITAL_OUT_BIT_2_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_2_PIN);
     21a:	85 e2       	ldi	r24, 0x25	; 37
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	25 e2       	ldi	r18, 0x25	; 37
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	f9 01       	movw	r30, r18
     224:	30 81       	ld	r19, Z
     226:	2a 81       	ldd	r18, Y+2	; 0x02
     228:	32 23       	and	r19, r18
     22a:	29 81       	ldd	r18, Y+1	; 0x01
     22c:	23 2b       	or	r18, r19
     22e:	fc 01       	movw	r30, r24
     230:	20 83       	st	Z, r18

	bit = (byte >> 3) & 0x01;
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	86 95       	lsr	r24
     236:	86 95       	lsr	r24
     238:	86 95       	lsr	r24
     23a:	81 70       	andi	r24, 0x01	; 1
     23c:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_3_PIN);
     23e:	8f e7       	ldi	r24, 0x7F	; 127
     240:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_3_PORT = (MS_DIGITAL_OUT_BIT_3_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_3_PIN);
     242:	8b e2       	ldi	r24, 0x2B	; 43
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	2b e2       	ldi	r18, 0x2B	; 43
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	f9 01       	movw	r30, r18
     24c:	30 81       	ld	r19, Z
     24e:	2a 81       	ldd	r18, Y+2	; 0x02
     250:	23 23       	and	r18, r19
     252:	42 2f       	mov	r20, r18
     254:	29 81       	ldd	r18, Y+1	; 0x01
     256:	22 2f       	mov	r18, r18
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	36 95       	lsr	r19
     25c:	32 2f       	mov	r19, r18
     25e:	22 27       	eor	r18, r18
     260:	37 95       	ror	r19
     262:	27 95       	ror	r18
     264:	24 2b       	or	r18, r20
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18

	bit = (byte >> 4) & 0x01;
     26a:	8b 81       	ldd	r24, Y+3	; 0x03
     26c:	82 95       	swap	r24
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	81 70       	andi	r24, 0x01	; 1
     272:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_4_PIN);
     274:	8f ed       	ldi	r24, 0xDF	; 223
     276:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_4_PORT = (MS_DIGITAL_OUT_BIT_4_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_4_PIN);
     278:	8b e2       	ldi	r24, 0x2B	; 43
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	2b e2       	ldi	r18, 0x2B	; 43
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	30 81       	ld	r19, Z
     284:	2a 81       	ldd	r18, Y+2	; 0x02
     286:	23 23       	and	r18, r19
     288:	42 2f       	mov	r20, r18
     28a:	29 81       	ldd	r18, Y+1	; 0x01
     28c:	22 2f       	mov	r18, r18
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	22 0f       	add	r18, r18
     292:	33 1f       	adc	r19, r19
     294:	22 95       	swap	r18
     296:	32 95       	swap	r19
     298:	30 7f       	andi	r19, 0xF0	; 240
     29a:	32 27       	eor	r19, r18
     29c:	20 7f       	andi	r18, 0xF0	; 240
     29e:	32 27       	eor	r19, r18
     2a0:	24 2b       	or	r18, r20
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 83       	st	Z, r18

	bit = (byte >> 5) & 0x01;
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	82 95       	swap	r24
     2aa:	86 95       	lsr	r24
     2ac:	87 70       	andi	r24, 0x07	; 7
     2ae:	81 70       	andi	r24, 0x01	; 1
     2b0:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_5_PIN);
     2b2:	8f ee       	ldi	r24, 0xEF	; 239
     2b4:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_5_PORT = (MS_DIGITAL_OUT_BIT_5_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_5_PIN);
     2b6:	8b e2       	ldi	r24, 0x2B	; 43
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	2b e2       	ldi	r18, 0x2B	; 43
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	f9 01       	movw	r30, r18
     2c0:	30 81       	ld	r19, Z
     2c2:	2a 81       	ldd	r18, Y+2	; 0x02
     2c4:	23 23       	and	r18, r19
     2c6:	42 2f       	mov	r20, r18
     2c8:	29 81       	ldd	r18, Y+1	; 0x01
     2ca:	22 2f       	mov	r18, r18
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	22 95       	swap	r18
     2d0:	32 95       	swap	r19
     2d2:	30 7f       	andi	r19, 0xF0	; 240
     2d4:	32 27       	eor	r19, r18
     2d6:	20 7f       	andi	r18, 0xF0	; 240
     2d8:	32 27       	eor	r19, r18
     2da:	24 2b       	or	r18, r20
     2dc:	fc 01       	movw	r30, r24
     2de:	20 83       	st	Z, r18

	bit = (byte >> 6) & 0x01;
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	82 95       	swap	r24
     2e4:	86 95       	lsr	r24
     2e6:	86 95       	lsr	r24
     2e8:	83 70       	andi	r24, 0x03	; 3
     2ea:	81 70       	andi	r24, 0x01	; 1
     2ec:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_6_PIN);
     2ee:	8f ee       	ldi	r24, 0xEF	; 239
     2f0:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_6_PORT = (MS_DIGITAL_OUT_BIT_6_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_6_PIN);
     2f2:	88 e2       	ldi	r24, 0x28	; 40
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	28 e2       	ldi	r18, 0x28	; 40
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	f9 01       	movw	r30, r18
     2fc:	30 81       	ld	r19, Z
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	23 23       	and	r18, r19
     302:	42 2f       	mov	r20, r18
     304:	29 81       	ldd	r18, Y+1	; 0x01
     306:	22 2f       	mov	r18, r18
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	22 95       	swap	r18
     30c:	32 95       	swap	r19
     30e:	30 7f       	andi	r19, 0xF0	; 240
     310:	32 27       	eor	r19, r18
     312:	20 7f       	andi	r18, 0xF0	; 240
     314:	32 27       	eor	r19, r18
     316:	24 2b       	or	r18, r20
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
	
	bit = (byte >> 7) & 0x01;
     31c:	8b 81       	ldd	r24, Y+3	; 0x03
     31e:	88 1f       	adc	r24, r24
     320:	88 27       	eor	r24, r24
     322:	88 1f       	adc	r24, r24
     324:	89 83       	std	Y+1, r24	; 0x01
	mask = ~(0x01 << MS_DIGITAL_OUT_BIT_7_PIN);
     326:	87 ef       	ldi	r24, 0xF7	; 247
     328:	8a 83       	std	Y+2, r24	; 0x02
	MS_DIGITAL_OUT_BIT_7_PORT = (MS_DIGITAL_OUT_BIT_7_PORT & mask) | (bit << MS_DIGITAL_OUT_BIT_7_PIN);
     32a:	88 e2       	ldi	r24, 0x28	; 40
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	28 e2       	ldi	r18, 0x28	; 40
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	f9 01       	movw	r30, r18
     334:	30 81       	ld	r19, Z
     336:	2a 81       	ldd	r18, Y+2	; 0x02
     338:	23 23       	and	r18, r19
     33a:	42 2f       	mov	r20, r18
     33c:	29 81       	ldd	r18, Y+1	; 0x01
     33e:	22 2f       	mov	r18, r18
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	22 0f       	add	r18, r18
     348:	33 1f       	adc	r19, r19
     34a:	22 0f       	add	r18, r18
     34c:	33 1f       	adc	r19, r19
     34e:	24 2b       	or	r18, r20
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
	
	DACWRenable();
     354:	0e 94 bd 00 	call	0x17a	; 0x17a <DACWRenable>
}
     358:	00 00       	nop
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	00 d0       	rcall	.+0      	; 0x36c <vListInitialise+0x6>
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	9a 83       	std	Y+2, r25	; 0x02
     372:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	9c 01       	movw	r18, r24
     37a:	2d 5f       	subi	r18, 0xFD	; 253
     37c:	3f 4f       	sbci	r19, 0xFF	; 255
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	fc 01       	movw	r30, r24
     384:	32 83       	std	Z+2, r19	; 0x02
     386:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	3f ef       	ldi	r19, 0xFF	; 255
     390:	fc 01       	movw	r30, r24
     392:	34 83       	std	Z+4, r19	; 0x04
     394:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	9c 01       	movw	r18, r24
     39c:	2d 5f       	subi	r18, 0xFD	; 253
     39e:	3f 4f       	sbci	r19, 0xFF	; 255
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	fc 01       	movw	r30, r24
     3a6:	36 83       	std	Z+6, r19	; 0x06
     3a8:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	9c 01       	movw	r18, r24
     3b0:	2d 5f       	subi	r18, 0xFD	; 253
     3b2:	3f 4f       	sbci	r19, 0xFF	; 255
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	9a 81       	ldd	r25, Y+2	; 0x02
     3b8:	fc 01       	movw	r30, r24
     3ba:	30 87       	std	Z+8, r19	; 0x08
     3bc:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	fc 01       	movw	r30, r24
     3c4:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     3c6:	00 00       	nop
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <vListInitialiseItem+0x6>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	fc 01       	movw	r30, r24
     3e6:	11 86       	std	Z+9, r1	; 0x09
     3e8:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     3ea:	00 00       	nop
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <vListInsertEnd+0x6>
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <vListInsertEnd+0x8>
     3fe:	00 d0       	rcall	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	9c 83       	std	Y+4, r25	; 0x04
     406:	8b 83       	std	Y+3, r24	; 0x03
     408:	7e 83       	std	Y+6, r23	; 0x06
     40a:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     40c:	8b 81       	ldd	r24, Y+3	; 0x03
     40e:	9c 81       	ldd	r25, Y+4	; 0x04
     410:	fc 01       	movw	r30, r24
     412:	81 81       	ldd	r24, Z+1	; 0x01
     414:	92 81       	ldd	r25, Z+2	; 0x02
     416:	9a 83       	std	Y+2, r25	; 0x02
     418:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     41a:	8d 81       	ldd	r24, Y+5	; 0x05
     41c:	9e 81       	ldd	r25, Y+6	; 0x06
     41e:	29 81       	ldd	r18, Y+1	; 0x01
     420:	3a 81       	ldd	r19, Y+2	; 0x02
     422:	fc 01       	movw	r30, r24
     424:	33 83       	std	Z+3, r19	; 0x03
     426:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	fc 01       	movw	r30, r24
     42e:	24 81       	ldd	r18, Z+4	; 0x04
     430:	35 81       	ldd	r19, Z+5	; 0x05
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	9e 81       	ldd	r25, Y+6	; 0x06
     436:	fc 01       	movw	r30, r24
     438:	35 83       	std	Z+5, r19	; 0x05
     43a:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	fc 01       	movw	r30, r24
     442:	84 81       	ldd	r24, Z+4	; 0x04
     444:	95 81       	ldd	r25, Z+5	; 0x05
     446:	2d 81       	ldd	r18, Y+5	; 0x05
     448:	3e 81       	ldd	r19, Y+6	; 0x06
     44a:	fc 01       	movw	r30, r24
     44c:	33 83       	std	Z+3, r19	; 0x03
     44e:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	2d 81       	ldd	r18, Y+5	; 0x05
     456:	3e 81       	ldd	r19, Y+6	; 0x06
     458:	fc 01       	movw	r30, r24
     45a:	35 83       	std	Z+5, r19	; 0x05
     45c:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     45e:	8d 81       	ldd	r24, Y+5	; 0x05
     460:	9e 81       	ldd	r25, Y+6	; 0x06
     462:	2b 81       	ldd	r18, Y+3	; 0x03
     464:	3c 81       	ldd	r19, Y+4	; 0x04
     466:	fc 01       	movw	r30, r24
     468:	31 87       	std	Z+9, r19	; 0x09
     46a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	9c 81       	ldd	r25, Y+4	; 0x04
     470:	fc 01       	movw	r30, r24
     472:	80 81       	ld	r24, Z
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	28 0f       	add	r18, r24
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	9c 81       	ldd	r25, Y+4	; 0x04
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
}
     480:	00 00       	nop
     482:	26 96       	adiw	r28, 0x06	; 6
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	28 97       	sbiw	r28, 0x08	; 8
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	9e 83       	std	Y+6, r25	; 0x06
     4aa:	8d 83       	std	Y+5, r24	; 0x05
     4ac:	78 87       	std	Y+8, r23	; 0x08
     4ae:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4b0:	8f 81       	ldd	r24, Y+7	; 0x07
     4b2:	98 85       	ldd	r25, Y+8	; 0x08
     4b4:	fc 01       	movw	r30, r24
     4b6:	80 81       	ld	r24, Z
     4b8:	91 81       	ldd	r25, Z+1	; 0x01
     4ba:	9c 83       	std	Y+4, r25	; 0x04
     4bc:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	9c 81       	ldd	r25, Y+4	; 0x04
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	41 f4       	brne	.+16     	; 0x4d6 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     4c6:	8d 81       	ldd	r24, Y+5	; 0x05
     4c8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ca:	fc 01       	movw	r30, r24
     4cc:	87 81       	ldd	r24, Z+7	; 0x07
     4ce:	90 85       	ldd	r25, Z+8	; 0x08
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	1a c0       	rjmp	.+52     	; 0x50a <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4d6:	8d 81       	ldd	r24, Y+5	; 0x05
     4d8:	9e 81       	ldd	r25, Y+6	; 0x06
     4da:	03 96       	adiw	r24, 0x03	; 3
     4dc:	9a 83       	std	Y+2, r25	; 0x02
     4de:	89 83       	std	Y+1, r24	; 0x01
     4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <vListInsert+0x5c>
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	fc 01       	movw	r30, r24
     4e8:	82 81       	ldd	r24, Z+2	; 0x02
     4ea:	93 81       	ldd	r25, Z+3	; 0x03
     4ec:	9a 83       	std	Y+2, r25	; 0x02
     4ee:	89 83       	std	Y+1, r24	; 0x01
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
     4f4:	fc 01       	movw	r30, r24
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 81       	ld	r18, Z
     4fe:	31 81       	ldd	r19, Z+1	; 0x01
     500:	8b 81       	ldd	r24, Y+3	; 0x03
     502:	9c 81       	ldd	r25, Y+4	; 0x04
     504:	82 17       	cp	r24, r18
     506:	93 07       	cpc	r25, r19
     508:	60 f7       	brcc	.-40     	; 0x4e2 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	9a 81       	ldd	r25, Y+2	; 0x02
     50e:	fc 01       	movw	r30, r24
     510:	22 81       	ldd	r18, Z+2	; 0x02
     512:	33 81       	ldd	r19, Z+3	; 0x03
     514:	8f 81       	ldd	r24, Y+7	; 0x07
     516:	98 85       	ldd	r25, Y+8	; 0x08
     518:	fc 01       	movw	r30, r24
     51a:	33 83       	std	Z+3, r19	; 0x03
     51c:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     51e:	8f 81       	ldd	r24, Y+7	; 0x07
     520:	98 85       	ldd	r25, Y+8	; 0x08
     522:	fc 01       	movw	r30, r24
     524:	82 81       	ldd	r24, Z+2	; 0x02
     526:	93 81       	ldd	r25, Z+3	; 0x03
     528:	2f 81       	ldd	r18, Y+7	; 0x07
     52a:	38 85       	ldd	r19, Y+8	; 0x08
     52c:	fc 01       	movw	r30, r24
     52e:	35 83       	std	Z+5, r19	; 0x05
     530:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     532:	8f 81       	ldd	r24, Y+7	; 0x07
     534:	98 85       	ldd	r25, Y+8	; 0x08
     536:	29 81       	ldd	r18, Y+1	; 0x01
     538:	3a 81       	ldd	r19, Y+2	; 0x02
     53a:	fc 01       	movw	r30, r24
     53c:	35 83       	std	Z+5, r19	; 0x05
     53e:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	2f 81       	ldd	r18, Y+7	; 0x07
     546:	38 85       	ldd	r19, Y+8	; 0x08
     548:	fc 01       	movw	r30, r24
     54a:	33 83       	std	Z+3, r19	; 0x03
     54c:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     54e:	8f 81       	ldd	r24, Y+7	; 0x07
     550:	98 85       	ldd	r25, Y+8	; 0x08
     552:	2d 81       	ldd	r18, Y+5	; 0x05
     554:	3e 81       	ldd	r19, Y+6	; 0x06
     556:	fc 01       	movw	r30, r24
     558:	31 87       	std	Z+9, r19	; 0x09
     55a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     55c:	8d 81       	ldd	r24, Y+5	; 0x05
     55e:	9e 81       	ldd	r25, Y+6	; 0x06
     560:	fc 01       	movw	r30, r24
     562:	80 81       	ld	r24, Z
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	28 0f       	add	r18, r24
     568:	8d 81       	ldd	r24, Y+5	; 0x05
     56a:	9e 81       	ldd	r25, Y+6	; 0x06
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
}
     570:	00 00       	nop
     572:	28 96       	adiw	r28, 0x08	; 8
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	00 d0       	rcall	.+0      	; 0x58a <uxListRemove+0x6>
     58a:	00 d0       	rcall	.+0      	; 0x58c <uxListRemove+0x8>
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	9c 81       	ldd	r25, Y+4	; 0x04
     598:	fc 01       	movw	r30, r24
     59a:	80 85       	ldd	r24, Z+8	; 0x08
     59c:	91 85       	ldd	r25, Z+9	; 0x09
     59e:	9a 83       	std	Y+2, r25	; 0x02
     5a0:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	2b 81       	ldd	r18, Y+3	; 0x03
     5ae:	3c 81       	ldd	r19, Y+4	; 0x04
     5b0:	f9 01       	movw	r30, r18
     5b2:	24 81       	ldd	r18, Z+4	; 0x04
     5b4:	35 81       	ldd	r19, Z+5	; 0x05
     5b6:	fc 01       	movw	r30, r24
     5b8:	35 83       	std	Z+5, r19	; 0x05
     5ba:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	fc 01       	movw	r30, r24
     5c2:	84 81       	ldd	r24, Z+4	; 0x04
     5c4:	95 81       	ldd	r25, Z+5	; 0x05
     5c6:	2b 81       	ldd	r18, Y+3	; 0x03
     5c8:	3c 81       	ldd	r19, Y+4	; 0x04
     5ca:	f9 01       	movw	r30, r18
     5cc:	22 81       	ldd	r18, Z+2	; 0x02
     5ce:	33 81       	ldd	r19, Z+3	; 0x03
     5d0:	fc 01       	movw	r30, r24
     5d2:	33 83       	std	Z+3, r19	; 0x03
     5d4:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	fc 01       	movw	r30, r24
     5dc:	21 81       	ldd	r18, Z+1	; 0x01
     5de:	32 81       	ldd	r19, Z+2	; 0x02
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	28 17       	cp	r18, r24
     5e6:	39 07       	cpc	r19, r25
     5e8:	51 f4       	brne	.+20     	; 0x5fe <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	9c 81       	ldd	r25, Y+4	; 0x04
     5ee:	fc 01       	movw	r30, r24
     5f0:	24 81       	ldd	r18, Z+4	; 0x04
     5f2:	35 81       	ldd	r19, Z+5	; 0x05
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	fc 01       	movw	r30, r24
     5fa:	32 83       	std	Z+2, r19	; 0x02
     5fc:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	9c 81       	ldd	r25, Y+4	; 0x04
     602:	fc 01       	movw	r30, r24
     604:	11 86       	std	Z+9, r1	; 0x09
     606:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	9a 81       	ldd	r25, Y+2	; 0x02
     60c:	fc 01       	movw	r30, r24
     60e:	80 81       	ld	r24, Z
     610:	2f ef       	ldi	r18, 0xFF	; 255
     612:	28 0f       	add	r18, r24
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	9a 81       	ldd	r25, Y+2	; 0x02
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	fc 01       	movw	r30, r24
     622:	80 81       	ld	r24, Z
}
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	2e 97       	sbiw	r28, 0x0e	; 14
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	9e 87       	std	Y+14, r25	; 0x0e
     648:	8d 87       	std	Y+13, r24	; 0x0d
     64a:	1e 82       	std	Y+6, r1	; 0x06
     64c:	1d 82       	std	Y+5, r1	; 0x05
     64e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <vTaskSuspendAll>
     652:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <xHeapHasBeenInitialised.2346>
     656:	88 23       	and	r24, r24
     658:	29 f4       	brne	.+10     	; 0x664 <pvPortMalloc+0x32>
     65a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <prvHeapInit>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <xHeapHasBeenInitialised.2346>
     664:	8d 85       	ldd	r24, Y+13	; 0x0d
     666:	9e 85       	ldd	r25, Y+14	; 0x0e
     668:	89 2b       	or	r24, r25
     66a:	41 f0       	breq	.+16     	; 0x67c <pvPortMalloc+0x4a>
     66c:	84 e0       	ldi	r24, 0x04	; 4
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2d 85       	ldd	r18, Y+13	; 0x0d
     672:	3e 85       	ldd	r19, Y+14	; 0x0e
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
     678:	9e 87       	std	Y+14, r25	; 0x0e
     67a:	8d 87       	std	Y+13, r24	; 0x0d
     67c:	8d 85       	ldd	r24, Y+13	; 0x0d
     67e:	9e 85       	ldd	r25, Y+14	; 0x0e
     680:	89 2b       	or	r24, r25
     682:	09 f4       	brne	.+2      	; 0x686 <pvPortMalloc+0x54>
     684:	b8 c0       	rjmp	.+368    	; 0x7f6 <pvPortMalloc+0x1c4>
     686:	8d 85       	ldd	r24, Y+13	; 0x0d
     688:	9e 85       	ldd	r25, Y+14	; 0x0e
     68a:	8b 3d       	cpi	r24, 0xDB	; 219
     68c:	95 40       	sbci	r25, 0x05	; 5
     68e:	08 f0       	brcs	.+2      	; 0x692 <pvPortMalloc+0x60>
     690:	b2 c0       	rjmp	.+356    	; 0x7f6 <pvPortMalloc+0x1c4>
     692:	8c e3       	ldi	r24, 0x3C	; 60
     694:	97 e0       	ldi	r25, 0x07	; 7
     696:	9c 83       	std	Y+4, r25	; 0x04
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <xStart>
     69e:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <xStart+0x1>
     6a2:	9a 83       	std	Y+2, r25	; 0x02
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	0b c0       	rjmp	.+22     	; 0x6be <pvPortMalloc+0x8c>
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	9c 83       	std	Y+4, r25	; 0x04
     6ae:	8b 83       	std	Y+3, r24	; 0x03
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	9a 83       	std	Y+2, r25	; 0x02
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	fc 01       	movw	r30, r24
     6c4:	22 81       	ldd	r18, Z+2	; 0x02
     6c6:	33 81       	ldd	r19, Z+3	; 0x03
     6c8:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ca:	9e 85       	ldd	r25, Y+14	; 0x0e
     6cc:	28 17       	cp	r18, r24
     6ce:	39 07       	cpc	r19, r25
     6d0:	38 f4       	brcc	.+14     	; 0x6e0 <pvPortMalloc+0xae>
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	fc 01       	movw	r30, r24
     6d8:	80 81       	ld	r24, Z
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	89 2b       	or	r24, r25
     6de:	21 f7       	brne	.-56     	; 0x6a8 <pvPortMalloc+0x76>
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	9a 81       	ldd	r25, Y+2	; 0x02
     6e4:	80 54       	subi	r24, 0x40	; 64
     6e6:	97 40       	sbci	r25, 0x07	; 7
     6e8:	09 f4       	brne	.+2      	; 0x6ec <pvPortMalloc+0xba>
     6ea:	85 c0       	rjmp	.+266    	; 0x7f6 <pvPortMalloc+0x1c4>
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 81       	ld	r18, Z
     6f4:	31 81       	ldd	r19, Z+1	; 0x01
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	82 0f       	add	r24, r18
     6fc:	93 1f       	adc	r25, r19
     6fe:	9e 83       	std	Y+6, r25	; 0x06
     700:	8d 83       	std	Y+5, r24	; 0x05
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02
     706:	fc 01       	movw	r30, r24
     708:	20 81       	ld	r18, Z
     70a:	31 81       	ldd	r19, Z+1	; 0x01
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	9c 81       	ldd	r25, Y+4	; 0x04
     710:	fc 01       	movw	r30, r24
     712:	31 83       	std	Z+1, r19	; 0x01
     714:	20 83       	st	Z, r18
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	fc 01       	movw	r30, r24
     71c:	22 81       	ldd	r18, Z+2	; 0x02
     71e:	33 81       	ldd	r19, Z+3	; 0x03
     720:	8d 85       	ldd	r24, Y+13	; 0x0d
     722:	9e 85       	ldd	r25, Y+14	; 0x0e
     724:	28 1b       	sub	r18, r24
     726:	39 0b       	sbc	r19, r25
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	82 17       	cp	r24, r18
     732:	93 07       	cpc	r25, r19
     734:	08 f0       	brcs	.+2      	; 0x738 <pvPortMalloc+0x106>
     736:	4e c0       	rjmp	.+156    	; 0x7d4 <pvPortMalloc+0x1a2>
     738:	29 81       	ldd	r18, Y+1	; 0x01
     73a:	3a 81       	ldd	r19, Y+2	; 0x02
     73c:	8d 85       	ldd	r24, Y+13	; 0x0d
     73e:	9e 85       	ldd	r25, Y+14	; 0x0e
     740:	82 0f       	add	r24, r18
     742:	93 1f       	adc	r25, r19
     744:	9a 87       	std	Y+10, r25	; 0x0a
     746:	89 87       	std	Y+9, r24	; 0x09
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	fc 01       	movw	r30, r24
     74e:	22 81       	ldd	r18, Z+2	; 0x02
     750:	33 81       	ldd	r19, Z+3	; 0x03
     752:	8d 85       	ldd	r24, Y+13	; 0x0d
     754:	9e 85       	ldd	r25, Y+14	; 0x0e
     756:	28 1b       	sub	r18, r24
     758:	39 0b       	sbc	r19, r25
     75a:	89 85       	ldd	r24, Y+9	; 0x09
     75c:	9a 85       	ldd	r25, Y+10	; 0x0a
     75e:	fc 01       	movw	r30, r24
     760:	33 83       	std	Z+3, r19	; 0x03
     762:	22 83       	std	Z+2, r18	; 0x02
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	9a 81       	ldd	r25, Y+2	; 0x02
     768:	2d 85       	ldd	r18, Y+13	; 0x0d
     76a:	3e 85       	ldd	r19, Y+14	; 0x0e
     76c:	fc 01       	movw	r30, r24
     76e:	33 83       	std	Z+3, r19	; 0x03
     770:	22 83       	std	Z+2, r18	; 0x02
     772:	89 85       	ldd	r24, Y+9	; 0x09
     774:	9a 85       	ldd	r25, Y+10	; 0x0a
     776:	fc 01       	movw	r30, r24
     778:	82 81       	ldd	r24, Z+2	; 0x02
     77a:	93 81       	ldd	r25, Z+3	; 0x03
     77c:	9c 87       	std	Y+12, r25	; 0x0c
     77e:	8b 87       	std	Y+11, r24	; 0x0b
     780:	8c e3       	ldi	r24, 0x3C	; 60
     782:	97 e0       	ldi	r25, 0x07	; 7
     784:	98 87       	std	Y+8, r25	; 0x08
     786:	8f 83       	std	Y+7, r24	; 0x07
     788:	07 c0       	rjmp	.+14     	; 0x798 <pvPortMalloc+0x166>
     78a:	8f 81       	ldd	r24, Y+7	; 0x07
     78c:	98 85       	ldd	r25, Y+8	; 0x08
     78e:	fc 01       	movw	r30, r24
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	98 87       	std	Y+8, r25	; 0x08
     796:	8f 83       	std	Y+7, r24	; 0x07
     798:	8f 81       	ldd	r24, Y+7	; 0x07
     79a:	98 85       	ldd	r25, Y+8	; 0x08
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	fc 01       	movw	r30, r24
     7a4:	22 81       	ldd	r18, Z+2	; 0x02
     7a6:	33 81       	ldd	r19, Z+3	; 0x03
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 17       	cp	r18, r24
     7ae:	39 07       	cpc	r19, r25
     7b0:	60 f3       	brcs	.-40     	; 0x78a <pvPortMalloc+0x158>
     7b2:	8f 81       	ldd	r24, Y+7	; 0x07
     7b4:	98 85       	ldd	r25, Y+8	; 0x08
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 81       	ld	r18, Z
     7ba:	31 81       	ldd	r19, Z+1	; 0x01
     7bc:	89 85       	ldd	r24, Y+9	; 0x09
     7be:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c0:	fc 01       	movw	r30, r24
     7c2:	31 83       	std	Z+1, r19	; 0x01
     7c4:	20 83       	st	Z, r18
     7c6:	8f 81       	ldd	r24, Y+7	; 0x07
     7c8:	98 85       	ldd	r25, Y+8	; 0x08
     7ca:	29 85       	ldd	r18, Y+9	; 0x09
     7cc:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ce:	fc 01       	movw	r30, r24
     7d0:	31 83       	std	Z+1, r19	; 0x01
     7d2:	20 83       	st	Z, r18
     7d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	fc 01       	movw	r30, r24
     7e2:	82 81       	ldd	r24, Z+2	; 0x02
     7e4:	93 81       	ldd	r25, Z+3	; 0x03
     7e6:	a9 01       	movw	r20, r18
     7e8:	48 1b       	sub	r20, r24
     7ea:	59 0b       	sbc	r21, r25
     7ec:	ca 01       	movw	r24, r20
     7ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     7f6:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskResumeAll>
     7fa:	8d 81       	ldd	r24, Y+5	; 0x05
     7fc:	9e 81       	ldd	r25, Y+6	; 0x06
     7fe:	2e 96       	adiw	r28, 0x0e	; 14
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <vPortFree>:
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	2a 97       	sbiw	r28, 0x0a	; 10
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	9a 87       	std	Y+10, r25	; 0x0a
     826:	89 87       	std	Y+9, r24	; 0x09
     828:	89 85       	ldd	r24, Y+9	; 0x09
     82a:	9a 85       	ldd	r25, Y+10	; 0x0a
     82c:	9c 83       	std	Y+4, r25	; 0x04
     82e:	8b 83       	std	Y+3, r24	; 0x03
     830:	89 85       	ldd	r24, Y+9	; 0x09
     832:	9a 85       	ldd	r25, Y+10	; 0x0a
     834:	89 2b       	or	r24, r25
     836:	09 f4       	brne	.+2      	; 0x83a <vPortFree+0x2a>
     838:	53 c0       	rjmp	.+166    	; 0x8e0 <vPortFree+0xd0>
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	91 95       	neg	r25
     840:	81 95       	neg	r24
     842:	91 09       	sbc	r25, r1
     844:	2b 81       	ldd	r18, Y+3	; 0x03
     846:	3c 81       	ldd	r19, Y+4	; 0x04
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	8b 83       	std	Y+3, r24	; 0x03
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	9e 83       	std	Y+6, r25	; 0x06
     856:	8d 83       	std	Y+5, r24	; 0x05
     858:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <vTaskSuspendAll>
     85c:	8d 81       	ldd	r24, Y+5	; 0x05
     85e:	9e 81       	ldd	r25, Y+6	; 0x06
     860:	fc 01       	movw	r30, r24
     862:	82 81       	ldd	r24, Z+2	; 0x02
     864:	93 81       	ldd	r25, Z+3	; 0x03
     866:	98 87       	std	Y+8, r25	; 0x08
     868:	8f 83       	std	Y+7, r24	; 0x07
     86a:	8c e3       	ldi	r24, 0x3C	; 60
     86c:	97 e0       	ldi	r25, 0x07	; 7
     86e:	9a 83       	std	Y+2, r25	; 0x02
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	07 c0       	rjmp	.+14     	; 0x882 <vPortFree+0x72>
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	9a 81       	ldd	r25, Y+2	; 0x02
     878:	fc 01       	movw	r30, r24
     87a:	80 81       	ld	r24, Z
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	fc 01       	movw	r30, r24
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	fc 01       	movw	r30, r24
     88e:	22 81       	ldd	r18, Z+2	; 0x02
     890:	33 81       	ldd	r19, Z+3	; 0x03
     892:	8f 81       	ldd	r24, Y+7	; 0x07
     894:	98 85       	ldd	r25, Y+8	; 0x08
     896:	28 17       	cp	r18, r24
     898:	39 07       	cpc	r19, r25
     89a:	60 f3       	brcs	.-40     	; 0x874 <vPortFree+0x64>
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	9a 81       	ldd	r25, Y+2	; 0x02
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 81       	ld	r18, Z
     8a4:	31 81       	ldd	r19, Z+1	; 0x01
     8a6:	8d 81       	ldd	r24, Y+5	; 0x05
     8a8:	9e 81       	ldd	r25, Y+6	; 0x06
     8aa:	fc 01       	movw	r30, r24
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
     8b4:	2d 81       	ldd	r18, Y+5	; 0x05
     8b6:	3e 81       	ldd	r19, Y+6	; 0x06
     8b8:	fc 01       	movw	r30, r24
     8ba:	31 83       	std	Z+1, r19	; 0x01
     8bc:	20 83       	st	Z, r18
     8be:	8d 81       	ldd	r24, Y+5	; 0x05
     8c0:	9e 81       	ldd	r25, Y+6	; 0x06
     8c2:	fc 01       	movw	r30, r24
     8c4:	22 81       	ldd	r18, Z+2	; 0x02
     8c6:	33 81       	ldd	r19, Z+3	; 0x03
     8c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8d0:	82 0f       	add	r24, r18
     8d2:	93 1f       	adc	r25, r19
     8d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     8dc:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskResumeAll>
     8e0:	00 00       	nop
     8e2:	2a 96       	adiw	r28, 0x0a	; 10
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <prvHeapInit+0x6>
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <prvHeapInit+0x8>
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     900:	81 e6       	ldi	r24, 0x61	; 97
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	9a 83       	std	Y+2, r25	; 0x02
     906:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <xStart+0x1>
     910:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <xStart>
	xStart.xBlockSize = ( size_t ) 0;
     914:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <xStart+0x3>
     918:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <xStart+0x2>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     91c:	8b ed       	ldi	r24, 0xDB	; 219
     91e:	95 e0       	ldi	r25, 0x05	; 5
     920:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <xEnd+0x3>
     924:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <xEnd+0x2>
	xEnd.pxNextFreeBlock = NULL;
     928:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <xEnd+0x1>
     92c:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <xEnd>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	9c 83       	std	Y+4, r25	; 0x04
     936:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	2b ed       	ldi	r18, 0xDB	; 219
     93e:	35 e0       	ldi	r19, 0x05	; 5
     940:	fc 01       	movw	r30, r24
     942:	33 83       	std	Z+3, r19	; 0x03
     944:	22 83       	std	Z+2, r18	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	9c 81       	ldd	r25, Y+4	; 0x04
     94a:	20 e4       	ldi	r18, 0x40	; 64
     94c:	37 e0       	ldi	r19, 0x07	; 7
     94e:	fc 01       	movw	r30, r24
     950:	31 83       	std	Z+1, r19	; 0x01
     952:	20 83       	st	Z, r18
}
     954:	00 00       	nop
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	28 97       	sbiw	r28, 0x08	; 8
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	7e 83       	std	Y+6, r23	; 0x06
     97e:	6d 83       	std	Y+5, r22	; 0x05
     980:	58 87       	std	Y+8, r21	; 0x08
     982:	4f 83       	std	Y+7, r20	; 0x07
     984:	8b 81       	ldd	r24, Y+3	; 0x03
     986:	9c 81       	ldd	r25, Y+4	; 0x04
     988:	21 e1       	ldi	r18, 0x11	; 17
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	9c 81       	ldd	r25, Y+4	; 0x04
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	9c 83       	std	Y+4, r25	; 0x04
     996:	8b 83       	std	Y+3, r24	; 0x03
     998:	8b 81       	ldd	r24, Y+3	; 0x03
     99a:	9c 81       	ldd	r25, Y+4	; 0x04
     99c:	22 e2       	ldi	r18, 0x22	; 34
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	23 e3       	ldi	r18, 0x33	; 51
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	8d 81       	ldd	r24, Y+5	; 0x05
     9c2:	9e 81       	ldd	r25, Y+6	; 0x06
     9c4:	9a 83       	std	Y+2, r25	; 0x02
     9c6:	89 83       	std	Y+1, r24	; 0x01
     9c8:	29 81       	ldd	r18, Y+1	; 0x01
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
     9d2:	8b 81       	ldd	r24, Y+3	; 0x03
     9d4:	9c 81       	ldd	r25, Y+4	; 0x04
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	8b 83       	std	Y+3, r24	; 0x03
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	9a 81       	ldd	r25, Y+2	; 0x02
     9e0:	89 2f       	mov	r24, r25
     9e2:	99 27       	eor	r25, r25
     9e4:	9a 83       	std	Y+2, r25	; 0x02
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	29 81       	ldd	r18, Y+1	; 0x01
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	9c 81       	ldd	r25, Y+4	; 0x04
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	fc 01       	movw	r30, r24
     a02:	10 82       	st	Z, r1
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 83       	std	Y+3, r24	; 0x03
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	9c 81       	ldd	r25, Y+4	; 0x04
     a12:	20 e8       	ldi	r18, 0x80	; 128
     a14:	fc 01       	movw	r30, r24
     a16:	20 83       	st	Z, r18
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	9c 81       	ldd	r25, Y+4	; 0x04
     a26:	fc 01       	movw	r30, r24
     a28:	10 82       	st	Z, r1
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	9c 83       	std	Y+4, r25	; 0x04
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	8b 81       	ldd	r24, Y+3	; 0x03
     a36:	9c 81       	ldd	r25, Y+4	; 0x04
     a38:	22 e0       	ldi	r18, 0x02	; 2
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
     a3e:	8b 81       	ldd	r24, Y+3	; 0x03
     a40:	9c 81       	ldd	r25, Y+4	; 0x04
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	9c 83       	std	Y+4, r25	; 0x04
     a46:	8b 83       	std	Y+3, r24	; 0x03
     a48:	8b 81       	ldd	r24, Y+3	; 0x03
     a4a:	9c 81       	ldd	r25, Y+4	; 0x04
     a4c:	23 e0       	ldi	r18, 0x03	; 3
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9c 81       	ldd	r25, Y+4	; 0x04
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	8b 83       	std	Y+3, r24	; 0x03
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	24 e0       	ldi	r18, 0x04	; 4
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
     a68:	9c 81       	ldd	r25, Y+4	; 0x04
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	9c 83       	std	Y+4, r25	; 0x04
     a6e:	8b 83       	std	Y+3, r24	; 0x03
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	9c 81       	ldd	r25, Y+4	; 0x04
     a74:	25 e0       	ldi	r18, 0x05	; 5
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	26 e0       	ldi	r18, 0x06	; 6
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	8b 83       	std	Y+3, r24	; 0x03
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	27 e0       	ldi	r18, 0x07	; 7
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 83       	st	Z, r18
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	8b 83       	std	Y+3, r24	; 0x03
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	9c 81       	ldd	r25, Y+4	; 0x04
     ab0:	28 e0       	ldi	r18, 0x08	; 8
     ab2:	fc 01       	movw	r30, r24
     ab4:	20 83       	st	Z, r18
     ab6:	8b 81       	ldd	r24, Y+3	; 0x03
     ab8:	9c 81       	ldd	r25, Y+4	; 0x04
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	9c 83       	std	Y+4, r25	; 0x04
     abe:	8b 83       	std	Y+3, r24	; 0x03
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	9c 81       	ldd	r25, Y+4	; 0x04
     ac4:	29 e0       	ldi	r18, 0x09	; 9
     ac6:	fc 01       	movw	r30, r24
     ac8:	20 83       	st	Z, r18
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	9c 83       	std	Y+4, r25	; 0x04
     ad2:	8b 83       	std	Y+3, r24	; 0x03
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	20 e1       	ldi	r18, 0x10	; 16
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	9c 83       	std	Y+4, r25	; 0x04
     ae6:	8b 83       	std	Y+3, r24	; 0x03
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	21 e1       	ldi	r18, 0x11	; 17
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	9c 81       	ldd	r25, Y+4	; 0x04
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	9c 83       	std	Y+4, r25	; 0x04
     afa:	8b 83       	std	Y+3, r24	; 0x03
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	22 e1       	ldi	r18, 0x12	; 18
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	9c 81       	ldd	r25, Y+4	; 0x04
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	9c 83       	std	Y+4, r25	; 0x04
     b0e:	8b 83       	std	Y+3, r24	; 0x03
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	9c 81       	ldd	r25, Y+4	; 0x04
     b14:	23 e1       	ldi	r18, 0x13	; 19
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
     b1a:	8b 81       	ldd	r24, Y+3	; 0x03
     b1c:	9c 81       	ldd	r25, Y+4	; 0x04
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	9c 81       	ldd	r25, Y+4	; 0x04
     b28:	24 e1       	ldi	r18, 0x14	; 20
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 83       	st	Z, r18
     b2e:	8b 81       	ldd	r24, Y+3	; 0x03
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	9c 83       	std	Y+4, r25	; 0x04
     b36:	8b 83       	std	Y+3, r24	; 0x03
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	25 e1       	ldi	r18, 0x15	; 21
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
     b42:	8b 81       	ldd	r24, Y+3	; 0x03
     b44:	9c 81       	ldd	r25, Y+4	; 0x04
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	9c 83       	std	Y+4, r25	; 0x04
     b4a:	8b 83       	std	Y+3, r24	; 0x03
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	26 e1       	ldi	r18, 0x16	; 22
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	9c 83       	std	Y+4, r25	; 0x04
     b5e:	8b 83       	std	Y+3, r24	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	27 e1       	ldi	r18, 0x17	; 23
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	9c 83       	std	Y+4, r25	; 0x04
     b72:	8b 83       	std	Y+3, r24	; 0x03
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	28 e1       	ldi	r18, 0x18	; 24
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	29 e1       	ldi	r18, 0x19	; 25
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	9c 81       	ldd	r25, Y+4	; 0x04
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	9c 83       	std	Y+4, r25	; 0x04
     b9a:	8b 83       	std	Y+3, r24	; 0x03
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	20 e2       	ldi	r18, 0x20	; 32
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	9c 83       	std	Y+4, r25	; 0x04
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	21 e2       	ldi	r18, 0x21	; 33
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	9c 83       	std	Y+4, r25	; 0x04
     bc2:	8b 83       	std	Y+3, r24	; 0x03
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	22 e2       	ldi	r18, 0x22	; 34
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	23 e2       	ldi	r18, 0x23	; 35
     bde:	fc 01       	movw	r30, r24
     be0:	20 83       	st	Z, r18
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	9c 83       	std	Y+4, r25	; 0x04
     bea:	8b 83       	std	Y+3, r24	; 0x03
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	29 81       	ldd	r18, Y+1	; 0x01
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	9c 83       	std	Y+4, r25	; 0x04
     c06:	8b 83       	std	Y+3, r24	; 0x03
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	89 2f       	mov	r24, r25
     c0e:	99 27       	eor	r25, r25
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	29 81       	ldd	r18, Y+1	; 0x01
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	26 e2       	ldi	r18, 0x26	; 38
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	9c 83       	std	Y+4, r25	; 0x04
     c3a:	8b 83       	std	Y+3, r24	; 0x03
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	27 e2       	ldi	r18, 0x27	; 39
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	28 e2       	ldi	r18, 0x28	; 40
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	9c 83       	std	Y+4, r25	; 0x04
     c62:	8b 83       	std	Y+3, r24	; 0x03
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	9c 81       	ldd	r25, Y+4	; 0x04
     c68:	29 e2       	ldi	r18, 0x29	; 41
     c6a:	fc 01       	movw	r30, r24
     c6c:	20 83       	st	Z, r18
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	9c 83       	std	Y+4, r25	; 0x04
     c76:	8b 83       	std	Y+3, r24	; 0x03
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	20 e3       	ldi	r18, 0x30	; 48
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	9c 83       	std	Y+4, r25	; 0x04
     c8a:	8b 83       	std	Y+3, r24	; 0x03
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	21 e3       	ldi	r18, 0x31	; 49
     c92:	fc 01       	movw	r30, r24
     c94:	20 83       	st	Z, r18
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	9c 81       	ldd	r25, Y+4	; 0x04
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	9c 83       	std	Y+4, r25	; 0x04
     c9e:	8b 83       	std	Y+3, r24	; 0x03
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	28 96       	adiw	r28, 0x08	; 8
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <xPortStartScheduler>:
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	0e 94 46 07 	call	0xe8c	; 0xe8c <prvSetupTimerInterrupt>
     cc2:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     cc6:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     cca:	cd 91       	ld	r28, X+
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	dd 91       	ld	r29, X+
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	ff 91       	pop	r31
     cd4:	ef 91       	pop	r30
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	9f 90       	pop	r9
     d00:	8f 90       	pop	r8
     d02:	7f 90       	pop	r7
     d04:	6f 90       	pop	r6
     d06:	5f 90       	pop	r5
     d08:	4f 90       	pop	r4
     d0a:	3f 90       	pop	r3
     d0c:	2f 90       	pop	r2
     d0e:	1f 90       	pop	r1
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	08 95       	ret
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	0f 92       	push	r0
     d28:	1f 92       	push	r1
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 92       	push	r2
     d2e:	3f 92       	push	r3
     d30:	4f 92       	push	r4
     d32:	5f 92       	push	r5
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
     d68:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     d6c:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     d70:	0d b6       	in	r0, 0x3d	; 61
     d72:	0d 92       	st	X+, r0
     d74:	0e b6       	in	r0, 0x3e	; 62
     d76:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d78:	0e 94 a8 11 	call	0x2350	; 0x2350 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d7c:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     d80:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     d84:	cd 91       	ld	r28, X+
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	dd 91       	ld	r29, X+
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	df 90       	pop	r13
     db2:	cf 90       	pop	r12
     db4:	bf 90       	pop	r11
     db6:	af 90       	pop	r10
     db8:	9f 90       	pop	r9
     dba:	8f 90       	pop	r8
     dbc:	7f 90       	pop	r7
     dbe:	6f 90       	pop	r6
     dc0:	5f 90       	pop	r5
     dc2:	4f 90       	pop	r4
     dc4:	3f 90       	pop	r3
     dc6:	2f 90       	pop	r2
     dc8:	1f 90       	pop	r1
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0

	asm volatile ( "ret" );
     dd0:	08 95       	ret
	...

00000dd4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	0f 92       	push	r0
     ddc:	1f 92       	push	r1
     dde:	11 24       	eor	r1, r1
     de0:	2f 92       	push	r2
     de2:	3f 92       	push	r3
     de4:	4f 92       	push	r4
     de6:	5f 92       	push	r5
     de8:	6f 92       	push	r6
     dea:	7f 92       	push	r7
     dec:	8f 92       	push	r8
     dee:	9f 92       	push	r9
     df0:	af 92       	push	r10
     df2:	bf 92       	push	r11
     df4:	cf 92       	push	r12
     df6:	df 92       	push	r13
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	4f 93       	push	r20
     e06:	5f 93       	push	r21
     e08:	6f 93       	push	r22
     e0a:	7f 93       	push	r23
     e0c:	8f 93       	push	r24
     e0e:	9f 93       	push	r25
     e10:	af 93       	push	r26
     e12:	bf 93       	push	r27
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
     e1c:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     e20:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     e24:	0d b6       	in	r0, 0x3d	; 61
     e26:	0d 92       	st	X+, r0
     e28:	0e b6       	in	r0, 0x3e	; 62
     e2a:	0d 92       	st	X+, r0
	xTaskIncrementTick();
     e2c:	0e 94 8b 10 	call	0x2116	; 0x2116 <xTaskIncrementTick>
	vTaskSwitchContext();
     e30:	0e 94 a8 11 	call	0x2350	; 0x2350 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e34:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     e38:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     e3c:	cd 91       	ld	r28, X+
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	dd 91       	ld	r29, X+
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	bf 91       	pop	r27
     e4e:	af 91       	pop	r26
     e50:	9f 91       	pop	r25
     e52:	8f 91       	pop	r24
     e54:	7f 91       	pop	r23
     e56:	6f 91       	pop	r22
     e58:	5f 91       	pop	r21
     e5a:	4f 91       	pop	r20
     e5c:	3f 91       	pop	r19
     e5e:	2f 91       	pop	r18
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	9f 90       	pop	r9
     e72:	8f 90       	pop	r8
     e74:	7f 90       	pop	r7
     e76:	6f 90       	pop	r6
     e78:	5f 90       	pop	r5
     e7a:	4f 90       	pop	r4
     e7c:	3f 90       	pop	r3
     e7e:	2f 90       	pop	r2
     e80:	1f 90       	pop	r1
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e88:	08 95       	ret
	...

00000e8c <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	00 d0       	rcall	.+0      	; 0xe92 <prvSetupTimerInterrupt+0x6>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <prvSetupTimerInterrupt+0x8>
     e94:	1f 92       	push	r1
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
    unsigned char ucLowByte;

    /* Using 16bit timer 1 to generate the tick.  Correct fuses must be
    selected for the configCPU_CLOCK_HZ clock. */

    ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
     e9a:	80 e8       	ldi	r24, 0x80	; 128
     e9c:	9e e3       	ldi	r25, 0x3E	; 62
     e9e:	a0 e0       	ldi	r26, 0x00	; 0
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	ab 83       	std	Y+3, r26	; 0x03
     ea8:	bc 83       	std	Y+4, r27	; 0x04

    /* We only have 16 bits so have to scale to get our required tick rate. */
    ulCompareMatch /= portCLOCK_PRESCALER;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	ab 81       	ldd	r26, Y+3	; 0x03
     eb0:	bc 81       	ldd	r27, Y+4	; 0x04
     eb2:	68 94       	set
     eb4:	15 f8       	bld	r1, 5
     eb6:	b6 95       	lsr	r27
     eb8:	a7 95       	ror	r26
     eba:	97 95       	ror	r25
     ebc:	87 95       	ror	r24
     ebe:	16 94       	lsr	r1
     ec0:	d1 f7       	brne	.-12     	; 0xeb6 <prvSetupTimerInterrupt+0x2a>
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	ab 83       	std	Y+3, r26	; 0x03
     ec8:	bc 83       	std	Y+4, r27	; 0x04

    /* Adjust for correct value. */
    ulCompareMatch -= ( unsigned long ) 1;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	ab 81       	ldd	r26, Y+3	; 0x03
     ed0:	bc 81       	ldd	r27, Y+4	; 0x04
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	a1 09       	sbc	r26, r1
     ed6:	b1 09       	sbc	r27, r1
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	ab 83       	std	Y+3, r26	; 0x03
     ede:	bc 83       	std	Y+4, r27	; 0x04

    /* Setup compare match value for compare match A.  Interrupts are disabled
    before this is called so we need not worry here. */
    OCR1A = ulCompareMatch;
     ee0:	88 e8       	ldi	r24, 0x88	; 136
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	29 81       	ldd	r18, Y+1	; 0x01
     ee6:	3a 81       	ldd	r19, Y+2	; 0x02
     ee8:	fc 01       	movw	r30, r24
     eea:	31 83       	std	Z+1, r19	; 0x01
     eec:	20 83       	st	Z, r18

    /* Setup clock source and compare match behaviour. */
    TCCR1A &= ~(_BV(WGM11) | _BV(WGM10));
     eee:	80 e8       	ldi	r24, 0x80	; 128
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	20 e8       	ldi	r18, 0x80	; 128
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	f9 01       	movw	r30, r18
     ef8:	20 81       	ld	r18, Z
     efa:	2c 7f       	andi	r18, 0xFC	; 252
     efc:	fc 01       	movw	r30, r24
     efe:	20 83       	st	Z, r18
    ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
     f00:	8b e0       	ldi	r24, 0x0B	; 11
     f02:	8d 83       	std	Y+5, r24	; 0x05
    TCCR1B = ucLowByte;
     f04:	81 e8       	ldi	r24, 0x81	; 129
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	2d 81       	ldd	r18, Y+5	; 0x05
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18

    /* Enable the interrupt - this is okay as interrupt are currently globally
    disabled. */
    ucLowByte = TIMSK1;
     f0e:	8f e6       	ldi	r24, 0x6F	; 111
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	fc 01       	movw	r30, r24
     f14:	80 81       	ld	r24, Z
     f16:	8d 83       	std	Y+5, r24	; 0x05
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	82 60       	ori	r24, 0x02	; 2
     f1c:	8d 83       	std	Y+5, r24	; 0x05
    TIMSK1 = ucLowByte;
     f1e:	8f e6       	ldi	r24, 0x6F	; 111
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	2d 81       	ldd	r18, Y+5	; 0x05
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
}
     f28:	00 00       	nop
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     f3a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vPortYieldFromTick>
		asm volatile ( "reti" );
     f3e:	18 95       	reti
	...

00000f42 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	00 d0       	rcall	.+0      	; 0xf48 <xQueueGenericReset+0x6>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <xQueueGenericReset+0x8>
     f4a:	1f 92       	push	r1
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
     f54:	6d 83       	std	Y+5, r22	; 0x05
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	0f 92       	push	r0
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	fc 01       	movw	r30, r24
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	29 81       	ldd	r18, Y+1	; 0x01
     f70:	3a 81       	ldd	r19, Y+2	; 0x02
     f72:	f9 01       	movw	r30, r18
     f74:	23 8d       	ldd	r18, Z+27	; 0x1b
     f76:	42 2f       	mov	r20, r18
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	29 81       	ldd	r18, Y+1	; 0x01
     f7c:	3a 81       	ldd	r19, Y+2	; 0x02
     f7e:	f9 01       	movw	r30, r18
     f80:	24 8d       	ldd	r18, Z+28	; 0x1c
     f82:	22 2f       	mov	r18, r18
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	42 9f       	mul	r20, r18
     f88:	b0 01       	movw	r22, r0
     f8a:	43 9f       	mul	r20, r19
     f8c:	70 0d       	add	r23, r0
     f8e:	52 9f       	mul	r21, r18
     f90:	70 0d       	add	r23, r0
     f92:	11 24       	eor	r1, r1
     f94:	9b 01       	movw	r18, r22
     f96:	28 0f       	add	r18, r24
     f98:	39 1f       	adc	r19, r25
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	fc 01       	movw	r30, r24
     fa0:	33 83       	std	Z+3, r19	; 0x03
     fa2:	22 83       	std	Z+2, r18	; 0x02
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	9a 81       	ldd	r25, Y+2	; 0x02
     fa8:	fc 01       	movw	r30, r24
     faa:	12 8e       	std	Z+26, r1	; 0x1a
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	fc 01       	movw	r30, r24
     fb2:	20 81       	ld	r18, Z
     fb4:	31 81       	ldd	r19, Z+1	; 0x01
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	fc 01       	movw	r30, r24
     fbc:	35 83       	std	Z+5, r19	; 0x05
     fbe:	24 83       	std	Z+4, r18	; 0x04
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	fc 01       	movw	r30, r24
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	29 81       	ldd	r18, Y+1	; 0x01
     fcc:	3a 81       	ldd	r19, Y+2	; 0x02
     fce:	f9 01       	movw	r30, r18
     fd0:	23 8d       	ldd	r18, Z+27	; 0x1b
     fd2:	22 2f       	mov	r18, r18
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	a9 01       	movw	r20, r18
     fd8:	41 50       	subi	r20, 0x01	; 1
     fda:	51 09       	sbc	r21, r1
     fdc:	29 81       	ldd	r18, Y+1	; 0x01
     fde:	3a 81       	ldd	r19, Y+2	; 0x02
     fe0:	f9 01       	movw	r30, r18
     fe2:	24 8d       	ldd	r18, Z+28	; 0x1c
     fe4:	22 2f       	mov	r18, r18
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	42 9f       	mul	r20, r18
     fea:	b0 01       	movw	r22, r0
     fec:	43 9f       	mul	r20, r19
     fee:	70 0d       	add	r23, r0
     ff0:	52 9f       	mul	r21, r18
     ff2:	70 0d       	add	r23, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	9b 01       	movw	r18, r22
     ff8:	28 0f       	add	r18, r24
     ffa:	39 1f       	adc	r19, r25
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	fc 01       	movw	r30, r24
    1002:	37 83       	std	Z+7, r19	; 0x07
    1004:	26 83       	std	Z+6, r18	; 0x06
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	2f ef       	ldi	r18, 0xFF	; 255
    100c:	fc 01       	movw	r30, r24
    100e:	25 8f       	std	Z+29, r18	; 0x1d
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	2f ef       	ldi	r18, 0xFF	; 255
    1016:	fc 01       	movw	r30, r24
    1018:	26 8f       	std	Z+30, r18	; 0x1e
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	88 23       	and	r24, r24
    101e:	81 f4       	brne	.+32     	; 0x1040 <xQueueGenericReset+0xfe>
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	fc 01       	movw	r30, r24
    1026:	80 85       	ldd	r24, Z+8	; 0x08
    1028:	88 23       	and	r24, r24
    102a:	a1 f0       	breq	.+40     	; 0x1054 <xQueueGenericReset+0x112>
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	08 96       	adiw	r24, 0x08	; 8
    1032:	0e 94 50 12 	call	0x24a0	; 0x24a0 <xTaskRemoveFromEventList>
    1036:	88 23       	and	r24, r24
    1038:	69 f0       	breq	.+26     	; 0x1054 <xQueueGenericReset+0x112>
    103a:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <xQueueGenericReset+0x112>
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	9a 81       	ldd	r25, Y+2	; 0x02
    1044:	08 96       	adiw	r24, 0x08	; 8
    1046:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	41 96       	adiw	r24, 0x11	; 17
    1050:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <xQueueGenericCreate>:
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	29 97       	sbiw	r28, 0x09	; 9
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	8f 83       	std	Y+7, r24	; 0x07
    1084:	68 87       	std	Y+8, r22	; 0x08
    1086:	49 87       	std	Y+9, r20	; 0x09
    1088:	88 85       	ldd	r24, Y+8	; 0x08
    108a:	88 23       	and	r24, r24
    108c:	19 f4       	brne	.+6      	; 0x1094 <xQueueGenericCreate+0x2a>
    108e:	1a 82       	std	Y+2, r1	; 0x02
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	0f c0       	rjmp	.+30     	; 0x10b2 <xQueueGenericCreate+0x48>
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	48 2f       	mov	r20, r24
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	88 85       	ldd	r24, Y+8	; 0x08
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	42 9f       	mul	r20, r18
    10a2:	c0 01       	movw	r24, r0
    10a4:	43 9f       	mul	r20, r19
    10a6:	90 0d       	add	r25, r0
    10a8:	52 9f       	mul	r21, r18
    10aa:	90 0d       	add	r25, r0
    10ac:	11 24       	eor	r1, r1
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	81 96       	adiw	r24, 0x21	; 33
    10b8:	0e 94 19 03 	call	0x632	; 0x632 <pvPortMalloc>
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	89 2b       	or	r24, r25
    10c6:	81 f0       	breq	.+32     	; 0x10e8 <xQueueGenericCreate+0x7e>
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	81 96       	adiw	r24, 0x21	; 33
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	2b 81       	ldd	r18, Y+3	; 0x03
    10d4:	3c 81       	ldd	r19, Y+4	; 0x04
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	89 01       	movw	r16, r18
    10dc:	29 85       	ldd	r18, Y+9	; 0x09
    10de:	ac 01       	movw	r20, r24
    10e0:	68 85       	ldd	r22, Y+8	; 0x08
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	0e 94 81 08 	call	0x1102	; 0x1102 <prvInitialiseNewQueue>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	29 96       	adiw	r28, 0x09	; 9
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret

00001102 <prvInitialiseNewQueue>:
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	27 97       	sbiw	r28, 0x07	; 7
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	6a 83       	std	Y+2, r22	; 0x02
    111e:	5c 83       	std	Y+4, r21	; 0x04
    1120:	4b 83       	std	Y+3, r20	; 0x03
    1122:	2d 83       	std	Y+5, r18	; 0x05
    1124:	1f 83       	std	Y+7, r17	; 0x07
    1126:	0e 83       	std	Y+6, r16	; 0x06
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	88 23       	and	r24, r24
    112c:	41 f4       	brne	.+16     	; 0x113e <prvInitialiseNewQueue+0x3c>
    112e:	8e 81       	ldd	r24, Y+6	; 0x06
    1130:	9f 81       	ldd	r25, Y+7	; 0x07
    1132:	2e 81       	ldd	r18, Y+6	; 0x06
    1134:	3f 81       	ldd	r19, Y+7	; 0x07
    1136:	fc 01       	movw	r30, r24
    1138:	31 83       	std	Z+1, r19	; 0x01
    113a:	20 83       	st	Z, r18
    113c:	07 c0       	rjmp	.+14     	; 0x114c <prvInitialiseNewQueue+0x4a>
    113e:	8e 81       	ldd	r24, Y+6	; 0x06
    1140:	9f 81       	ldd	r25, Y+7	; 0x07
    1142:	2b 81       	ldd	r18, Y+3	; 0x03
    1144:	3c 81       	ldd	r19, Y+4	; 0x04
    1146:	fc 01       	movw	r30, r24
    1148:	31 83       	std	Z+1, r19	; 0x01
    114a:	20 83       	st	Z, r18
    114c:	8e 81       	ldd	r24, Y+6	; 0x06
    114e:	9f 81       	ldd	r25, Y+7	; 0x07
    1150:	29 81       	ldd	r18, Y+1	; 0x01
    1152:	fc 01       	movw	r30, r24
    1154:	23 8f       	std	Z+27, r18	; 0x1b
    1156:	8e 81       	ldd	r24, Y+6	; 0x06
    1158:	9f 81       	ldd	r25, Y+7	; 0x07
    115a:	2a 81       	ldd	r18, Y+2	; 0x02
    115c:	fc 01       	movw	r30, r24
    115e:	24 8f       	std	Z+28, r18	; 0x1c
    1160:	8e 81       	ldd	r24, Y+6	; 0x06
    1162:	9f 81       	ldd	r25, Y+7	; 0x07
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	0e 94 a1 07 	call	0xf42	; 0xf42 <xQueueGenericReset>
    116a:	8e 81       	ldd	r24, Y+6	; 0x06
    116c:	9f 81       	ldd	r25, Y+7	; 0x07
    116e:	2d 81       	ldd	r18, Y+5	; 0x05
    1170:	fc 01       	movw	r30, r24
    1172:	20 a3       	std	Z+32, r18	; 0x20
    1174:	00 00       	nop
    1176:	27 96       	adiw	r28, 0x07	; 7
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	08 95       	ret

0000118c <prvInitialiseMutex>:
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	00 d0       	rcall	.+0      	; 0x1192 <prvInitialiseMutex+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	89 2b       	or	r24, r25
    11a0:	b9 f0       	breq	.+46     	; 0x11d0 <prvInitialiseMutex+0x44>
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	fc 01       	movw	r30, r24
    11a8:	13 82       	std	Z+3, r1	; 0x03
    11aa:	12 82       	std	Z+2, r1	; 0x02
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	fc 01       	movw	r30, r24
    11b2:	11 82       	std	Z+1, r1	; 0x01
    11b4:	10 82       	st	Z, r1
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	fc 01       	movw	r30, r24
    11bc:	16 82       	std	Z+6, r1	; 0x06
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	0e 94 0e 09 	call	0x121c	; 0x121c <xQueueGenericSend>
    11d0:	00 00       	nop
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <xQueueCreateMutex>:
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <xQueueCreateMutex+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <xQueueCreateMutex+0x8>
    11e4:	1f 92       	push	r1
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	1a 82       	std	Y+2, r1	; 0x02
    11f2:	4d 81       	ldd	r20, Y+5	; 0x05
    11f4:	6a 81       	ldd	r22, Y+2	; 0x02
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	0e 94 35 08 	call	0x106a	; 0x106a <xQueueGenericCreate>
    11fc:	9c 83       	std	Y+4, r25	; 0x04
    11fe:	8b 83       	std	Y+3, r24	; 0x03
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	0e 94 c6 08 	call	0x118c	; 0x118c <prvInitialiseMutex>
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <xQueueGenericSend>:
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	2e 97       	sbiw	r28, 0x0e	; 14
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	99 87       	std	Y+9, r25	; 0x09
    1232:	88 87       	std	Y+8, r24	; 0x08
    1234:	7b 87       	std	Y+11, r23	; 0x0b
    1236:	6a 87       	std	Y+10, r22	; 0x0a
    1238:	5d 87       	std	Y+13, r21	; 0x0d
    123a:	4c 87       	std	Y+12, r20	; 0x0c
    123c:	2e 87       	std	Y+14, r18	; 0x0e
    123e:	19 82       	std	Y+1, r1	; 0x01
    1240:	88 85       	ldd	r24, Y+8	; 0x08
    1242:	99 85       	ldd	r25, Y+9	; 0x09
    1244:	9b 83       	std	Y+3, r25	; 0x03
    1246:	8a 83       	std	Y+2, r24	; 0x02
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	0f 92       	push	r0
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	fc 01       	movw	r30, r24
    1254:	22 8d       	ldd	r18, Z+26	; 0x1a
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	9b 81       	ldd	r25, Y+3	; 0x03
    125a:	fc 01       	movw	r30, r24
    125c:	83 8d       	ldd	r24, Z+27	; 0x1b
    125e:	28 17       	cp	r18, r24
    1260:	18 f0       	brcs	.+6      	; 0x1268 <xQueueGenericSend+0x4c>
    1262:	8e 85       	ldd	r24, Y+14	; 0x0e
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	11 f5       	brne	.+68     	; 0x12ac <xQueueGenericSend+0x90>
    1268:	2a 85       	ldd	r18, Y+10	; 0x0a
    126a:	3b 85       	ldd	r19, Y+11	; 0x0b
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	9b 81       	ldd	r25, Y+3	; 0x03
    1270:	4e 85       	ldd	r20, Y+14	; 0x0e
    1272:	b9 01       	movw	r22, r18
    1274:	0e 94 b5 0a 	call	0x156a	; 0x156a <prvCopyDataToQueue>
    1278:	8c 83       	std	Y+4, r24	; 0x04
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	fc 01       	movw	r30, r24
    1280:	81 89       	ldd	r24, Z+17	; 0x11
    1282:	88 23       	and	r24, r24
    1284:	51 f0       	breq	.+20     	; 0x129a <xQueueGenericSend+0x7e>
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	9b 81       	ldd	r25, Y+3	; 0x03
    128a:	41 96       	adiw	r24, 0x11	; 17
    128c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <xTaskRemoveFromEventList>
    1290:	88 23       	and	r24, r24
    1292:	41 f0       	breq	.+16     	; 0x12a4 <xQueueGenericSend+0x88>
    1294:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <xQueueGenericSend+0x88>
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	88 23       	and	r24, r24
    129e:	11 f0       	breq	.+4      	; 0x12a4 <xQueueGenericSend+0x88>
    12a0:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	60 c0       	rjmp	.+192    	; 0x136c <xQueueGenericSend+0x150>
    12ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    12b0:	89 2b       	or	r24, r25
    12b2:	21 f4       	brne	.+8      	; 0x12bc <xQueueGenericSend+0xa0>
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	58 c0       	rjmp	.+176    	; 0x136c <xQueueGenericSend+0x150>
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	88 23       	and	r24, r24
    12c0:	31 f4       	brne	.+12     	; 0x12ce <xQueueGenericSend+0xb2>
    12c2:	ce 01       	movw	r24, r28
    12c4:	05 96       	adiw	r24, 0x05	; 5
    12c6:	0e 94 bd 12 	call	0x257a	; 0x257a <vTaskSetTimeOutState>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <vTaskSuspendAll>
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	0f 92       	push	r0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	9b 81       	ldd	r25, Y+3	; 0x03
    12e0:	fc 01       	movw	r30, r24
    12e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    12e4:	8f 3f       	cpi	r24, 0xFF	; 255
    12e6:	21 f4       	brne	.+8      	; 0x12f0 <xQueueGenericSend+0xd4>
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	9b 81       	ldd	r25, Y+3	; 0x03
    12ec:	fc 01       	movw	r30, r24
    12ee:	15 8e       	std	Z+29, r1	; 0x1d
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	9b 81       	ldd	r25, Y+3	; 0x03
    12f4:	fc 01       	movw	r30, r24
    12f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    12f8:	8f 3f       	cpi	r24, 0xFF	; 255
    12fa:	21 f4       	brne	.+8      	; 0x1304 <xQueueGenericSend+0xe8>
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1300:	fc 01       	movw	r30, r24
    1302:	16 8e       	std	Z+30, r1	; 0x1e
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	9e 01       	movw	r18, r28
    130a:	24 5f       	subi	r18, 0xF4	; 244
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	ce 01       	movw	r24, r28
    1310:	05 96       	adiw	r24, 0x05	; 5
    1312:	b9 01       	movw	r22, r18
    1314:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskCheckForTimeOut>
    1318:	88 23       	and	r24, r24
    131a:	09 f5       	brne	.+66     	; 0x135e <xQueueGenericSend+0x142>
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	9b 81       	ldd	r25, Y+3	; 0x03
    1320:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <prvIsQueueFull>
    1324:	88 23       	and	r24, r24
    1326:	a1 f0       	breq	.+40     	; 0x1350 <xQueueGenericSend+0x134>
    1328:	2c 85       	ldd	r18, Y+12	; 0x0c
    132a:	3d 85       	ldd	r19, Y+13	; 0x0d
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	9b 81       	ldd	r25, Y+3	; 0x03
    1330:	08 96       	adiw	r24, 0x08	; 8
    1332:	b9 01       	movw	r22, r18
    1334:	0e 94 2d 12 	call	0x245a	; 0x245a <vTaskPlaceOnEventList>
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <prvUnlockQueue>
    1340:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskResumeAll>
    1344:	88 23       	and	r24, r24
    1346:	09 f0       	breq	.+2      	; 0x134a <xQueueGenericSend+0x12e>
    1348:	7f cf       	rjmp	.-258    	; 0x1248 <xQueueGenericSend+0x2c>
    134a:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    134e:	7c cf       	rjmp	.-264    	; 0x1248 <xQueueGenericSend+0x2c>
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	9b 81       	ldd	r25, Y+3	; 0x03
    1354:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <prvUnlockQueue>
    1358:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskResumeAll>
    135c:	75 cf       	rjmp	.-278    	; 0x1248 <xQueueGenericSend+0x2c>
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	9b 81       	ldd	r25, Y+3	; 0x03
    1362:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <prvUnlockQueue>
    1366:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskResumeAll>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	2e 96       	adiw	r28, 0x0e	; 14
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <xQueueGenericReceive>:
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	60 97       	sbiw	r28, 0x10	; 16
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	9b 87       	std	Y+11, r25	; 0x0b
    1394:	8a 87       	std	Y+10, r24	; 0x0a
    1396:	7d 87       	std	Y+13, r23	; 0x0d
    1398:	6c 87       	std	Y+12, r22	; 0x0c
    139a:	5f 87       	std	Y+15, r21	; 0x0f
    139c:	4e 87       	std	Y+14, r20	; 0x0e
    139e:	28 8b       	std	Y+16, r18	; 0x10
    13a0:	19 82       	std	Y+1, r1	; 0x01
    13a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    13a6:	9b 83       	std	Y+3, r25	; 0x03
    13a8:	8a 83       	std	Y+2, r24	; 0x02
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	0f 92       	push	r0
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	9b 81       	ldd	r25, Y+3	; 0x03
    13b4:	fc 01       	movw	r30, r24
    13b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    13b8:	8c 83       	std	Y+4, r24	; 0x04
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	88 23       	and	r24, r24
    13be:	09 f4       	brne	.+2      	; 0x13c2 <xQueueGenericReceive+0x44>
    13c0:	51 c0       	rjmp	.+162    	; 0x1464 <xQueueGenericReceive+0xe6>
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	9b 81       	ldd	r25, Y+3	; 0x03
    13c6:	fc 01       	movw	r30, r24
    13c8:	86 81       	ldd	r24, Z+6	; 0x06
    13ca:	97 81       	ldd	r25, Z+7	; 0x07
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    13d2:	3d 85       	ldd	r19, Y+13	; 0x0d
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	b9 01       	movw	r22, r18
    13da:	0e 94 85 0b 	call	0x170a	; 0x170a <prvCopyDataFromQueue>
    13de:	88 89       	ldd	r24, Y+16	; 0x10
    13e0:	88 23       	and	r24, r24
    13e2:	31 f5       	brne	.+76     	; 0x1430 <xQueueGenericReceive+0xb2>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	2f ef       	ldi	r18, 0xFF	; 255
    13e8:	28 0f       	add	r18, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	fc 01       	movw	r30, r24
    13f0:	22 8f       	std	Z+26, r18	; 0x1a
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	9b 81       	ldd	r25, Y+3	; 0x03
    13f6:	fc 01       	movw	r30, r24
    13f8:	80 81       	ld	r24, Z
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	89 2b       	or	r24, r25
    13fe:	41 f4       	brne	.+16     	; 0x1410 <xQueueGenericReceive+0x92>
    1400:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <pvTaskIncrementMutexHeldCount>
    1404:	9c 01       	movw	r18, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	9b 81       	ldd	r25, Y+3	; 0x03
    140a:	fc 01       	movw	r30, r24
    140c:	33 83       	std	Z+3, r19	; 0x03
    140e:	22 83       	std	Z+2, r18	; 0x02
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	9b 81       	ldd	r25, Y+3	; 0x03
    1414:	fc 01       	movw	r30, r24
    1416:	80 85       	ldd	r24, Z+8	; 0x08
    1418:	88 23       	and	r24, r24
    141a:	01 f1       	breq	.+64     	; 0x145c <xQueueGenericReceive+0xde>
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	08 96       	adiw	r24, 0x08	; 8
    1422:	0e 94 50 12 	call	0x24a0	; 0x24a0 <xTaskRemoveFromEventList>
    1426:	88 23       	and	r24, r24
    1428:	c9 f0       	breq	.+50     	; 0x145c <xQueueGenericReceive+0xde>
    142a:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    142e:	16 c0       	rjmp	.+44     	; 0x145c <xQueueGenericReceive+0xde>
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	9b 81       	ldd	r25, Y+3	; 0x03
    1434:	2d 81       	ldd	r18, Y+5	; 0x05
    1436:	3e 81       	ldd	r19, Y+6	; 0x06
    1438:	fc 01       	movw	r30, r24
    143a:	37 83       	std	Z+7, r19	; 0x07
    143c:	26 83       	std	Z+6, r18	; 0x06
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	9b 81       	ldd	r25, Y+3	; 0x03
    1442:	fc 01       	movw	r30, r24
    1444:	81 89       	ldd	r24, Z+17	; 0x11
    1446:	88 23       	and	r24, r24
    1448:	49 f0       	breq	.+18     	; 0x145c <xQueueGenericReceive+0xde>
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	41 96       	adiw	r24, 0x11	; 17
    1450:	0e 94 50 12 	call	0x24a0	; 0x24a0 <xTaskRemoveFromEventList>
    1454:	88 23       	and	r24, r24
    1456:	11 f0       	breq	.+4      	; 0x145c <xQueueGenericReceive+0xde>
    1458:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	7a c0       	rjmp	.+244    	; 0x1558 <xQueueGenericReceive+0x1da>
    1464:	8e 85       	ldd	r24, Y+14	; 0x0e
    1466:	9f 85       	ldd	r25, Y+15	; 0x0f
    1468:	89 2b       	or	r24, r25
    146a:	21 f4       	brne	.+8      	; 0x1474 <xQueueGenericReceive+0xf6>
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	72 c0       	rjmp	.+228    	; 0x1558 <xQueueGenericReceive+0x1da>
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	88 23       	and	r24, r24
    1478:	31 f4       	brne	.+12     	; 0x1486 <xQueueGenericReceive+0x108>
    147a:	ce 01       	movw	r24, r28
    147c:	07 96       	adiw	r24, 0x07	; 7
    147e:	0e 94 bd 12 	call	0x257a	; 0x257a <vTaskSetTimeOutState>
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	0f 90       	pop	r0
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <vTaskSuspendAll>
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	0f 92       	push	r0
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	9b 81       	ldd	r25, Y+3	; 0x03
    1498:	fc 01       	movw	r30, r24
    149a:	85 8d       	ldd	r24, Z+29	; 0x1d
    149c:	8f 3f       	cpi	r24, 0xFF	; 255
    149e:	21 f4       	brne	.+8      	; 0x14a8 <xQueueGenericReceive+0x12a>
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	9b 81       	ldd	r25, Y+3	; 0x03
    14a4:	fc 01       	movw	r30, r24
    14a6:	15 8e       	std	Z+29, r1	; 0x1d
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	9b 81       	ldd	r25, Y+3	; 0x03
    14ac:	fc 01       	movw	r30, r24
    14ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    14b0:	8f 3f       	cpi	r24, 0xFF	; 255
    14b2:	21 f4       	brne	.+8      	; 0x14bc <xQueueGenericReceive+0x13e>
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	9b 81       	ldd	r25, Y+3	; 0x03
    14b8:	fc 01       	movw	r30, r24
    14ba:	16 8e       	std	Z+30, r1	; 0x1e
    14bc:	0f 90       	pop	r0
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	9e 01       	movw	r18, r28
    14c2:	22 5f       	subi	r18, 0xF2	; 242
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
    14c6:	ce 01       	movw	r24, r28
    14c8:	07 96       	adiw	r24, 0x07	; 7
    14ca:	b9 01       	movw	r22, r18
    14cc:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskCheckForTimeOut>
    14d0:	88 23       	and	r24, r24
    14d2:	a1 f5       	brne	.+104    	; 0x153c <xQueueGenericReceive+0x1be>
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	9b 81       	ldd	r25, Y+3	; 0x03
    14d8:	0e 94 34 0c 	call	0x1868	; 0x1868 <prvIsQueueEmpty>
    14dc:	88 23       	and	r24, r24
    14de:	39 f1       	breq	.+78     	; 0x152e <xQueueGenericReceive+0x1b0>
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	9b 81       	ldd	r25, Y+3	; 0x03
    14e4:	fc 01       	movw	r30, r24
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	89 2b       	or	r24, r25
    14ec:	61 f4       	brne	.+24     	; 0x1506 <xQueueGenericReceive+0x188>
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	0f 92       	push	r0
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	9b 81       	ldd	r25, Y+3	; 0x03
    14f8:	fc 01       	movw	r30, r24
    14fa:	82 81       	ldd	r24, Z+2	; 0x02
    14fc:	93 81       	ldd	r25, Z+3	; 0x03
    14fe:	0e 94 cd 13 	call	0x279a	; 0x279a <vTaskPriorityInherit>
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	2e 85       	ldd	r18, Y+14	; 0x0e
    1508:	3f 85       	ldd	r19, Y+15	; 0x0f
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	9b 81       	ldd	r25, Y+3	; 0x03
    150e:	41 96       	adiw	r24, 0x11	; 17
    1510:	b9 01       	movw	r22, r18
    1512:	0e 94 2d 12 	call	0x245a	; 0x245a <vTaskPlaceOnEventList>
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	9b 81       	ldd	r25, Y+3	; 0x03
    151a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <prvUnlockQueue>
    151e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskResumeAll>
    1522:	88 23       	and	r24, r24
    1524:	09 f0       	breq	.+2      	; 0x1528 <xQueueGenericReceive+0x1aa>
    1526:	41 cf       	rjmp	.-382    	; 0x13aa <xQueueGenericReceive+0x2c>
    1528:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    152c:	3e cf       	rjmp	.-388    	; 0x13aa <xQueueGenericReceive+0x2c>
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <prvUnlockQueue>
    1536:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskResumeAll>
    153a:	37 cf       	rjmp	.-402    	; 0x13aa <xQueueGenericReceive+0x2c>
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	9b 81       	ldd	r25, Y+3	; 0x03
    1540:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <prvUnlockQueue>
    1544:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskResumeAll>
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	9b 81       	ldd	r25, Y+3	; 0x03
    154c:	0e 94 34 0c 	call	0x1868	; 0x1868 <prvIsQueueEmpty>
    1550:	88 23       	and	r24, r24
    1552:	09 f4       	brne	.+2      	; 0x1556 <xQueueGenericReceive+0x1d8>
    1554:	2a cf       	rjmp	.-428    	; 0x13aa <xQueueGenericReceive+0x2c>
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	60 96       	adiw	r28, 0x10	; 16
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	08 95       	ret

0000156a <prvCopyDataToQueue>:
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	27 97       	sbiw	r28, 0x07	; 7
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
    1582:	7e 83       	std	Y+6, r23	; 0x06
    1584:	6d 83       	std	Y+5, r22	; 0x05
    1586:	4f 83       	std	Y+7, r20	; 0x07
    1588:	19 82       	std	Y+1, r1	; 0x01
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	fc 01       	movw	r30, r24
    1590:	82 8d       	ldd	r24, Z+26	; 0x1a
    1592:	8a 83       	std	Y+2, r24	; 0x02
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	fc 01       	movw	r30, r24
    159a:	84 8d       	ldd	r24, Z+28	; 0x1c
    159c:	88 23       	and	r24, r24
    159e:	b1 f4       	brne	.+44     	; 0x15cc <prvCopyDataToQueue+0x62>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	fc 01       	movw	r30, r24
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	89 2b       	or	r24, r25
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <prvCopyDataToQueue+0x46>
    15ae:	9c c0       	rjmp	.+312    	; 0x16e8 <prvCopyDataToQueue+0x17e>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	fc 01       	movw	r30, r24
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	0e 94 65 14 	call	0x28ca	; 0x28ca <xTaskPriorityDisinherit>
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	fc 01       	movw	r30, r24
    15c6:	13 82       	std	Z+3, r1	; 0x03
    15c8:	12 82       	std	Z+2, r1	; 0x02
    15ca:	8e c0       	rjmp	.+284    	; 0x16e8 <prvCopyDataToQueue+0x17e>
    15cc:	8f 81       	ldd	r24, Y+7	; 0x07
    15ce:	88 23       	and	r24, r24
    15d0:	d9 f5       	brne	.+118    	; 0x1648 <prvCopyDataToQueue+0xde>
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	fc 01       	movw	r30, r24
    15d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    15da:	48 2f       	mov	r20, r24
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	fc 01       	movw	r30, r24
    15e4:	84 81       	ldd	r24, Z+4	; 0x04
    15e6:	95 81       	ldd	r25, Z+5	; 0x05
    15e8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ea:	3e 81       	ldd	r19, Y+6	; 0x06
    15ec:	b9 01       	movw	r22, r18
    15ee:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <memcpy>
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	fc 01       	movw	r30, r24
    15f8:	24 81       	ldd	r18, Z+4	; 0x04
    15fa:	35 81       	ldd	r19, Z+5	; 0x05
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	fc 01       	movw	r30, r24
    1602:	84 8d       	ldd	r24, Z+28	; 0x1c
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	28 0f       	add	r18, r24
    160a:	39 1f       	adc	r19, r25
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	fc 01       	movw	r30, r24
    1612:	35 83       	std	Z+5, r19	; 0x05
    1614:	24 83       	std	Z+4, r18	; 0x04
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	fc 01       	movw	r30, r24
    161c:	24 81       	ldd	r18, Z+4	; 0x04
    161e:	35 81       	ldd	r19, Z+5	; 0x05
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	fc 01       	movw	r30, r24
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	28 17       	cp	r18, r24
    162c:	39 07       	cpc	r19, r25
    162e:	08 f4       	brcc	.+2      	; 0x1632 <prvCopyDataToQueue+0xc8>
    1630:	5b c0       	rjmp	.+182    	; 0x16e8 <prvCopyDataToQueue+0x17e>
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	fc 01       	movw	r30, r24
    1638:	20 81       	ld	r18, Z
    163a:	31 81       	ldd	r19, Z+1	; 0x01
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	fc 01       	movw	r30, r24
    1642:	35 83       	std	Z+5, r19	; 0x05
    1644:	24 83       	std	Z+4, r18	; 0x04
    1646:	50 c0       	rjmp	.+160    	; 0x16e8 <prvCopyDataToQueue+0x17e>
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	fc 01       	movw	r30, r24
    164e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1650:	48 2f       	mov	r20, r24
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	fc 01       	movw	r30, r24
    165a:	86 81       	ldd	r24, Z+6	; 0x06
    165c:	97 81       	ldd	r25, Z+7	; 0x07
    165e:	2d 81       	ldd	r18, Y+5	; 0x05
    1660:	3e 81       	ldd	r19, Y+6	; 0x06
    1662:	b9 01       	movw	r22, r18
    1664:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <memcpy>
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	fc 01       	movw	r30, r24
    166e:	26 81       	ldd	r18, Z+6	; 0x06
    1670:	37 81       	ldd	r19, Z+7	; 0x07
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	fc 01       	movw	r30, r24
    1678:	84 8d       	ldd	r24, Z+28	; 0x1c
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	91 95       	neg	r25
    1680:	81 95       	neg	r24
    1682:	91 09       	sbc	r25, r1
    1684:	28 0f       	add	r18, r24
    1686:	39 1f       	adc	r19, r25
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	fc 01       	movw	r30, r24
    168e:	37 83       	std	Z+7, r19	; 0x07
    1690:	26 83       	std	Z+6, r18	; 0x06
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	fc 01       	movw	r30, r24
    1698:	26 81       	ldd	r18, Z+6	; 0x06
    169a:	37 81       	ldd	r19, Z+7	; 0x07
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	fc 01       	movw	r30, r24
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
    16a6:	28 17       	cp	r18, r24
    16a8:	39 07       	cpc	r19, r25
    16aa:	a8 f4       	brcc	.+42     	; 0x16d6 <prvCopyDataToQueue+0x16c>
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	fc 01       	movw	r30, r24
    16b2:	22 81       	ldd	r18, Z+2	; 0x02
    16b4:	33 81       	ldd	r19, Z+3	; 0x03
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	fc 01       	movw	r30, r24
    16bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	91 95       	neg	r25
    16c4:	81 95       	neg	r24
    16c6:	91 09       	sbc	r25, r1
    16c8:	28 0f       	add	r18, r24
    16ca:	39 1f       	adc	r19, r25
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	fc 01       	movw	r30, r24
    16d2:	37 83       	std	Z+7, r19	; 0x07
    16d4:	26 83       	std	Z+6, r18	; 0x06
    16d6:	8f 81       	ldd	r24, Y+7	; 0x07
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	31 f4       	brne	.+12     	; 0x16e8 <prvCopyDataToQueue+0x17e>
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	88 23       	and	r24, r24
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <prvCopyDataToQueue+0x17e>
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	81 50       	subi	r24, 0x01	; 1
    16e6:	8a 83       	std	Y+2, r24	; 0x02
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	21 e0       	ldi	r18, 0x01	; 1
    16ec:	28 0f       	add	r18, r24
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	fc 01       	movw	r30, r24
    16f4:	22 8f       	std	Z+26, r18	; 0x1a
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	27 96       	adiw	r28, 0x07	; 7
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <prvCopyDataFromQueue>:
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	00 d0       	rcall	.+0      	; 0x1710 <prvCopyDataFromQueue+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <prvCopyDataFromQueue+0x8>
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	7c 83       	std	Y+4, r23	; 0x04
    171c:	6b 83       	std	Y+3, r22	; 0x03
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	fc 01       	movw	r30, r24
    1724:	84 8d       	ldd	r24, Z+28	; 0x1c
    1726:	88 23       	and	r24, r24
    1728:	c9 f1       	breq	.+114    	; 0x179c <prvCopyDataFromQueue+0x92>
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	9a 81       	ldd	r25, Y+2	; 0x02
    172e:	fc 01       	movw	r30, r24
    1730:	26 81       	ldd	r18, Z+6	; 0x06
    1732:	37 81       	ldd	r19, Z+7	; 0x07
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
    1738:	fc 01       	movw	r30, r24
    173a:	84 8d       	ldd	r24, Z+28	; 0x1c
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	28 0f       	add	r18, r24
    1742:	39 1f       	adc	r19, r25
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	fc 01       	movw	r30, r24
    174a:	37 83       	std	Z+7, r19	; 0x07
    174c:	26 83       	std	Z+6, r18	; 0x06
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	fc 01       	movw	r30, r24
    1754:	26 81       	ldd	r18, Z+6	; 0x06
    1756:	37 81       	ldd	r19, Z+7	; 0x07
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	fc 01       	movw	r30, r24
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	28 17       	cp	r18, r24
    1764:	39 07       	cpc	r19, r25
    1766:	50 f0       	brcs	.+20     	; 0x177c <prvCopyDataFromQueue+0x72>
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	fc 01       	movw	r30, r24
    176e:	20 81       	ld	r18, Z
    1770:	31 81       	ldd	r19, Z+1	; 0x01
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	fc 01       	movw	r30, r24
    1778:	37 83       	std	Z+7, r19	; 0x07
    177a:	26 83       	std	Z+6, r18	; 0x06
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	fc 01       	movw	r30, r24
    1782:	84 8d       	ldd	r24, Z+28	; 0x1c
    1784:	48 2f       	mov	r20, r24
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	fc 01       	movw	r30, r24
    178e:	26 81       	ldd	r18, Z+6	; 0x06
    1790:	37 81       	ldd	r19, Z+7	; 0x07
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	b9 01       	movw	r22, r18
    1798:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <memcpy>
    179c:	00 00       	nop
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret

000017ac <prvUnlockQueue>:
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <prvUnlockQueue+0x6>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <prvUnlockQueue+0x8>
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	8b 83       	std	Y+3, r24	; 0x03
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	0f 92       	push	r0
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	fc 01       	movw	r30, r24
    17c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	12 c0       	rjmp	.+36     	; 0x17f2 <prvUnlockQueue+0x46>
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	fc 01       	movw	r30, r24
    17d4:	81 89       	ldd	r24, Z+17	; 0x11
    17d6:	88 23       	and	r24, r24
    17d8:	81 f0       	breq	.+32     	; 0x17fa <prvUnlockQueue+0x4e>
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	41 96       	adiw	r24, 0x11	; 17
    17e0:	0e 94 50 12 	call	0x24a0	; 0x24a0 <xTaskRemoveFromEventList>
    17e4:	88 23       	and	r24, r24
    17e6:	11 f0       	breq	.+4      	; 0x17ec <prvUnlockQueue+0x40>
    17e8:	0e 94 41 13 	call	0x2682	; 0x2682 <vTaskMissedYield>
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	81 50       	subi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	18 16       	cp	r1, r24
    17f6:	5c f3       	brlt	.-42     	; 0x17ce <prvUnlockQueue+0x22>
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <prvUnlockQueue+0x50>
    17fa:	00 00       	nop
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	2f ef       	ldi	r18, 0xFF	; 255
    1802:	fc 01       	movw	r30, r24
    1804:	26 8f       	std	Z+30, r18	; 0x1e
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	0f 92       	push	r0
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	fc 01       	movw	r30, r24
    1816:	85 8d       	ldd	r24, Z+29	; 0x1d
    1818:	8a 83       	std	Y+2, r24	; 0x02
    181a:	12 c0       	rjmp	.+36     	; 0x1840 <prvUnlockQueue+0x94>
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	fc 01       	movw	r30, r24
    1822:	80 85       	ldd	r24, Z+8	; 0x08
    1824:	88 23       	and	r24, r24
    1826:	81 f0       	breq	.+32     	; 0x1848 <prvUnlockQueue+0x9c>
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	08 96       	adiw	r24, 0x08	; 8
    182e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <xTaskRemoveFromEventList>
    1832:	88 23       	and	r24, r24
    1834:	11 f0       	breq	.+4      	; 0x183a <prvUnlockQueue+0x8e>
    1836:	0e 94 41 13 	call	0x2682	; 0x2682 <vTaskMissedYield>
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	81 50       	subi	r24, 0x01	; 1
    183e:	8a 83       	std	Y+2, r24	; 0x02
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	18 16       	cp	r1, r24
    1844:	5c f3       	brlt	.-42     	; 0x181c <prvUnlockQueue+0x70>
    1846:	01 c0       	rjmp	.+2      	; 0x184a <prvUnlockQueue+0x9e>
    1848:	00 00       	nop
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	2f ef       	ldi	r18, 0xFF	; 255
    1850:	fc 01       	movw	r30, r24
    1852:	25 8f       	std	Z+29, r18	; 0x1d
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	00 00       	nop
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <prvIsQueueEmpty>:
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	00 d0       	rcall	.+0      	; 0x186e <prvIsQueueEmpty+0x6>
    186e:	1f 92       	push	r1
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	9b 83       	std	Y+3, r25	; 0x03
    1876:	8a 83       	std	Y+2, r24	; 0x02
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	0f 92       	push	r0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	9b 81       	ldd	r25, Y+3	; 0x03
    1882:	fc 01       	movw	r30, r24
    1884:	82 8d       	ldd	r24, Z+26	; 0x1a
    1886:	88 23       	and	r24, r24
    1888:	19 f4       	brne	.+6      	; 0x1890 <prvIsQueueEmpty+0x28>
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <prvIsQueueEmpty+0x2a>
    1890:	19 82       	std	Y+1, r1	; 0x01
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	08 95       	ret

000018a4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <prvIsQueueFull+0x6>
    18aa:	1f 92       	push	r1
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	9b 83       	std	Y+3, r25	; 0x03
    18b2:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	fc 01       	movw	r30, r24
    18c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	9b 81       	ldd	r25, Y+3	; 0x03
    18c6:	fc 01       	movw	r30, r24
    18c8:	83 8d       	ldd	r24, Z+27	; 0x1b
    18ca:	28 17       	cp	r18, r24
    18cc:	19 f4       	brne	.+6      	; 0x18d4 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    18d4:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    18da:	89 81       	ldd	r24, Y+1	; 0x01
}
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	08 95       	ret

000018e8 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    18e8:	8f 92       	push	r8
    18ea:	9f 92       	push	r9
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	60 97       	sbiw	r28, 0x10	; 16
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	9f 83       	std	Y+7, r25	; 0x07
    1912:	8e 83       	std	Y+6, r24	; 0x06
    1914:	79 87       	std	Y+9, r23	; 0x09
    1916:	68 87       	std	Y+8, r22	; 0x08
    1918:	5b 87       	std	Y+11, r21	; 0x0b
    191a:	4a 87       	std	Y+10, r20	; 0x0a
    191c:	3d 87       	std	Y+13, r19	; 0x0d
    191e:	2c 87       	std	Y+12, r18	; 0x0c
    1920:	0e 87       	std	Y+14, r16	; 0x0e
    1922:	f8 8a       	std	Y+16, r15	; 0x10
    1924:	ef 86       	std	Y+15, r14	; 0x0f
    1926:	8a 85       	ldd	r24, Y+10	; 0x0a
    1928:	9b 85       	ldd	r25, Y+11	; 0x0b
    192a:	0e 94 19 03 	call	0x632	; 0x632 <pvPortMalloc>
    192e:	9d 83       	std	Y+5, r25	; 0x05
    1930:	8c 83       	std	Y+4, r24	; 0x04
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	89 2b       	or	r24, r25
    1938:	b9 f0       	breq	.+46     	; 0x1968 <xTaskCreate+0x80>
    193a:	88 e2       	ldi	r24, 0x28	; 40
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 19 03 	call	0x632	; 0x632 <pvPortMalloc>
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	89 2b       	or	r24, r25
    194c:	41 f0       	breq	.+16     	; 0x195e <xTaskCreate+0x76>
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	9a 81       	ldd	r25, Y+2	; 0x02
    1952:	2c 81       	ldd	r18, Y+4	; 0x04
    1954:	3d 81       	ldd	r19, Y+5	; 0x05
    1956:	fc 01       	movw	r30, r24
    1958:	30 8f       	std	Z+24, r19	; 0x18
    195a:	27 8b       	std	Z+23, r18	; 0x17
    195c:	07 c0       	rjmp	.+14     	; 0x196c <xTaskCreate+0x84>
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	9d 81       	ldd	r25, Y+5	; 0x05
    1962:	0e 94 08 04 	call	0x810	; 0x810 <vPortFree>
    1966:	02 c0       	rjmp	.+4      	; 0x196c <xTaskCreate+0x84>
    1968:	1a 82       	std	Y+2, r1	; 0x02
    196a:	19 82       	std	Y+1, r1	; 0x01
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	89 2b       	or	r24, r25
    1972:	09 f1       	breq	.+66     	; 0x19b6 <xTaskCreate+0xce>
    1974:	8a 85       	ldd	r24, Y+10	; 0x0a
    1976:	9b 85       	ldd	r25, Y+11	; 0x0b
    1978:	cc 01       	movw	r24, r24
    197a:	a0 e0       	ldi	r26, 0x00	; 0
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	09 81       	ldd	r16, Y+1	; 0x01
    1980:	1a 81       	ldd	r17, Y+2	; 0x02
    1982:	4f 85       	ldd	r20, Y+15	; 0x0f
    1984:	58 89       	ldd	r21, Y+16	; 0x10
    1986:	2c 85       	ldd	r18, Y+12	; 0x0c
    1988:	3d 85       	ldd	r19, Y+13	; 0x0d
    198a:	68 85       	ldd	r22, Y+8	; 0x08
    198c:	79 85       	ldd	r23, Y+9	; 0x09
    198e:	ee 81       	ldd	r30, Y+6	; 0x06
    1990:	ff 81       	ldd	r31, Y+7	; 0x07
    1992:	81 2c       	mov	r8, r1
    1994:	91 2c       	mov	r9, r1
    1996:	58 01       	movw	r10, r16
    1998:	6a 01       	movw	r12, r20
    199a:	ee 84       	ldd	r14, Y+14	; 0x0e
    199c:	89 01       	movw	r16, r18
    199e:	9c 01       	movw	r18, r24
    19a0:	ad 01       	movw	r20, r26
    19a2:	cf 01       	movw	r24, r30
    19a4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <prvInitialiseNewTask>
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prvAddNewTaskToReadyList>
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	8b 83       	std	Y+3, r24	; 0x03
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <xTaskCreate+0xd2>
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	8b 83       	std	Y+3, r24	; 0x03
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	60 96       	adiw	r28, 0x10	; 16
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	cf 90       	pop	r12
    19d8:	bf 90       	pop	r11
    19da:	af 90       	pop	r10
    19dc:	9f 90       	pop	r9
    19de:	8f 90       	pop	r8
    19e0:	08 95       	ret

000019e2 <prvInitialiseNewTask>:
    19e2:	8f 92       	push	r8
    19e4:	9f 92       	push	r9
    19e6:	af 92       	push	r10
    19e8:	bf 92       	push	r11
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	64 97       	sbiw	r28, 0x14	; 20
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	9d 83       	std	Y+5, r25	; 0x05
    1a0a:	8c 83       	std	Y+4, r24	; 0x04
    1a0c:	7f 83       	std	Y+7, r23	; 0x07
    1a0e:	6e 83       	std	Y+6, r22	; 0x06
    1a10:	28 87       	std	Y+8, r18	; 0x08
    1a12:	39 87       	std	Y+9, r19	; 0x09
    1a14:	4a 87       	std	Y+10, r20	; 0x0a
    1a16:	5b 87       	std	Y+11, r21	; 0x0b
    1a18:	1d 87       	std	Y+13, r17	; 0x0d
    1a1a:	0c 87       	std	Y+12, r16	; 0x0c
    1a1c:	ee 86       	std	Y+14, r14	; 0x0e
    1a1e:	d8 8a       	std	Y+16, r13	; 0x10
    1a20:	cf 86       	std	Y+15, r12	; 0x0f
    1a22:	ba 8a       	std	Y+18, r11	; 0x12
    1a24:	a9 8a       	std	Y+17, r10	; 0x11
    1a26:	9c 8a       	std	Y+20, r9	; 0x14
    1a28:	8b 8a       	std	Y+19, r8	; 0x13
    1a2a:	28 85       	ldd	r18, Y+8	; 0x08
    1a2c:	39 85       	ldd	r19, Y+9	; 0x09
    1a2e:	89 89       	ldd	r24, Y+17	; 0x11
    1a30:	9a 89       	ldd	r25, Y+18	; 0x12
    1a32:	fc 01       	movw	r30, r24
    1a34:	87 89       	ldd	r24, Z+23	; 0x17
    1a36:	90 8d       	ldd	r25, Z+24	; 0x18
    1a38:	a9 01       	movw	r20, r18
    1a3a:	65 ea       	ldi	r22, 0xA5	; 165
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <memset>
    1a42:	89 89       	ldd	r24, Y+17	; 0x11
    1a44:	9a 89       	ldd	r25, Y+18	; 0x12
    1a46:	fc 01       	movw	r30, r24
    1a48:	27 89       	ldd	r18, Z+23	; 0x17
    1a4a:	30 8d       	ldd	r19, Z+24	; 0x18
    1a4c:	88 85       	ldd	r24, Y+8	; 0x08
    1a4e:	99 85       	ldd	r25, Y+9	; 0x09
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	82 0f       	add	r24, r18
    1a54:	93 1f       	adc	r25, r19
    1a56:	9b 83       	std	Y+3, r25	; 0x03
    1a58:	8a 83       	std	Y+2, r24	; 0x02
    1a5a:	19 82       	std	Y+1, r1	; 0x01
    1a5c:	21 c0       	rjmp	.+66     	; 0x1aa0 <prvInitialiseNewTask+0xbe>
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	29 81       	ldd	r18, Y+1	; 0x01
    1a66:	22 2f       	mov	r18, r18
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a6c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a6e:	24 0f       	add	r18, r20
    1a70:	35 1f       	adc	r19, r21
    1a72:	f9 01       	movw	r30, r18
    1a74:	40 81       	ld	r20, Z
    1a76:	29 89       	ldd	r18, Y+17	; 0x11
    1a78:	3a 89       	ldd	r19, Y+18	; 0x12
    1a7a:	82 0f       	add	r24, r18
    1a7c:	93 1f       	adc	r25, r19
    1a7e:	49 96       	adiw	r24, 0x19	; 25
    1a80:	fc 01       	movw	r30, r24
    1a82:	40 83       	st	Z, r20
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a8c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a8e:	82 0f       	add	r24, r18
    1a90:	93 1f       	adc	r25, r19
    1a92:	fc 01       	movw	r30, r24
    1a94:	80 81       	ld	r24, Z
    1a96:	88 23       	and	r24, r24
    1a98:	39 f0       	breq	.+14     	; 0x1aa8 <prvInitialiseNewTask+0xc6>
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	84 30       	cpi	r24, 0x04	; 4
    1aa4:	e0 f2       	brcs	.-72     	; 0x1a5e <prvInitialiseNewTask+0x7c>
    1aa6:	01 c0       	rjmp	.+2      	; 0x1aaa <prvInitialiseNewTask+0xc8>
    1aa8:	00 00       	nop
    1aaa:	89 89       	ldd	r24, Y+17	; 0x11
    1aac:	9a 89       	ldd	r25, Y+18	; 0x12
    1aae:	fc 01       	movw	r30, r24
    1ab0:	14 8e       	std	Z+28, r1	; 0x1c
    1ab2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ab4:	84 30       	cpi	r24, 0x04	; 4
    1ab6:	10 f0       	brcs	.+4      	; 0x1abc <prvInitialiseNewTask+0xda>
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	8e 87       	std	Y+14, r24	; 0x0e
    1abc:	89 89       	ldd	r24, Y+17	; 0x11
    1abe:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	26 8b       	std	Z+22, r18	; 0x16
    1ac6:	89 89       	ldd	r24, Y+17	; 0x11
    1ac8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aca:	2e 85       	ldd	r18, Y+14	; 0x0e
    1acc:	fc 01       	movw	r30, r24
    1ace:	27 8f       	std	Z+31, r18	; 0x1f
    1ad0:	89 89       	ldd	r24, Y+17	; 0x11
    1ad2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	10 a2       	std	Z+32, r1	; 0x20
    1ad8:	89 89       	ldd	r24, Y+17	; 0x11
    1ada:	9a 89       	ldd	r25, Y+18	; 0x12
    1adc:	02 96       	adiw	r24, 0x02	; 2
    1ade:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vListInitialiseItem>
    1ae2:	89 89       	ldd	r24, Y+17	; 0x11
    1ae4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae6:	0c 96       	adiw	r24, 0x0c	; 12
    1ae8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vListInitialiseItem>
    1aec:	89 89       	ldd	r24, Y+17	; 0x11
    1aee:	9a 89       	ldd	r25, Y+18	; 0x12
    1af0:	29 89       	ldd	r18, Y+17	; 0x11
    1af2:	3a 89       	ldd	r19, Y+18	; 0x12
    1af4:	fc 01       	movw	r30, r24
    1af6:	31 87       	std	Z+9, r19	; 0x09
    1af8:	20 87       	std	Z+8, r18	; 0x08
    1afa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	24 e0       	ldi	r18, 0x04	; 4
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	28 1b       	sub	r18, r24
    1b06:	39 0b       	sbc	r19, r25
    1b08:	89 89       	ldd	r24, Y+17	; 0x11
    1b0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	35 87       	std	Z+13, r19	; 0x0d
    1b10:	24 87       	std	Z+12, r18	; 0x0c
    1b12:	89 89       	ldd	r24, Y+17	; 0x11
    1b14:	9a 89       	ldd	r25, Y+18	; 0x12
    1b16:	29 89       	ldd	r18, Y+17	; 0x11
    1b18:	3a 89       	ldd	r19, Y+18	; 0x12
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	33 8b       	std	Z+19, r19	; 0x13
    1b1e:	22 8b       	std	Z+18, r18	; 0x12
    1b20:	89 89       	ldd	r24, Y+17	; 0x11
    1b22:	9a 89       	ldd	r25, Y+18	; 0x12
    1b24:	fc 01       	movw	r30, r24
    1b26:	12 a2       	std	Z+34, r1	; 0x22
    1b28:	11 a2       	std	Z+33, r1	; 0x21
    1b2a:	89 89       	ldd	r24, Y+17	; 0x11
    1b2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b2e:	fc 01       	movw	r30, r24
    1b30:	13 a2       	std	Z+35, r1	; 0x23
    1b32:	14 a2       	std	Z+36, r1	; 0x24
    1b34:	15 a2       	std	Z+37, r1	; 0x25
    1b36:	16 a2       	std	Z+38, r1	; 0x26
    1b38:	89 89       	ldd	r24, Y+17	; 0x11
    1b3a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	17 a2       	std	Z+39, r1	; 0x27
    1b40:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b42:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b44:	2c 81       	ldd	r18, Y+4	; 0x04
    1b46:	3d 81       	ldd	r19, Y+5	; 0x05
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4c:	b9 01       	movw	r22, r18
    1b4e:	0e 94 b2 04 	call	0x964	; 0x964 <pxPortInitialiseStack>
    1b52:	9c 01       	movw	r18, r24
    1b54:	89 89       	ldd	r24, Y+17	; 0x11
    1b56:	9a 89       	ldd	r25, Y+18	; 0x12
    1b58:	fc 01       	movw	r30, r24
    1b5a:	31 83       	std	Z+1, r19	; 0x01
    1b5c:	20 83       	st	Z, r18
    1b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b60:	98 89       	ldd	r25, Y+16	; 0x10
    1b62:	89 2b       	or	r24, r25
    1b64:	39 f0       	breq	.+14     	; 0x1b74 <prvInitialiseNewTask+0x192>
    1b66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b68:	98 89       	ldd	r25, Y+16	; 0x10
    1b6a:	29 89       	ldd	r18, Y+17	; 0x11
    1b6c:	3a 89       	ldd	r19, Y+18	; 0x12
    1b6e:	fc 01       	movw	r30, r24
    1b70:	31 83       	std	Z+1, r19	; 0x01
    1b72:	20 83       	st	Z, r18
    1b74:	00 00       	nop
    1b76:	64 96       	adiw	r28, 0x14	; 20
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	ef 90       	pop	r14
    1b8c:	df 90       	pop	r13
    1b8e:	cf 90       	pop	r12
    1b90:	bf 90       	pop	r11
    1b92:	af 90       	pop	r10
    1b94:	9f 90       	pop	r9
    1b96:	8f 90       	pop	r8
    1b98:	08 95       	ret

00001b9a <prvAddNewTaskToReadyList>:
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <prvAddNewTaskToReadyList+0x6>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	0f 92       	push	r0
    1bae:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <uxCurrentNumberOfTasks>
    1bb8:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1bbc:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1bc0:	89 2b       	or	r24, r25
    1bc2:	69 f4       	brne	.+26     	; 0x1bde <prvAddNewTaskToReadyList+0x44>
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pxCurrentTCB+0x1>
    1bcc:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pxCurrentTCB>
    1bd0:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	c9 f4       	brne	.+50     	; 0x1c0a <prvAddNewTaskToReadyList+0x70>
    1bd8:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <prvInitialiseTaskLists>
    1bdc:	16 c0       	rjmp	.+44     	; 0x1c0a <prvAddNewTaskToReadyList+0x70>
    1bde:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <xSchedulerRunning>
    1be2:	88 23       	and	r24, r24
    1be4:	91 f4       	brne	.+36     	; 0x1c0a <prvAddNewTaskToReadyList+0x70>
    1be6:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1bea:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1bee:	fc 01       	movw	r30, r24
    1bf0:	26 89       	ldd	r18, Z+22	; 0x16
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	86 89       	ldd	r24, Z+22	; 0x16
    1bfa:	82 17       	cp	r24, r18
    1bfc:	30 f0       	brcs	.+12     	; 0x1c0a <prvAddNewTaskToReadyList+0x70>
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pxCurrentTCB+0x1>
    1c06:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pxCurrentTCB>
    1c0a:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <uxTaskNumber>
    1c0e:	8f 5f       	subi	r24, 0xFF	; 255
    1c10:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <uxTaskNumber>
    1c14:	20 91 92 07 	lds	r18, 0x0792	; 0x800792 <uxTaskNumber>
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	25 8f       	std	Z+29, r18	; 0x1d
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	fc 01       	movw	r30, r24
    1c26:	96 89       	ldd	r25, Z+22	; 0x16
    1c28:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    1c2c:	89 17       	cp	r24, r25
    1c2e:	30 f4       	brcc	.+12     	; 0x1c3c <prvAddNewTaskToReadyList+0xa2>
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	fc 01       	movw	r30, r24
    1c36:	86 89       	ldd	r24, Z+22	; 0x16
    1c38:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	ac 01       	movw	r20, r24
    1c42:	4e 5f       	subi	r20, 0xFE	; 254
    1c44:	5f 4f       	sbci	r21, 0xFF	; 255
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	86 89       	ldd	r24, Z+22	; 0x16
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	c9 01       	movw	r24, r18
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	82 0f       	add	r24, r18
    1c62:	93 1f       	adc	r25, r19
    1c64:	89 5b       	subi	r24, 0xB9	; 185
    1c66:	98 4f       	sbci	r25, 0xF8	; 248
    1c68:	ba 01       	movw	r22, r20
    1c6a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <xSchedulerRunning>
    1c76:	88 23       	and	r24, r24
    1c78:	71 f0       	breq	.+28     	; 0x1c96 <prvAddNewTaskToReadyList+0xfc>
    1c7a:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1c7e:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1c82:	fc 01       	movw	r30, r24
    1c84:	26 89       	ldd	r18, Z+22	; 0x16
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	86 89       	ldd	r24, Z+22	; 0x16
    1c8e:	28 17       	cp	r18, r24
    1c90:	10 f4       	brcc	.+4      	; 0x1c96 <prvAddNewTaskToReadyList+0xfc>
    1c92:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1c96:	00 00       	nop
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	08 95       	ret

00001ca2 <vTaskDelayUntil>:
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	2a 97       	sbiw	r28, 0x0a	; 10
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	98 87       	std	Y+8, r25	; 0x08
    1cb8:	8f 83       	std	Y+7, r24	; 0x07
    1cba:	7a 87       	std	Y+10, r23	; 0x0a
    1cbc:	69 87       	std	Y+9, r22	; 0x09
    1cbe:	19 82       	std	Y+1, r1	; 0x01
    1cc0:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <vTaskSuspendAll>
    1cc4:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTickCount>
    1cc8:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTickCount+0x1>
    1ccc:	9b 83       	std	Y+3, r25	; 0x03
    1cce:	8a 83       	std	Y+2, r24	; 0x02
    1cd0:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd2:	98 85       	ldd	r25, Y+8	; 0x08
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	20 81       	ld	r18, Z
    1cd8:	31 81       	ldd	r19, Z+1	; 0x01
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	82 0f       	add	r24, r18
    1ce0:	93 1f       	adc	r25, r19
    1ce2:	9d 83       	std	Y+5, r25	; 0x05
    1ce4:	8c 83       	std	Y+4, r24	; 0x04
    1ce6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce8:	98 85       	ldd	r25, Y+8	; 0x08
    1cea:	fc 01       	movw	r30, r24
    1cec:	20 81       	ld	r18, Z
    1cee:	31 81       	ldd	r19, Z+1	; 0x01
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf4:	82 17       	cp	r24, r18
    1cf6:	93 07       	cpc	r25, r19
    1cf8:	a0 f4       	brcc	.+40     	; 0x1d22 <vTaskDelayUntil+0x80>
    1cfa:	8f 81       	ldd	r24, Y+7	; 0x07
    1cfc:	98 85       	ldd	r25, Y+8	; 0x08
    1cfe:	fc 01       	movw	r30, r24
    1d00:	20 81       	ld	r18, Z
    1d02:	31 81       	ldd	r19, Z+1	; 0x01
    1d04:	8c 81       	ldd	r24, Y+4	; 0x04
    1d06:	9d 81       	ldd	r25, Y+5	; 0x05
    1d08:	82 17       	cp	r24, r18
    1d0a:	93 07       	cpc	r25, r19
    1d0c:	e8 f4       	brcc	.+58     	; 0x1d48 <vTaskDelayUntil+0xa6>
    1d0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d10:	3d 81       	ldd	r19, Y+5	; 0x05
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	9b 81       	ldd	r25, Y+3	; 0x03
    1d16:	82 17       	cp	r24, r18
    1d18:	93 07       	cpc	r25, r19
    1d1a:	b0 f4       	brcc	.+44     	; 0x1d48 <vTaskDelayUntil+0xa6>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	13 c0       	rjmp	.+38     	; 0x1d48 <vTaskDelayUntil+0xa6>
    1d22:	8f 81       	ldd	r24, Y+7	; 0x07
    1d24:	98 85       	ldd	r25, Y+8	; 0x08
    1d26:	fc 01       	movw	r30, r24
    1d28:	20 81       	ld	r18, Z
    1d2a:	31 81       	ldd	r19, Z+1	; 0x01
    1d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d30:	82 17       	cp	r24, r18
    1d32:	93 07       	cpc	r25, r19
    1d34:	38 f0       	brcs	.+14     	; 0x1d44 <vTaskDelayUntil+0xa2>
    1d36:	2c 81       	ldd	r18, Y+4	; 0x04
    1d38:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3e:	82 17       	cp	r24, r18
    1d40:	93 07       	cpc	r25, r19
    1d42:	10 f4       	brcc	.+4      	; 0x1d48 <vTaskDelayUntil+0xa6>
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	8f 81       	ldd	r24, Y+7	; 0x07
    1d4a:	98 85       	ldd	r25, Y+8	; 0x08
    1d4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d50:	fc 01       	movw	r30, r24
    1d52:	31 83       	std	Z+1, r19	; 0x01
    1d54:	20 83       	st	Z, r18
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	88 23       	and	r24, r24
    1d5a:	59 f0       	breq	.+22     	; 0x1d72 <vTaskDelayUntil+0xd0>
    1d5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	9b 81       	ldd	r25, Y+3	; 0x03
    1d64:	a9 01       	movw	r20, r18
    1d66:	48 1b       	sub	r20, r24
    1d68:	59 0b       	sbc	r21, r25
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <prvAddCurrentTaskToDelayedList>
    1d72:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xTaskResumeAll>
    1d76:	8e 83       	std	Y+6, r24	; 0x06
    1d78:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7a:	88 23       	and	r24, r24
    1d7c:	11 f4       	brne	.+4      	; 0x1d82 <vTaskDelayUntil+0xe0>
    1d7e:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1d82:	00 00       	nop
    1d84:	2a 96       	adiw	r28, 0x0a	; 10
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	08 95       	ret

00001d96 <vTaskPrioritySet>:
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	28 97       	sbiw	r28, 0x08	; 8
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	9f 83       	std	Y+7, r25	; 0x07
    1dac:	8e 83       	std	Y+6, r24	; 0x06
    1dae:	68 87       	std	Y+8, r22	; 0x08
    1db0:	19 82       	std	Y+1, r1	; 0x01
    1db2:	88 85       	ldd	r24, Y+8	; 0x08
    1db4:	84 30       	cpi	r24, 0x04	; 4
    1db6:	10 f0       	brcs	.+4      	; 0x1dbc <vTaskPrioritySet+0x26>
    1db8:	83 e0       	ldi	r24, 0x03	; 3
    1dba:	88 87       	std	Y+8, r24	; 0x08
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	0f 92       	push	r0
    1dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc6:	89 2b       	or	r24, r25
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <vTaskPrioritySet+0x3e>
    1dca:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1dce:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <vTaskPrioritySet+0x42>
    1dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd8:	9b 83       	std	Y+3, r25	; 0x03
    1dda:	8a 83       	std	Y+2, r24	; 0x02
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
    1de0:	fc 01       	movw	r30, r24
    1de2:	87 8d       	ldd	r24, Z+31	; 0x1f
    1de4:	8c 83       	std	Y+4, r24	; 0x04
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	88 85       	ldd	r24, Y+8	; 0x08
    1dea:	98 17       	cp	r25, r24
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <vTaskPrioritySet+0x5a>
    1dee:	97 c0       	rjmp	.+302    	; 0x1f1e <vTaskPrioritySet+0x188>
    1df0:	98 85       	ldd	r25, Y+8	; 0x08
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	89 17       	cp	r24, r25
    1df6:	a8 f4       	brcc	.+42     	; 0x1e22 <vTaskPrioritySet+0x8c>
    1df8:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1dfc:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1e00:	2a 81       	ldd	r18, Y+2	; 0x02
    1e02:	3b 81       	ldd	r19, Y+3	; 0x03
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	b9 f0       	breq	.+46     	; 0x1e38 <vTaskPrioritySet+0xa2>
    1e0a:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1e0e:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1e12:	fc 01       	movw	r30, r24
    1e14:	96 89       	ldd	r25, Z+22	; 0x16
    1e16:	88 85       	ldd	r24, Y+8	; 0x08
    1e18:	89 17       	cp	r24, r25
    1e1a:	70 f0       	brcs	.+28     	; 0x1e38 <vTaskPrioritySet+0xa2>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	0b c0       	rjmp	.+22     	; 0x1e38 <vTaskPrioritySet+0xa2>
    1e22:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    1e26:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1e2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e2c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e2e:	28 17       	cp	r18, r24
    1e30:	39 07       	cpc	r19, r25
    1e32:	11 f4       	brne	.+4      	; 0x1e38 <vTaskPrioritySet+0xa2>
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	86 89       	ldd	r24, Z+22	; 0x16
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	9b 81       	ldd	r25, Y+3	; 0x03
    1e46:	fc 01       	movw	r30, r24
    1e48:	27 8d       	ldd	r18, Z+31	; 0x1f
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4e:	fc 01       	movw	r30, r24
    1e50:	86 89       	ldd	r24, Z+22	; 0x16
    1e52:	28 17       	cp	r18, r24
    1e54:	29 f4       	brne	.+10     	; 0x1e60 <vTaskPrioritySet+0xca>
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5a:	28 85       	ldd	r18, Y+8	; 0x08
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	26 8b       	std	Z+22, r18	; 0x16
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	28 85       	ldd	r18, Y+8	; 0x08
    1e66:	fc 01       	movw	r30, r24
    1e68:	27 8f       	std	Z+31, r18	; 0x1f
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6e:	fc 01       	movw	r30, r24
    1e70:	84 85       	ldd	r24, Z+12	; 0x0c
    1e72:	95 85       	ldd	r25, Z+13	; 0x0d
    1e74:	99 23       	and	r25, r25
    1e76:	64 f0       	brlt	.+24     	; 0x1e90 <vTaskPrioritySet+0xfa>
    1e78:	88 85       	ldd	r24, Y+8	; 0x08
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	24 e0       	ldi	r18, 0x04	; 4
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	28 1b       	sub	r18, r24
    1e84:	39 0b       	sbc	r19, r25
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	35 87       	std	Z+13, r19	; 0x0d
    1e8e:	24 87       	std	Z+12, r18	; 0x0c
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	9b 81       	ldd	r25, Y+3	; 0x03
    1e94:	fc 01       	movw	r30, r24
    1e96:	42 85       	ldd	r20, Z+10	; 0x0a
    1e98:	53 85       	ldd	r21, Z+11	; 0x0b
    1e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	c9 01       	movw	r24, r18
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	82 0f       	add	r24, r18
    1eb0:	93 1f       	adc	r25, r19
    1eb2:	89 5b       	subi	r24, 0xB9	; 185
    1eb4:	98 4f       	sbci	r25, 0xF8	; 248
    1eb6:	48 17       	cp	r20, r24
    1eb8:	59 07       	cpc	r21, r25
    1eba:	61 f5       	brne	.+88     	; 0x1f14 <vTaskPrioritySet+0x17e>
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec0:	02 96       	adiw	r24, 0x02	; 2
    1ec2:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eca:	fc 01       	movw	r30, r24
    1ecc:	96 89       	ldd	r25, Z+22	; 0x16
    1ece:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    1ed2:	89 17       	cp	r24, r25
    1ed4:	30 f4       	brcc	.+12     	; 0x1ee2 <vTaskPrioritySet+0x14c>
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eda:	fc 01       	movw	r30, r24
    1edc:	86 89       	ldd	r24, Z+22	; 0x16
    1ede:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee6:	ac 01       	movw	r20, r24
    1ee8:	4e 5f       	subi	r20, 0xFE	; 254
    1eea:	5f 4f       	sbci	r21, 0xFF	; 255
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	86 89       	ldd	r24, Z+22	; 0x16
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	c9 01       	movw	r24, r18
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	82 0f       	add	r24, r18
    1f08:	93 1f       	adc	r25, r19
    1f0a:	89 5b       	subi	r24, 0xB9	; 185
    1f0c:	98 4f       	sbci	r25, 0xF8	; 248
    1f0e:	ba 01       	movw	r22, r20
    1f10:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	88 23       	and	r24, r24
    1f18:	11 f0       	breq	.+4      	; 0x1f1e <vTaskPrioritySet+0x188>
    1f1a:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    1f1e:	0f 90       	pop	r0
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	00 00       	nop
    1f24:	28 96       	adiw	r28, 0x08	; 8
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	08 95       	ret

00001f36 <vTaskStartScheduler>:
    1f36:	ef 92       	push	r14
    1f38:	ff 92       	push	r15
    1f3a:	0f 93       	push	r16
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	1f 92       	push	r1
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	0f 2e       	mov	r0, r31
    1f48:	f5 e9       	ldi	r31, 0x95	; 149
    1f4a:	ef 2e       	mov	r14, r31
    1f4c:	f7 e0       	ldi	r31, 0x07	; 7
    1f4e:	ff 2e       	mov	r15, r31
    1f50:	f0 2d       	mov	r31, r0
    1f52:	00 e0       	ldi	r16, 0x00	; 0
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	44 ec       	ldi	r20, 0xC4	; 196
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	61 e1       	ldi	r22, 0x11	; 17
    1f5e:	71 e0       	ldi	r23, 0x01	; 1
    1f60:	8c e4       	ldi	r24, 0x4C	; 76
    1f62:	93 e1       	ldi	r25, 0x13	; 19
    1f64:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <xTaskCreate>
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	81 f4       	brne	.+32     	; 0x1f90 <vTaskStartScheduler+0x5a>
    1f70:	f8 94       	cli
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	9f ef       	ldi	r25, 0xFF	; 255
    1f76:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    1f7a:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <xSchedulerRunning>
    1f84:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <xTickCount+0x1>
    1f88:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <xTickCount>
    1f8c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <xPortStartScheduler>
    1f90:	00 00       	nop
    1f92:	0f 90       	pop	r0
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	08 95       	ret

00001fa0 <vTaskSuspendAll>:
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    1fac:	8f 5f       	subi	r24, 0xFF	; 255
    1fae:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <uxSchedulerSuspended>
    1fb2:	00 00       	nop
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <xTaskResumeAll>:
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <xTaskResumeAll+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <xTaskResumeAll+0x8>
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	1a 82       	std	Y+2, r1	; 0x02
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    1fca:	1b 82       	std	Y+3, r1	; 0x03
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	0f 92       	push	r0
    1fd2:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    1fd6:	81 50       	subi	r24, 0x01	; 1
    1fd8:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <uxSchedulerSuspended>
    1fdc:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    1fe0:	88 23       	and	r24, r24
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <xTaskResumeAll+0x2c>
    1fe4:	77 c0       	rjmp	.+238    	; 0x20d4 <xTaskResumeAll+0x11a>
    1fe6:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    1fea:	88 23       	and	r24, r24
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <xTaskResumeAll+0x36>
    1fee:	72 c0       	rjmp	.+228    	; 0x20d4 <xTaskResumeAll+0x11a>
    1ff0:	49 c0       	rjmp	.+146    	; 0x2084 <xTaskResumeAll+0xca>
    1ff2:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xPendingReadyList+0x5>
    1ff6:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <xPendingReadyList+0x6>
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	86 81       	ldd	r24, Z+6	; 0x06
    1ffe:	97 81       	ldd	r25, Z+7	; 0x07
    2000:	9a 83       	std	Y+2, r25	; 0x02
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	9a 81       	ldd	r25, Y+2	; 0x02
    2008:	0c 96       	adiw	r24, 0x0c	; 12
    200a:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	02 96       	adiw	r24, 0x02	; 2
    2014:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	fc 01       	movw	r30, r24
    201e:	96 89       	ldd	r25, Z+22	; 0x16
    2020:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    2024:	89 17       	cp	r24, r25
    2026:	30 f4       	brcc	.+12     	; 0x2034 <xTaskResumeAll+0x7a>
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	fc 01       	movw	r30, r24
    202e:	86 89       	ldd	r24, Z+22	; 0x16
    2030:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	ac 01       	movw	r20, r24
    203a:	4e 5f       	subi	r20, 0xFE	; 254
    203c:	5f 4f       	sbci	r21, 0xFF	; 255
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	fc 01       	movw	r30, r24
    2044:	86 89       	ldd	r24, Z+22	; 0x16
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	c9 01       	movw	r24, r18
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	82 0f       	add	r24, r18
    205a:	93 1f       	adc	r25, r19
    205c:	89 5b       	subi	r24, 0xB9	; 185
    205e:	98 4f       	sbci	r25, 0xF8	; 248
    2060:	ba 01       	movw	r22, r20
    2062:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	fc 01       	movw	r30, r24
    206c:	26 89       	ldd	r18, Z+22	; 0x16
    206e:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2072:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2076:	fc 01       	movw	r30, r24
    2078:	86 89       	ldd	r24, Z+22	; 0x16
    207a:	28 17       	cp	r18, r24
    207c:	18 f0       	brcs	.+6      	; 0x2084 <xTaskResumeAll+0xca>
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xYieldPending>
    2084:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <xPendingReadyList>
    2088:	88 23       	and	r24, r24
    208a:	09 f0       	breq	.+2      	; 0x208e <xTaskResumeAll+0xd4>
    208c:	b2 cf       	rjmp	.-156    	; 0x1ff2 <xTaskResumeAll+0x38>
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	89 2b       	or	r24, r25
    2094:	11 f0       	breq	.+4      	; 0x209a <xTaskResumeAll+0xe0>
    2096:	0e 94 9e 13 	call	0x273c	; 0x273c <prvResetNextTaskUnblockTime>
    209a:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxPendedTicks>
    209e:	8c 83       	std	Y+4, r24	; 0x04
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	88 23       	and	r24, r24
    20a4:	79 f0       	breq	.+30     	; 0x20c4 <xTaskResumeAll+0x10a>
    20a6:	0e 94 8b 10 	call	0x2116	; 0x2116 <xTaskIncrementTick>
    20aa:	88 23       	and	r24, r24
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <xTaskResumeAll+0xfa>
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xYieldPending>
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	81 50       	subi	r24, 0x01	; 1
    20b8:	8c 83       	std	Y+4, r24	; 0x04
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	88 23       	and	r24, r24
    20be:	99 f7       	brne	.-26     	; 0x20a6 <xTaskResumeAll+0xec>
    20c0:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <uxPendedTicks>
    20c4:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xYieldPending>
    20c8:	88 23       	and	r24, r24
    20ca:	21 f0       	breq	.+8      	; 0x20d4 <xTaskResumeAll+0x11a>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	8b 83       	std	Y+3, r24	; 0x03
    20d0:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    20d4:	0f 90       	pop	r0
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	08 95       	ret

000020e8 <xTaskGetTickCount>:
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <xTaskGetTickCount+0x6>
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	0f 92       	push	r0
    20f8:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTickCount>
    20fc:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTickCount+0x1>
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	0f 90       	pop	r0
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	08 95       	ret

00002116 <xTaskIncrementTick>:
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	29 97       	sbiw	r28, 0x09	; 9
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	19 82       	std	Y+1, r1	; 0x01
    212c:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    2130:	88 23       	and	r24, r24
    2132:	09 f0       	breq	.+2      	; 0x2136 <xTaskIncrementTick+0x20>
    2134:	c8 c0       	rjmp	.+400    	; 0x22c6 <xTaskIncrementTick+0x1b0>
    2136:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTickCount>
    213a:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTickCount+0x1>
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	9b 83       	std	Y+3, r25	; 0x03
    2142:	8a 83       	std	Y+2, r24	; 0x02
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <xTickCount+0x1>
    214c:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <xTickCount>
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	9b 81       	ldd	r25, Y+3	; 0x03
    2154:	89 2b       	or	r24, r25
    2156:	d9 f4       	brne	.+54     	; 0x218e <xTaskIncrementTick+0x78>
    2158:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    215c:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    2160:	9d 83       	std	Y+5, r25	; 0x05
    2162:	8c 83       	std	Y+4, r24	; 0x04
    2164:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <pxOverflowDelayedTaskList>
    2168:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <pxOverflowDelayedTaskList+0x1>
    216c:	90 93 7e 07 	sts	0x077E, r25	; 0x80077e <pxDelayedTaskList+0x1>
    2170:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <pxDelayedTaskList>
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	9d 81       	ldd	r25, Y+5	; 0x05
    2178:	90 93 80 07 	sts	0x0780, r25	; 0x800780 <pxOverflowDelayedTaskList+0x1>
    217c:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <pxOverflowDelayedTaskList>
    2180:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xNumOfOverflows>
    2184:	8f 5f       	subi	r24, 0xFF	; 255
    2186:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <xNumOfOverflows>
    218a:	0e 94 9e 13 	call	0x273c	; 0x273c <prvResetNextTaskUnblockTime>
    218e:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <xNextTaskUnblockTime>
    2192:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <xNextTaskUnblockTime+0x1>
    2196:	2a 81       	ldd	r18, Y+2	; 0x02
    2198:	3b 81       	ldd	r19, Y+3	; 0x03
    219a:	28 17       	cp	r18, r24
    219c:	39 07       	cpc	r19, r25
    219e:	08 f4       	brcc	.+2      	; 0x21a2 <xTaskIncrementTick+0x8c>
    21a0:	78 c0       	rjmp	.+240    	; 0x2292 <xTaskIncrementTick+0x17c>
    21a2:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    21a6:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    21aa:	fc 01       	movw	r30, r24
    21ac:	80 81       	ld	r24, Z
    21ae:	88 23       	and	r24, r24
    21b0:	39 f4       	brne	.+14     	; 0x21c0 <xTaskIncrementTick+0xaa>
    21b2:	8f ef       	ldi	r24, 0xFF	; 255
    21b4:	9f ef       	ldi	r25, 0xFF	; 255
    21b6:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    21ba:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>
    21be:	69 c0       	rjmp	.+210    	; 0x2292 <xTaskIncrementTick+0x17c>
    21c0:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    21c4:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    21c8:	fc 01       	movw	r30, r24
    21ca:	85 81       	ldd	r24, Z+5	; 0x05
    21cc:	96 81       	ldd	r25, Z+6	; 0x06
    21ce:	fc 01       	movw	r30, r24
    21d0:	86 81       	ldd	r24, Z+6	; 0x06
    21d2:	97 81       	ldd	r25, Z+7	; 0x07
    21d4:	9f 83       	std	Y+7, r25	; 0x07
    21d6:	8e 83       	std	Y+6, r24	; 0x06
    21d8:	8e 81       	ldd	r24, Y+6	; 0x06
    21da:	9f 81       	ldd	r25, Y+7	; 0x07
    21dc:	fc 01       	movw	r30, r24
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	93 81       	ldd	r25, Z+3	; 0x03
    21e2:	99 87       	std	Y+9, r25	; 0x09
    21e4:	88 87       	std	Y+8, r24	; 0x08
    21e6:	2a 81       	ldd	r18, Y+2	; 0x02
    21e8:	3b 81       	ldd	r19, Y+3	; 0x03
    21ea:	88 85       	ldd	r24, Y+8	; 0x08
    21ec:	99 85       	ldd	r25, Y+9	; 0x09
    21ee:	28 17       	cp	r18, r24
    21f0:	39 07       	cpc	r19, r25
    21f2:	38 f4       	brcc	.+14     	; 0x2202 <xTaskIncrementTick+0xec>
    21f4:	88 85       	ldd	r24, Y+8	; 0x08
    21f6:	99 85       	ldd	r25, Y+9	; 0x09
    21f8:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    21fc:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>
    2200:	48 c0       	rjmp	.+144    	; 0x2292 <xTaskIncrementTick+0x17c>
    2202:	8e 81       	ldd	r24, Y+6	; 0x06
    2204:	9f 81       	ldd	r25, Y+7	; 0x07
    2206:	02 96       	adiw	r24, 0x02	; 2
    2208:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    220c:	8e 81       	ldd	r24, Y+6	; 0x06
    220e:	9f 81       	ldd	r25, Y+7	; 0x07
    2210:	fc 01       	movw	r30, r24
    2212:	84 89       	ldd	r24, Z+20	; 0x14
    2214:	95 89       	ldd	r25, Z+21	; 0x15
    2216:	89 2b       	or	r24, r25
    2218:	29 f0       	breq	.+10     	; 0x2224 <xTaskIncrementTick+0x10e>
    221a:	8e 81       	ldd	r24, Y+6	; 0x06
    221c:	9f 81       	ldd	r25, Y+7	; 0x07
    221e:	0c 96       	adiw	r24, 0x0c	; 12
    2220:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    2224:	8e 81       	ldd	r24, Y+6	; 0x06
    2226:	9f 81       	ldd	r25, Y+7	; 0x07
    2228:	fc 01       	movw	r30, r24
    222a:	96 89       	ldd	r25, Z+22	; 0x16
    222c:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    2230:	89 17       	cp	r24, r25
    2232:	30 f4       	brcc	.+12     	; 0x2240 <xTaskIncrementTick+0x12a>
    2234:	8e 81       	ldd	r24, Y+6	; 0x06
    2236:	9f 81       	ldd	r25, Y+7	; 0x07
    2238:	fc 01       	movw	r30, r24
    223a:	86 89       	ldd	r24, Z+22	; 0x16
    223c:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    2240:	8e 81       	ldd	r24, Y+6	; 0x06
    2242:	9f 81       	ldd	r25, Y+7	; 0x07
    2244:	ac 01       	movw	r20, r24
    2246:	4e 5f       	subi	r20, 0xFE	; 254
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	9f 81       	ldd	r25, Y+7	; 0x07
    224e:	fc 01       	movw	r30, r24
    2250:	86 89       	ldd	r24, Z+22	; 0x16
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	c9 01       	movw	r24, r18
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	82 0f       	add	r24, r18
    2266:	93 1f       	adc	r25, r19
    2268:	89 5b       	subi	r24, 0xB9	; 185
    226a:	98 4f       	sbci	r25, 0xF8	; 248
    226c:	ba 01       	movw	r22, r20
    226e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    2272:	8e 81       	ldd	r24, Y+6	; 0x06
    2274:	9f 81       	ldd	r25, Y+7	; 0x07
    2276:	fc 01       	movw	r30, r24
    2278:	26 89       	ldd	r18, Z+22	; 0x16
    227a:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    227e:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2282:	fc 01       	movw	r30, r24
    2284:	86 89       	ldd	r24, Z+22	; 0x16
    2286:	28 17       	cp	r18, r24
    2288:	08 f4       	brcc	.+2      	; 0x228c <xTaskIncrementTick+0x176>
    228a:	8b cf       	rjmp	.-234    	; 0x21a2 <xTaskIncrementTick+0x8c>
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	88 cf       	rjmp	.-240    	; 0x21a2 <xTaskIncrementTick+0x8c>
    2292:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2296:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    229a:	fc 01       	movw	r30, r24
    229c:	86 89       	ldd	r24, Z+22	; 0x16
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	c9 01       	movw	r24, r18
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	82 0f       	add	r24, r18
    22b2:	93 1f       	adc	r25, r19
    22b4:	89 5b       	subi	r24, 0xB9	; 185
    22b6:	98 4f       	sbci	r25, 0xF8	; 248
    22b8:	fc 01       	movw	r30, r24
    22ba:	80 81       	ld	r24, Z
    22bc:	82 30       	cpi	r24, 0x02	; 2
    22be:	40 f0       	brcs	.+16     	; 0x22d0 <xTaskIncrementTick+0x1ba>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	05 c0       	rjmp	.+10     	; 0x22d0 <xTaskIncrementTick+0x1ba>
    22c6:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxPendedTicks>
    22ca:	8f 5f       	subi	r24, 0xFF	; 255
    22cc:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <uxPendedTicks>
    22d0:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xYieldPending>
    22d4:	88 23       	and	r24, r24
    22d6:	11 f0       	breq	.+4      	; 0x22dc <xTaskIncrementTick+0x1c6>
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	29 96       	adiw	r28, 0x09	; 9
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	08 95       	ret

000022f0 <vTaskSetApplicationTaskTag>:
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <vTaskSetApplicationTaskTag+0x6>
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <vTaskSetApplicationTaskTag+0x8>
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <vTaskSetApplicationTaskTag+0xa>
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
    2302:	7e 83       	std	Y+6, r23	; 0x06
    2304:	6d 83       	std	Y+5, r22	; 0x05
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	89 2b       	or	r24, r25
    230c:	39 f4       	brne	.+14     	; 0x231c <vTaskSetApplicationTaskTag+0x2c>
    230e:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2312:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	04 c0       	rjmp	.+8      	; 0x2324 <vTaskSetApplicationTaskTag+0x34>
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	0f 92       	push	r0
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	2d 81       	ldd	r18, Y+5	; 0x05
    2330:	3e 81       	ldd	r19, Y+6	; 0x06
    2332:	fc 01       	movw	r30, r24
    2334:	32 a3       	std	Z+34, r19	; 0x22
    2336:	21 a3       	std	Z+33, r18	; 0x21
    2338:	0f 90       	pop	r0
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	00 00       	nop
    233e:	26 96       	adiw	r28, 0x06	; 6
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	08 95       	ret

00002350 <vTaskSwitchContext>:
    2350:	1f 93       	push	r17
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	00 d0       	rcall	.+0      	; 0x2358 <vTaskSwitchContext+0x8>
    2358:	1f 92       	push	r1
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    2362:	88 23       	and	r24, r24
    2364:	21 f0       	breq	.+8      	; 0x236e <vTaskSwitchContext+0x1e>
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xYieldPending>
    236c:	6e c0       	rjmp	.+220    	; 0x244a <vTaskSwitchContext+0xfa>
    236e:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <xYieldPending>
    2372:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	03 c0       	rjmp	.+6      	; 0x2380 <vTaskSwitchContext+0x30>
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	81 50       	subi	r24, 0x01	; 1
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	c9 01       	movw	r24, r18
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	82 0f       	add	r24, r18
    2396:	93 1f       	adc	r25, r19
    2398:	89 5b       	subi	r24, 0xB9	; 185
    239a:	98 4f       	sbci	r25, 0xF8	; 248
    239c:	fc 01       	movw	r30, r24
    239e:	80 81       	ld	r24, Z
    23a0:	88 23       	and	r24, r24
    23a2:	59 f3       	breq	.-42     	; 0x237a <vTaskSwitchContext+0x2a>
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	c9 01       	movw	r24, r18
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	82 0f       	add	r24, r18
    23ba:	93 1f       	adc	r25, r19
    23bc:	89 5b       	subi	r24, 0xB9	; 185
    23be:	98 4f       	sbci	r25, 0xF8	; 248
    23c0:	9b 83       	std	Y+3, r25	; 0x03
    23c2:	8a 83       	std	Y+2, r24	; 0x02
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	9b 81       	ldd	r25, Y+3	; 0x03
    23c8:	fc 01       	movw	r30, r24
    23ca:	81 81       	ldd	r24, Z+1	; 0x01
    23cc:	92 81       	ldd	r25, Z+2	; 0x02
    23ce:	fc 01       	movw	r30, r24
    23d0:	22 81       	ldd	r18, Z+2	; 0x02
    23d2:	33 81       	ldd	r19, Z+3	; 0x03
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	9b 81       	ldd	r25, Y+3	; 0x03
    23d8:	fc 01       	movw	r30, r24
    23da:	32 83       	std	Z+2, r19	; 0x02
    23dc:	21 83       	std	Z+1, r18	; 0x01
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	9b 81       	ldd	r25, Y+3	; 0x03
    23e2:	fc 01       	movw	r30, r24
    23e4:	21 81       	ldd	r18, Z+1	; 0x01
    23e6:	32 81       	ldd	r19, Z+2	; 0x02
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	9b 81       	ldd	r25, Y+3	; 0x03
    23ec:	03 96       	adiw	r24, 0x03	; 3
    23ee:	28 17       	cp	r18, r24
    23f0:	39 07       	cpc	r19, r25
    23f2:	69 f4       	brne	.+26     	; 0x240e <vTaskSwitchContext+0xbe>
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	9b 81       	ldd	r25, Y+3	; 0x03
    23f8:	fc 01       	movw	r30, r24
    23fa:	81 81       	ldd	r24, Z+1	; 0x01
    23fc:	92 81       	ldd	r25, Z+2	; 0x02
    23fe:	fc 01       	movw	r30, r24
    2400:	22 81       	ldd	r18, Z+2	; 0x02
    2402:	33 81       	ldd	r19, Z+3	; 0x03
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	9b 81       	ldd	r25, Y+3	; 0x03
    2408:	fc 01       	movw	r30, r24
    240a:	32 83       	std	Z+2, r19	; 0x02
    240c:	21 83       	std	Z+1, r18	; 0x01
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	9b 81       	ldd	r25, Y+3	; 0x03
    2412:	fc 01       	movw	r30, r24
    2414:	81 81       	ldd	r24, Z+1	; 0x01
    2416:	92 81       	ldd	r25, Z+2	; 0x02
    2418:	fc 01       	movw	r30, r24
    241a:	86 81       	ldd	r24, Z+6	; 0x06
    241c:	97 81       	ldd	r25, Z+7	; 0x07
    241e:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pxCurrentTCB+0x1>
    2422:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pxCurrentTCB>
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    242c:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2430:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2434:	fc 01       	movw	r30, r24
    2436:	81 a1       	ldd	r24, Z+33	; 0x21
    2438:	92 a1       	ldd	r25, Z+34	; 0x22
    243a:	18 2f       	mov	r17, r24
    243c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	61 2f       	mov	r22, r17
    2446:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
    244a:	00 00       	nop
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	08 95       	ret

0000245a <vTaskPlaceOnEventList>:
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	00 d0       	rcall	.+0      	; 0x2460 <vTaskPlaceOnEventList+0x6>
    2460:	00 d0       	rcall	.+0      	; 0x2462 <vTaskPlaceOnEventList+0x8>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	7c 83       	std	Y+4, r23	; 0x04
    246c:	6b 83       	std	Y+3, r22	; 0x03
    246e:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2472:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2476:	9c 01       	movw	r18, r24
    2478:	24 5f       	subi	r18, 0xF4	; 244
    247a:	3f 4f       	sbci	r19, 0xFF	; 255
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	b9 01       	movw	r22, r18
    2482:	0e 94 4a 02 	call	0x494	; 0x494 <vListInsert>
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <prvAddCurrentTaskToDelayedList>
    2490:	00 00       	nop
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	08 95       	ret

000024a0 <xTaskRemoveFromEventList>:
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <xTaskRemoveFromEventList+0x6>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <xTaskRemoveFromEventList+0x8>
    24a8:	1f 92       	push	r1
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	9d 83       	std	Y+5, r25	; 0x05
    24b0:	8c 83       	std	Y+4, r24	; 0x04
    24b2:	8c 81       	ldd	r24, Y+4	; 0x04
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	fc 01       	movw	r30, r24
    24b8:	85 81       	ldd	r24, Z+5	; 0x05
    24ba:	96 81       	ldd	r25, Z+6	; 0x06
    24bc:	fc 01       	movw	r30, r24
    24be:	86 81       	ldd	r24, Z+6	; 0x06
    24c0:	97 81       	ldd	r25, Z+7	; 0x07
    24c2:	9b 83       	std	Y+3, r25	; 0x03
    24c4:	8a 83       	std	Y+2, r24	; 0x02
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ca:	0c 96       	adiw	r24, 0x0c	; 12
    24cc:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    24d0:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <uxSchedulerSuspended>
    24d4:	88 23       	and	r24, r24
    24d6:	69 f5       	brne	.+90     	; 0x2532 <xTaskRemoveFromEventList+0x92>
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	9b 81       	ldd	r25, Y+3	; 0x03
    24dc:	02 96       	adiw	r24, 0x02	; 2
    24de:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	9b 81       	ldd	r25, Y+3	; 0x03
    24e6:	fc 01       	movw	r30, r24
    24e8:	96 89       	ldd	r25, Z+22	; 0x16
    24ea:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    24ee:	89 17       	cp	r24, r25
    24f0:	30 f4       	brcc	.+12     	; 0x24fe <xTaskRemoveFromEventList+0x5e>
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	9b 81       	ldd	r25, Y+3	; 0x03
    24f6:	fc 01       	movw	r30, r24
    24f8:	86 89       	ldd	r24, Z+22	; 0x16
    24fa:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	9b 81       	ldd	r25, Y+3	; 0x03
    2502:	ac 01       	movw	r20, r24
    2504:	4e 5f       	subi	r20, 0xFE	; 254
    2506:	5f 4f       	sbci	r21, 0xFF	; 255
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	9b 81       	ldd	r25, Y+3	; 0x03
    250c:	fc 01       	movw	r30, r24
    250e:	86 89       	ldd	r24, Z+22	; 0x16
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	c9 01       	movw	r24, r18
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	82 0f       	add	r24, r18
    2524:	93 1f       	adc	r25, r19
    2526:	89 5b       	subi	r24, 0xB9	; 185
    2528:	98 4f       	sbci	r25, 0xF8	; 248
    252a:	ba 01       	movw	r22, r20
    252c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    2530:	08 c0       	rjmp	.+16     	; 0x2542 <xTaskRemoveFromEventList+0xa2>
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	9b 81       	ldd	r25, Y+3	; 0x03
    2536:	0c 96       	adiw	r24, 0x0c	; 12
    2538:	bc 01       	movw	r22, r24
    253a:	81 e8       	ldi	r24, 0x81	; 129
    253c:	97 e0       	ldi	r25, 0x07	; 7
    253e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	9b 81       	ldd	r25, Y+3	; 0x03
    2546:	fc 01       	movw	r30, r24
    2548:	26 89       	ldd	r18, Z+22	; 0x16
    254a:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    254e:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2552:	fc 01       	movw	r30, r24
    2554:	86 89       	ldd	r24, Z+22	; 0x16
    2556:	82 17       	cp	r24, r18
    2558:	30 f4       	brcc	.+12     	; 0x2566 <xTaskRemoveFromEventList+0xc6>
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xYieldPending>
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <xTaskRemoveFromEventList+0xc8>
    2566:	19 82       	std	Y+1, r1	; 0x01
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

0000257a <vTaskSetTimeOutState>:
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	00 d0       	rcall	.+0      	; 0x2580 <vTaskSetTimeOutState+0x6>
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	20 91 91 07 	lds	r18, 0x0791	; 0x800791 <xNumOfOverflows>
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
    2590:	fc 01       	movw	r30, r24
    2592:	20 83       	st	Z, r18
    2594:	20 91 8b 07 	lds	r18, 0x078B	; 0x80078b <xTickCount>
    2598:	30 91 8c 07 	lds	r19, 0x078C	; 0x80078c <xTickCount+0x1>
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	fc 01       	movw	r30, r24
    25a2:	32 83       	std	Z+2, r19	; 0x02
    25a4:	21 83       	std	Z+1, r18	; 0x01
    25a6:	00 00       	nop
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <xTaskCheckForTimeOut>:
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	27 97       	sbiw	r28, 0x07	; 7
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	9d 83       	std	Y+5, r25	; 0x05
    25c8:	8c 83       	std	Y+4, r24	; 0x04
    25ca:	7f 83       	std	Y+7, r23	; 0x07
    25cc:	6e 83       	std	Y+6, r22	; 0x06
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	0f 92       	push	r0
    25d4:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTickCount>
    25d8:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTickCount+0x1>
    25dc:	9b 83       	std	Y+3, r25	; 0x03
    25de:	8a 83       	std	Y+2, r24	; 0x02
    25e0:	8c 81       	ldd	r24, Y+4	; 0x04
    25e2:	9d 81       	ldd	r25, Y+5	; 0x05
    25e4:	fc 01       	movw	r30, r24
    25e6:	90 81       	ld	r25, Z
    25e8:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xNumOfOverflows>
    25ec:	98 17       	cp	r25, r24
    25ee:	69 f0       	breq	.+26     	; 0x260a <xTaskCheckForTimeOut+0x58>
    25f0:	8c 81       	ldd	r24, Y+4	; 0x04
    25f2:	9d 81       	ldd	r25, Y+5	; 0x05
    25f4:	fc 01       	movw	r30, r24
    25f6:	21 81       	ldd	r18, Z+1	; 0x01
    25f8:	32 81       	ldd	r19, Z+2	; 0x02
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	9b 81       	ldd	r25, Y+3	; 0x03
    25fe:	82 17       	cp	r24, r18
    2600:	93 07       	cpc	r25, r19
    2602:	18 f0       	brcs	.+6      	; 0x260a <xTaskCheckForTimeOut+0x58>
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	30 c0       	rjmp	.+96     	; 0x266a <xTaskCheckForTimeOut+0xb8>
    260a:	8c 81       	ldd	r24, Y+4	; 0x04
    260c:	9d 81       	ldd	r25, Y+5	; 0x05
    260e:	fc 01       	movw	r30, r24
    2610:	81 81       	ldd	r24, Z+1	; 0x01
    2612:	92 81       	ldd	r25, Z+2	; 0x02
    2614:	2a 81       	ldd	r18, Y+2	; 0x02
    2616:	3b 81       	ldd	r19, Y+3	; 0x03
    2618:	28 1b       	sub	r18, r24
    261a:	39 0b       	sbc	r19, r25
    261c:	8e 81       	ldd	r24, Y+6	; 0x06
    261e:	9f 81       	ldd	r25, Y+7	; 0x07
    2620:	fc 01       	movw	r30, r24
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	28 17       	cp	r18, r24
    2628:	39 07       	cpc	r19, r25
    262a:	e8 f4       	brcc	.+58     	; 0x2666 <xTaskCheckForTimeOut+0xb4>
    262c:	8e 81       	ldd	r24, Y+6	; 0x06
    262e:	9f 81       	ldd	r25, Y+7	; 0x07
    2630:	fc 01       	movw	r30, r24
    2632:	20 81       	ld	r18, Z
    2634:	31 81       	ldd	r19, Z+1	; 0x01
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	fc 01       	movw	r30, r24
    263c:	41 81       	ldd	r20, Z+1	; 0x01
    263e:	52 81       	ldd	r21, Z+2	; 0x02
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	9b 81       	ldd	r25, Y+3	; 0x03
    2644:	ba 01       	movw	r22, r20
    2646:	68 1b       	sub	r22, r24
    2648:	79 0b       	sbc	r23, r25
    264a:	cb 01       	movw	r24, r22
    264c:	28 0f       	add	r18, r24
    264e:	39 1f       	adc	r19, r25
    2650:	8e 81       	ldd	r24, Y+6	; 0x06
    2652:	9f 81       	ldd	r25, Y+7	; 0x07
    2654:	fc 01       	movw	r30, r24
    2656:	31 83       	std	Z+1, r19	; 0x01
    2658:	20 83       	st	Z, r18
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	9d 81       	ldd	r25, Y+5	; 0x05
    265e:	0e 94 bd 12 	call	0x257a	; 0x257a <vTaskSetTimeOutState>
    2662:	19 82       	std	Y+1, r1	; 0x01
    2664:	02 c0       	rjmp	.+4      	; 0x266a <xTaskCheckForTimeOut+0xb8>
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	0f 90       	pop	r0
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	27 96       	adiw	r28, 0x07	; 7
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	08 95       	ret

00002682 <vTaskMissedYield>:
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <xYieldPending>
    2690:	00 00       	nop
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	08 95       	ret

00002698 <prvIdleTask>:
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	00 d0       	rcall	.+0      	; 0x269e <prvIdleTask+0x6>
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	9a 83       	std	Y+2, r25	; 0x02
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	0e 94 96 13 	call	0x272c	; 0x272c <prvCheckTasksWaitingTermination>
    26aa:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <pxReadyTasksLists>
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	d0 f3       	brcs	.-12     	; 0x26a6 <prvIdleTask+0xe>
    26b2:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYield>
    26b6:	f7 cf       	rjmp	.-18     	; 0x26a6 <prvIdleTask+0xe>

000026b8 <prvInitialiseTaskLists>:
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	1f 92       	push	r1
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	19 82       	std	Y+1, r1	; 0x01
    26c4:	13 c0       	rjmp	.+38     	; 0x26ec <prvInitialiseTaskLists+0x34>
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	c9 01       	movw	r24, r18
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	82 0f       	add	r24, r18
    26dc:	93 1f       	adc	r25, r19
    26de:	89 5b       	subi	r24, 0xB9	; 185
    26e0:	98 4f       	sbci	r25, 0xF8	; 248
    26e2:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	8f 5f       	subi	r24, 0xFF	; 255
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	84 30       	cpi	r24, 0x04	; 4
    26f0:	50 f3       	brcs	.-44     	; 0x26c6 <prvInitialiseTaskLists+0xe>
    26f2:	8b e6       	ldi	r24, 0x6B	; 107
    26f4:	97 e0       	ldi	r25, 0x07	; 7
    26f6:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    26fa:	84 e7       	ldi	r24, 0x74	; 116
    26fc:	97 e0       	ldi	r25, 0x07	; 7
    26fe:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    2702:	81 e8       	ldi	r24, 0x81	; 129
    2704:	97 e0       	ldi	r25, 0x07	; 7
    2706:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialise>
    270a:	8b e6       	ldi	r24, 0x6B	; 107
    270c:	97 e0       	ldi	r25, 0x07	; 7
    270e:	90 93 7e 07 	sts	0x077E, r25	; 0x80077e <pxDelayedTaskList+0x1>
    2712:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <pxDelayedTaskList>
    2716:	84 e7       	ldi	r24, 0x74	; 116
    2718:	97 e0       	ldi	r25, 0x07	; 7
    271a:	90 93 80 07 	sts	0x0780, r25	; 0x800780 <pxOverflowDelayedTaskList+0x1>
    271e:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <pxOverflowDelayedTaskList>
    2722:	00 00       	nop
    2724:	0f 90       	pop	r0
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	08 95       	ret

0000272c <prvCheckTasksWaitingTermination>:
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	00 00       	nop
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	08 95       	ret

0000273c <prvResetNextTaskUnblockTime>:
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	00 d0       	rcall	.+0      	; 0x2742 <prvResetNextTaskUnblockTime+0x6>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    274a:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    274e:	fc 01       	movw	r30, r24
    2750:	80 81       	ld	r24, Z
    2752:	88 23       	and	r24, r24
    2754:	39 f4       	brne	.+14     	; 0x2764 <prvResetNextTaskUnblockTime+0x28>
    2756:	8f ef       	ldi	r24, 0xFF	; 255
    2758:	9f ef       	ldi	r25, 0xFF	; 255
    275a:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    275e:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>
    2762:	15 c0       	rjmp	.+42     	; 0x278e <prvResetNextTaskUnblockTime+0x52>
    2764:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    2768:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    276c:	fc 01       	movw	r30, r24
    276e:	85 81       	ldd	r24, Z+5	; 0x05
    2770:	96 81       	ldd	r25, Z+6	; 0x06
    2772:	fc 01       	movw	r30, r24
    2774:	86 81       	ldd	r24, Z+6	; 0x06
    2776:	97 81       	ldd	r25, Z+7	; 0x07
    2778:	9a 83       	std	Y+2, r25	; 0x02
    277a:	89 83       	std	Y+1, r24	; 0x01
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	9a 81       	ldd	r25, Y+2	; 0x02
    2780:	fc 01       	movw	r30, r24
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    278a:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>
    278e:	00 00       	nop
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <vTaskPriorityInherit>:
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <vTaskPriorityInherit+0x6>
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <vTaskPriorityInherit+0x8>
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	9c 83       	std	Y+4, r25	; 0x04
    27a8:	8b 83       	std	Y+3, r24	; 0x03
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	9c 81       	ldd	r25, Y+4	; 0x04
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	9c 81       	ldd	r25, Y+4	; 0x04
    27b6:	89 2b       	or	r24, r25
    27b8:	09 f4       	brne	.+2      	; 0x27bc <vTaskPriorityInherit+0x22>
    27ba:	7f c0       	rjmp	.+254    	; 0x28ba <vTaskPriorityInherit+0x120>
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	fc 01       	movw	r30, r24
    27c2:	26 89       	ldd	r18, Z+22	; 0x16
    27c4:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    27c8:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    27cc:	fc 01       	movw	r30, r24
    27ce:	86 89       	ldd	r24, Z+22	; 0x16
    27d0:	28 17       	cp	r18, r24
    27d2:	08 f0       	brcs	.+2      	; 0x27d6 <vTaskPriorityInherit+0x3c>
    27d4:	72 c0       	rjmp	.+228    	; 0x28ba <vTaskPriorityInherit+0x120>
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	9a 81       	ldd	r25, Y+2	; 0x02
    27da:	fc 01       	movw	r30, r24
    27dc:	84 85       	ldd	r24, Z+12	; 0x0c
    27de:	95 85       	ldd	r25, Z+13	; 0x0d
    27e0:	99 23       	and	r25, r25
    27e2:	8c f0       	brlt	.+34     	; 0x2806 <vTaskPriorityInherit+0x6c>
    27e4:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    27e8:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    27ec:	fc 01       	movw	r30, r24
    27ee:	86 89       	ldd	r24, Z+22	; 0x16
    27f0:	88 2f       	mov	r24, r24
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	24 e0       	ldi	r18, 0x04	; 4
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	28 1b       	sub	r18, r24
    27fa:	39 0b       	sbc	r19, r25
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2800:	fc 01       	movw	r30, r24
    2802:	35 87       	std	Z+13, r19	; 0x0d
    2804:	24 87       	std	Z+12, r18	; 0x0c
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	9a 81       	ldd	r25, Y+2	; 0x02
    280a:	fc 01       	movw	r30, r24
    280c:	42 85       	ldd	r20, Z+10	; 0x0a
    280e:	53 85       	ldd	r21, Z+11	; 0x0b
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	9a 81       	ldd	r25, Y+2	; 0x02
    2814:	fc 01       	movw	r30, r24
    2816:	86 89       	ldd	r24, Z+22	; 0x16
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	c9 01       	movw	r24, r18
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	82 0f       	add	r24, r18
    282c:	93 1f       	adc	r25, r19
    282e:	89 5b       	subi	r24, 0xB9	; 185
    2830:	98 4f       	sbci	r25, 0xF8	; 248
    2832:	48 17       	cp	r20, r24
    2834:	59 07       	cpc	r21, r25
    2836:	b9 f5       	brne	.+110    	; 0x28a6 <vTaskPriorityInherit+0x10c>
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	02 96       	adiw	r24, 0x02	; 2
    283e:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    2842:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2846:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    284a:	fc 01       	movw	r30, r24
    284c:	26 89       	ldd	r18, Z+22	; 0x16
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	fc 01       	movw	r30, r24
    2854:	26 8b       	std	Z+22, r18	; 0x16
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	fc 01       	movw	r30, r24
    285c:	96 89       	ldd	r25, Z+22	; 0x16
    285e:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    2862:	89 17       	cp	r24, r25
    2864:	30 f4       	brcc	.+12     	; 0x2872 <vTaskPriorityInherit+0xd8>
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	fc 01       	movw	r30, r24
    286c:	86 89       	ldd	r24, Z+22	; 0x16
    286e:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	9a 81       	ldd	r25, Y+2	; 0x02
    2876:	ac 01       	movw	r20, r24
    2878:	4e 5f       	subi	r20, 0xFE	; 254
    287a:	5f 4f       	sbci	r21, 0xFF	; 255
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	9a 81       	ldd	r25, Y+2	; 0x02
    2880:	fc 01       	movw	r30, r24
    2882:	86 89       	ldd	r24, Z+22	; 0x16
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	c9 01       	movw	r24, r18
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	82 0f       	add	r24, r18
    2898:	93 1f       	adc	r25, r19
    289a:	89 5b       	subi	r24, 0xB9	; 185
    289c:	98 4f       	sbci	r25, 0xF8	; 248
    289e:	ba 01       	movw	r22, r20
    28a0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    28a4:	0a c0       	rjmp	.+20     	; 0x28ba <vTaskPriorityInherit+0x120>
    28a6:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    28aa:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    28ae:	fc 01       	movw	r30, r24
    28b0:	26 89       	ldd	r18, Z+22	; 0x16
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	fc 01       	movw	r30, r24
    28b8:	26 8b       	std	Z+22, r18	; 0x16
    28ba:	00 00       	nop
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	08 95       	ret

000028ca <xTaskPriorityDisinherit>:
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <xTaskPriorityDisinherit+0x6>
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <xTaskPriorityDisinherit+0x8>
    28d2:	1f 92       	push	r1
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	9d 83       	std	Y+5, r25	; 0x05
    28da:	8c 83       	std	Y+4, r24	; 0x04
    28dc:	8c 81       	ldd	r24, Y+4	; 0x04
    28de:	9d 81       	ldd	r25, Y+5	; 0x05
    28e0:	9b 83       	std	Y+3, r25	; 0x03
    28e2:	8a 83       	std	Y+2, r24	; 0x02
    28e4:	19 82       	std	Y+1, r1	; 0x01
    28e6:	8c 81       	ldd	r24, Y+4	; 0x04
    28e8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ea:	89 2b       	or	r24, r25
    28ec:	09 f4       	brne	.+2      	; 0x28f0 <xTaskPriorityDisinherit+0x26>
    28ee:	61 c0       	rjmp	.+194    	; 0x29b2 <xTaskPriorityDisinherit+0xe8>
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	9b 81       	ldd	r25, Y+3	; 0x03
    28f4:	fc 01       	movw	r30, r24
    28f6:	80 a1       	ldd	r24, Z+32	; 0x20
    28f8:	2f ef       	ldi	r18, 0xFF	; 255
    28fa:	28 0f       	add	r18, r24
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	fc 01       	movw	r30, r24
    2902:	20 a3       	std	Z+32, r18	; 0x20
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	9b 81       	ldd	r25, Y+3	; 0x03
    2908:	fc 01       	movw	r30, r24
    290a:	26 89       	ldd	r18, Z+22	; 0x16
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	9b 81       	ldd	r25, Y+3	; 0x03
    2910:	fc 01       	movw	r30, r24
    2912:	87 8d       	ldd	r24, Z+31	; 0x1f
    2914:	28 17       	cp	r18, r24
    2916:	09 f4       	brne	.+2      	; 0x291a <xTaskPriorityDisinherit+0x50>
    2918:	4c c0       	rjmp	.+152    	; 0x29b2 <xTaskPriorityDisinherit+0xe8>
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	9b 81       	ldd	r25, Y+3	; 0x03
    291e:	fc 01       	movw	r30, r24
    2920:	80 a1       	ldd	r24, Z+32	; 0x20
    2922:	88 23       	and	r24, r24
    2924:	09 f0       	breq	.+2      	; 0x2928 <xTaskPriorityDisinherit+0x5e>
    2926:	45 c0       	rjmp	.+138    	; 0x29b2 <xTaskPriorityDisinherit+0xe8>
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	9b 81       	ldd	r25, Y+3	; 0x03
    292c:	02 96       	adiw	r24, 0x02	; 2
    292e:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	9b 81       	ldd	r25, Y+3	; 0x03
    2936:	fc 01       	movw	r30, r24
    2938:	27 8d       	ldd	r18, Z+31	; 0x1f
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	fc 01       	movw	r30, r24
    2940:	26 8b       	std	Z+22, r18	; 0x16
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	9b 81       	ldd	r25, Y+3	; 0x03
    2946:	fc 01       	movw	r30, r24
    2948:	86 89       	ldd	r24, Z+22	; 0x16
    294a:	88 2f       	mov	r24, r24
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	24 e0       	ldi	r18, 0x04	; 4
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	28 1b       	sub	r18, r24
    2954:	39 0b       	sbc	r19, r25
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	9b 81       	ldd	r25, Y+3	; 0x03
    295a:	fc 01       	movw	r30, r24
    295c:	35 87       	std	Z+13, r19	; 0x0d
    295e:	24 87       	std	Z+12, r18	; 0x0c
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	9b 81       	ldd	r25, Y+3	; 0x03
    2964:	fc 01       	movw	r30, r24
    2966:	96 89       	ldd	r25, Z+22	; 0x16
    2968:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <uxTopReadyPriority>
    296c:	89 17       	cp	r24, r25
    296e:	30 f4       	brcc	.+12     	; 0x297c <xTaskPriorityDisinherit+0xb2>
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	9b 81       	ldd	r25, Y+3	; 0x03
    2974:	fc 01       	movw	r30, r24
    2976:	86 89       	ldd	r24, Z+22	; 0x16
    2978:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <uxTopReadyPriority>
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	9b 81       	ldd	r25, Y+3	; 0x03
    2980:	ac 01       	movw	r20, r24
    2982:	4e 5f       	subi	r20, 0xFE	; 254
    2984:	5f 4f       	sbci	r21, 0xFF	; 255
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	9b 81       	ldd	r25, Y+3	; 0x03
    298a:	fc 01       	movw	r30, r24
    298c:	86 89       	ldd	r24, Z+22	; 0x16
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	c9 01       	movw	r24, r18
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	88 0f       	add	r24, r24
    299a:	99 1f       	adc	r25, r25
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	82 0f       	add	r24, r18
    29a2:	93 1f       	adc	r25, r19
    29a4:	89 5b       	subi	r24, 0xB9	; 185
    29a6:	98 4f       	sbci	r25, 0xF8	; 248
    29a8:	ba 01       	movw	r22, r20
    29aa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vListInsertEnd>
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	08 95       	ret

000029c4 <pvTaskIncrementMutexHeldCount>:
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    29d0:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    29d4:	89 2b       	or	r24, r25
    29d6:	49 f0       	breq	.+18     	; 0x29ea <pvTaskIncrementMutexHeldCount+0x26>
    29d8:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    29dc:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    29e0:	fc 01       	movw	r30, r24
    29e2:	20 a1       	ldd	r18, Z+32	; 0x20
    29e4:	2f 5f       	subi	r18, 0xFF	; 255
    29e6:	fc 01       	movw	r30, r24
    29e8:	20 a3       	std	Z+32, r18	; 0x20
    29ea:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    29ee:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	08 95       	ret

000029f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	27 97       	sbiw	r28, 0x07	; 7
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	9e 83       	std	Y+6, r25	; 0x06
    2a0e:	8d 83       	std	Y+5, r24	; 0x05
    2a10:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2a12:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTickCount>
    2a16:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTickCount+0x1>
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2a1e:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2a22:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2a26:	02 96       	adiw	r24, 0x02	; 2
    2a28:	0e 94 c2 02 	call	0x584	; 0x584 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    2a2c:	29 81       	ldd	r18, Y+1	; 0x01
    2a2e:	3a 81       	ldd	r19, Y+2	; 0x02
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	9e 81       	ldd	r25, Y+6	; 0x06
    2a34:	82 0f       	add	r24, r18
    2a36:	93 1f       	adc	r25, r19
    2a38:	9c 83       	std	Y+4, r25	; 0x04
    2a3a:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2a3c:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2a40:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2a44:	2b 81       	ldd	r18, Y+3	; 0x03
    2a46:	3c 81       	ldd	r19, Y+4	; 0x04
    2a48:	fc 01       	movw	r30, r24
    2a4a:	33 83       	std	Z+3, r19	; 0x03
    2a4c:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    2a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a50:	3c 81       	ldd	r19, Y+4	; 0x04
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	28 17       	cp	r18, r24
    2a58:	39 07       	cpc	r19, r25
    2a5a:	78 f4       	brcc	.+30     	; 0x2a7a <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2a5c:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2a60:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2a64:	9c 01       	movw	r18, r24
    2a66:	2e 5f       	subi	r18, 0xFE	; 254
    2a68:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6a:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <pxOverflowDelayedTaskList>
    2a6e:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <pxOverflowDelayedTaskList+0x1>
    2a72:	b9 01       	movw	r22, r18
    2a74:	0e 94 4a 02 	call	0x494	; 0x494 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2a78:	1d c0       	rjmp	.+58     	; 0x2ab4 <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2a7a:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
    2a7e:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    2a82:	9c 01       	movw	r18, r24
    2a84:	2e 5f       	subi	r18, 0xFE	; 254
    2a86:	3f 4f       	sbci	r19, 0xFF	; 255
    2a88:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    2a8c:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    2a90:	b9 01       	movw	r22, r18
    2a92:	0e 94 4a 02 	call	0x494	; 0x494 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    2a96:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <xNextTaskUnblockTime>
    2a9a:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <xNextTaskUnblockTime+0x1>
    2a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa2:	28 17       	cp	r18, r24
    2aa4:	39 07       	cpc	r19, r25
    2aa6:	30 f4       	brcc	.+12     	; 0x2ab4 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <xNextTaskUnblockTime+0x1>
    2ab0:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2ab4:	00 00       	nop
    2ab6:	27 96       	adiw	r28, 0x07	; 7
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	08 95       	ret

00002ac8 <main>:




int main(void)
 {
    2ac8:	ef 92       	push	r14
    2aca:	ff 92       	push	r15
    2acc:	0f 93       	push	r16
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <main+0xc>
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <main+0xe>
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <main+0x10>
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
	 // Initialize HW

	InitHW();
    2adc:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <InitHW>
	//xSemaphore = xSemaphoreCreateBinary();
	xSemaphore = xSemaphoreCreateMutex();
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <xQueueCreateMutex>
    2ae6:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <xSemaphore+0x1>
    2aea:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <xSemaphore>
	xSemaphoreGive(xSemaphore);
    2aee:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2af2:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	50 e0       	ldi	r21, 0x00	; 0
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	0e 94 0e 09 	call	0x121c	; 0x121c <xQueueGenericSend>
	
	//The taks handles are neccessary to change their priorities on runtime	
	TaskHandle_t t1,t2,t3;	

	  xTaskCreate
    2b04:	ce 01       	movw	r24, r28
    2b06:	01 96       	adiw	r24, 0x01	; 1
    2b08:	7c 01       	movw	r14, r24
    2b0a:	01 e0       	ldi	r16, 0x01	; 1
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	44 ec       	ldi	r20, 0xC4	; 196
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	66 e1       	ldi	r22, 0x16	; 22
    2b16:	71 e0       	ldi	r23, 0x01	; 1
    2b18:	8b ed       	ldi	r24, 0xDB	; 219
    2b1a:	95 e1       	ldi	r25, 0x15	; 21
    2b1c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <xTaskCreate>
	  (	 T1_func,	 (char*)"T1",	 configMINIMAL_STACK_SIZE,	 NULL,	 min_TASK_PRIORITY,&t1);
	  
	  xTaskCreate
    2b20:	ce 01       	movw	r24, r28
    2b22:	03 96       	adiw	r24, 0x03	; 3
    2b24:	7c 01       	movw	r14, r24
    2b26:	01 e0       	ldi	r16, 0x01	; 1
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	44 ec       	ldi	r20, 0xC4	; 196
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	69 e1       	ldi	r22, 0x19	; 25
    2b32:	71 e0       	ldi	r23, 0x01	; 1
    2b34:	86 e3       	ldi	r24, 0x36	; 54
    2b36:	96 e1       	ldi	r25, 0x16	; 22
    2b38:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <xTaskCreate>
	  (
	  T2_func, (char*)"T2", configMINIMAL_STACK_SIZE,        NULL,        min_TASK_PRIORITY,&t2);
	
	 xTaskCreate
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	05 96       	adiw	r24, 0x05	; 5
    2b40:	7c 01       	movw	r14, r24
    2b42:	01 e0       	ldi	r16, 0x01	; 1
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	44 ec       	ldi	r20, 0xC4	; 196
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	6c e1       	ldi	r22, 0x1C	; 28
    2b4e:	71 e0       	ldi	r23, 0x01	; 1
    2b50:	81 e9       	ldi	r24, 0x91	; 145
    2b52:	96 e1       	ldi	r25, 0x16	; 22
    2b54:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <xTaskCreate>
	  (
	  T3_func, (char*)"T3", configMINIMAL_STACK_SIZE,        NULL,        min_TASK_PRIORITY,&t3);

	xTaskCreate
    2b58:	e1 2c       	mov	r14, r1
    2b5a:	f1 2c       	mov	r15, r1
    2b5c:	04 e0       	ldi	r16, 0x04	; 4
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	44 ec       	ldi	r20, 0xC4	; 196
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	6f e1       	ldi	r22, 0x1F	; 31
    2b68:	71 e0       	ldi	r23, 0x01	; 1
    2b6a:	8c ee       	ldi	r24, 0xEC	; 236
    2b6c:	96 e1       	ldi	r25, 0x16	; 22
    2b6e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <xTaskCreate>
	(
	T4_func, (char*)"T4", configMINIMAL_STACK_SIZE,        NULL,        max_TASK_PRIORITY,NULL);

	  //array of task handles
	  tasklist[0]=t1;
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	9a 81       	ldd	r25, Y+2	; 0x02
    2b76:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <tasklist+0x1>
    2b7a:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <tasklist>
	  tasklist[1]=t2;
    2b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b80:	9c 81       	ldd	r25, Y+4	; 0x04
    2b82:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <tasklist+0x3>
    2b86:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <tasklist+0x2>
	  tasklist[2]=t3;
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8e:	90 93 b0 07 	sts	0x07B0, r25	; 0x8007b0 <tasklist+0x5>
    2b92:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <tasklist+0x4>
	  
	  vTaskStartScheduler();
    2b96:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vTaskStartScheduler>
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
	
 }
    2b9e:	26 96       	adiw	r28, 0x06	; 6
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	f8 94       	cli
    2ba4:	de bf       	out	0x3e, r29	; 62
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	0f 91       	pop	r16
    2bb0:	ff 90       	pop	r15
    2bb2:	ef 90       	pop	r14
    2bb4:	08 95       	ret

00002bb6 <T1_func>:
/******************************************************************************
 * Private function definitions.
 ******************************************************************************/

static void T1_func(void* pvParameters)
{
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	00 d0       	rcall	.+0      	; 0x2bbc <T1_func+0x6>
    2bbc:	00 d0       	rcall	.+0      	; 0x2bbe <T1_func+0x8>
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	9c 83       	std	Y+4, r25	; 0x04
    2bc4:	8b 83       	std	Y+3, r24	; 0x03
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
    2bc6:	61 e0       	ldi	r22, 0x01	; 1
    2bc8:	70 e0       	ldi	r23, 0x00	; 0
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime;
	xLastWakeTime = 0;
    2bd2:	1a 82       	std	Y+2, r1	; 0x02
    2bd4:	19 82       	std	Y+1, r1	; 0x01
	for ( ;; )
	{
		//first call to consumeCPU must indicate the task tag
		consumeCPU(1,40);
    2bd6:	68 e2       	ldi	r22, 0x28	; 40
    2bd8:	70 e0       	ldi	r23, 0x00	; 0
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	0e 94 87 1c 	call	0x390e	; 0x390e <consumeCPU>
		if( xSemaphore != NULL )
    2be0:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2be4:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2be8:	89 2b       	or	r24, r25
    2bea:	b1 f1       	breq	.+108    	; 0x2c58 <T1_func+0xa2>
		{
			my_trace(xTaskGetTickCount(),1,3,0);
    2bec:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	43 e0       	ldi	r20, 0x03	; 3
    2bf4:	61 e0       	ldi	r22, 0x01	; 1
    2bf6:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
			if( xSemaphoreTake( xSemaphore, portMAX_DELAY))
    2bfa:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2bfe:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	4f ef       	ldi	r20, 0xFF	; 255
    2c06:	5f ef       	ldi	r21, 0xFF	; 255
    2c08:	60 e0       	ldi	r22, 0x00	; 0
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	0e 94 bf 09 	call	0x137e	; 0x137e <xQueueGenericReceive>
    2c10:	88 23       	and	r24, r24
    2c12:	11 f1       	breq	.+68     	; 0x2c58 <T1_func+0xa2>
			{
				//trace_data: tick, tag, userdata=1 for taking the resource
				my_trace(xTaskGetTickCount(),1,1,0);
    2c14:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	41 e0       	ldi	r20, 0x01	; 1
    2c1c:	61 e0       	ldi	r22, 0x01	; 1
    2c1e:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
				//use tag 0 for the rest
				consumeCPU(0,computationTime[0] - 40);
    2c22:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <computationTime>
    2c26:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <computationTime+0x1>
    2c2a:	88 97       	sbiw	r24, 0x28	; 40
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	0e 94 87 1c 	call	0x390e	; 0x390e <consumeCPU>
				//userdata=2 when releasing the resource
				my_trace(xTaskGetTickCount(),1,2,0);
    2c34:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	42 e0       	ldi	r20, 0x02	; 2
    2c3c:	61 e0       	ldi	r22, 0x01	; 1
    2c3e:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
				xSemaphoreGive( xSemaphore );
    2c42:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2c46:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	60 e0       	ldi	r22, 0x00	; 0
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	0e 94 0e 09 	call	0x121c	; 0x121c <xQueueGenericSend>
			}
			//userdata=3 eagering for the resource
		}
		vTaskDelayUntil( &xLastWakeTime, taskPeriod[0] );
    2c58:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <taskPeriod>
    2c5c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <taskPeriod+0x1>
    2c60:	bc 01       	movw	r22, r24
    2c62:	ce 01       	movw	r24, r28
    2c64:	01 96       	adiw	r24, 0x01	; 1
    2c66:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <vTaskDelayUntil>
	}
    2c6a:	b5 cf       	rjmp	.-150    	; 0x2bd6 <T1_func+0x20>

00002c6c <T2_func>:
} 
static void T2_func(void* pvParameters)
{
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <T2_func+0x6>
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <T2_func+0x8>
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	9c 83       	std	Y+4, r25	; 0x04
    2c7a:	8b 83       	std	Y+3, r24	; 0x03
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
    2c7c:	62 e0       	ldi	r22, 0x02	; 2
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime;
	xLastWakeTime = 0;
    2c88:	1a 82       	std	Y+2, r1	; 0x02
    2c8a:	19 82       	std	Y+1, r1	; 0x01
	for ( ;; )
	{
		//first call to consumeCPU must indicate the task tag
		consumeCPU(1,20);
    2c8c:	64 e1       	ldi	r22, 0x14	; 20
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	0e 94 87 1c 	call	0x390e	; 0x390e <consumeCPU>
		if( xSemaphore != NULL )
    2c96:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2c9a:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2c9e:	89 2b       	or	r24, r25
    2ca0:	b1 f1       	breq	.+108    	; 0x2d0e <T2_func+0xa2>
		{
			my_trace(xTaskGetTickCount(),2,3,0);
    2ca2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	43 e0       	ldi	r20, 0x03	; 3
    2caa:	62 e0       	ldi	r22, 0x02	; 2
    2cac:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
			if( xSemaphoreTake( xSemaphore, portMAX_DELAY))
    2cb0:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2cb4:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	4f ef       	ldi	r20, 0xFF	; 255
    2cbc:	5f ef       	ldi	r21, 0xFF	; 255
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	70 e0       	ldi	r23, 0x00	; 0
    2cc2:	0e 94 bf 09 	call	0x137e	; 0x137e <xQueueGenericReceive>
    2cc6:	88 23       	and	r24, r24
    2cc8:	11 f1       	breq	.+68     	; 0x2d0e <T2_func+0xa2>
			{
				//trace_data: tick, tag, userdata=1 for taking the resource
				my_trace(xTaskGetTickCount(),2,1,0);
    2cca:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	41 e0       	ldi	r20, 0x01	; 1
    2cd2:	62 e0       	ldi	r22, 0x02	; 2
    2cd4:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
				//use tag 0 for the rest
				consumeCPU(0,computationTime[1] - 20);
    2cd8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <computationTime+0x2>
    2cdc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <computationTime+0x3>
    2ce0:	44 97       	sbiw	r24, 0x14	; 20
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	0e 94 87 1c 	call	0x390e	; 0x390e <consumeCPU>
				//userdata=2 when releasing the resource
				my_trace(xTaskGetTickCount(),2,2,0);
    2cea:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	42 e0       	ldi	r20, 0x02	; 2
    2cf2:	62 e0       	ldi	r22, 0x02	; 2
    2cf4:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
				xSemaphoreGive( xSemaphore );
    2cf8:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2cfc:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	50 e0       	ldi	r21, 0x00	; 0
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	0e 94 0e 09 	call	0x121c	; 0x121c <xQueueGenericSend>
			}
			//userdata=3 eagering for the resource
		}
		vTaskDelayUntil( &xLastWakeTime, taskPeriod[1] );
    2d0e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <taskPeriod+0x2>
    2d12:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <taskPeriod+0x3>
    2d16:	bc 01       	movw	r22, r24
    2d18:	ce 01       	movw	r24, r28
    2d1a:	01 96       	adiw	r24, 0x01	; 1
    2d1c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <vTaskDelayUntil>
	}
    2d20:	b5 cf       	rjmp	.-150    	; 0x2c8c <T2_func+0x20>

00002d22 <T3_func>:
}

static void T3_func(void* pvParameters)
{
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <T3_func+0x6>
    2d28:	00 d0       	rcall	.+0      	; 0x2d2a <T3_func+0x8>
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	9c 83       	std	Y+4, r25	; 0x04
    2d30:	8b 83       	std	Y+3, r24	; 0x03
	vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
    2d32:	63 e0       	ldi	r22, 0x03	; 3
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime;
	xLastWakeTime = 0;
    2d3e:	1a 82       	std	Y+2, r1	; 0x02
    2d40:	19 82       	std	Y+1, r1	; 0x01
	for ( ;; )
	{
		//first call to consumeCPU must indicate the task tag
		consumeCPU(1,30);
    2d42:	6e e1       	ldi	r22, 0x1E	; 30
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	0e 94 87 1c 	call	0x390e	; 0x390e <consumeCPU>
		if( xSemaphore != NULL )
    2d4c:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2d50:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2d54:	89 2b       	or	r24, r25
    2d56:	b1 f1       	breq	.+108    	; 0x2dc4 <T3_func+0xa2>
		{
			my_trace(xTaskGetTickCount(),3,3,0);
    2d58:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	43 e0       	ldi	r20, 0x03	; 3
    2d60:	63 e0       	ldi	r22, 0x03	; 3
    2d62:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
			if( xSemaphoreTake( xSemaphore, portMAX_DELAY))
    2d66:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2d6a:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	4f ef       	ldi	r20, 0xFF	; 255
    2d72:	5f ef       	ldi	r21, 0xFF	; 255
    2d74:	60 e0       	ldi	r22, 0x00	; 0
    2d76:	70 e0       	ldi	r23, 0x00	; 0
    2d78:	0e 94 bf 09 	call	0x137e	; 0x137e <xQueueGenericReceive>
    2d7c:	88 23       	and	r24, r24
    2d7e:	11 f1       	breq	.+68     	; 0x2dc4 <T3_func+0xa2>
			{
				//trace_data: tick, tag, userdata=1 for taking the resource
				my_trace(xTaskGetTickCount(),3,1,0);
    2d80:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	41 e0       	ldi	r20, 0x01	; 1
    2d88:	63 e0       	ldi	r22, 0x03	; 3
    2d8a:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
				//use tag 0 for the rest
				consumeCPU(0,computationTime[2] - 30);
    2d8e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <computationTime+0x4>
    2d92:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <computationTime+0x5>
    2d96:	4e 97       	sbiw	r24, 0x1e	; 30
    2d98:	bc 01       	movw	r22, r24
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	0e 94 87 1c 	call	0x390e	; 0x390e <consumeCPU>
				//userdata=2 when releasing the resource
				my_trace(xTaskGetTickCount(),3,2,0);
    2da0:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	42 e0       	ldi	r20, 0x02	; 2
    2da8:	63 e0       	ldi	r22, 0x03	; 3
    2daa:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
				xSemaphoreGive( xSemaphore );
    2dae:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xSemaphore>
    2db2:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xSemaphore+0x1>
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	40 e0       	ldi	r20, 0x00	; 0
    2dba:	50 e0       	ldi	r21, 0x00	; 0
    2dbc:	60 e0       	ldi	r22, 0x00	; 0
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	0e 94 0e 09 	call	0x121c	; 0x121c <xQueueGenericSend>
			}
			//userdata=3 eagering for the resource
		}
		vTaskDelayUntil( &xLastWakeTime, taskPeriod[2] );
    2dc4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <taskPeriod+0x4>
    2dc8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <taskPeriod+0x5>
    2dcc:	bc 01       	movw	r22, r24
    2dce:	ce 01       	movw	r24, r28
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <vTaskDelayUntil>
	}
    2dd6:	b5 cf       	rjmp	.-150    	; 0x2d42 <T3_func+0x20>

00002dd8 <T4_func>:
}

//////Tasks dealing with EDF. DO Not touch
//////Yep, it nos efficient, but it works for a few tasks.
static void T4_func(void* pvParameters)
{
    2dd8:	cf 92       	push	r12
    2dda:	df 92       	push	r13
    2ddc:	ef 92       	push	r14
    2dde:	ff 92       	push	r15
    2de0:	cf 93       	push	r28
    2de2:	df 93       	push	r29
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	6b 97       	sbiw	r28, 0x1b	; 27
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	9b 8f       	std	Y+27, r25	; 0x1b
    2df6:	8a 8f       	std	Y+26, r24	; 0x1a

	
	unsigned char temp_order;
	
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = 0;
    2df8:	18 8a       	std	Y+16, r1	; 0x10
    2dfa:	1f 86       	std	Y+15, r1	; 0x0f
	vTaskSetApplicationTaskTag( NULL, ( void * ) 4 );
    2dfc:	64 e0       	ldi	r22, 0x04	; 4
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vTaskSetApplicationTaskTag>

	for( ; ;)
	{
		now= xTaskGetTickCount();
    2e08:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    2e0c:	9e 83       	std	Y+6, r25	; 0x06
    2e0e:	8d 83       	std	Y+5, r24	; 0x05
		
		unsigned char pos=0;
    2e10:	1f 82       	std	Y+7, r1	; 0x07
		min=0xFFFF;
    2e12:	8f ef       	ldi	r24, 0xFF	; 255
    2e14:	9f ef       	ldi	r25, 0xFF	; 255
    2e16:	99 87       	std	Y+9, r25	; 0x09
    2e18:	88 87       	std	Y+8, r24	; 0x08
		//reset priorities and compute the current deadline for each task.
		for (unsigned char k=0;k<num_tasks;k++)
    2e1a:	19 82       	std	Y+1, r1	; 0x01
    2e1c:	66 c0       	rjmp	.+204    	; 0x2eea <T4_func+0x112>
		{
			
			vTaskPrioritySet(tasklist[k],min_TASK_PRIORITY);
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	88 0f       	add	r24, r24
    2e26:	99 1f       	adc	r25, r25
    2e28:	85 55       	subi	r24, 0x55	; 85
    2e2a:	98 4f       	sbci	r25, 0xF8	; 248
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	80 81       	ld	r24, Z
    2e30:	91 81       	ldd	r25, Z+1	; 0x01
    2e32:	61 e0       	ldi	r22, 0x01	; 1
    2e34:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <vTaskPrioritySet>
			t=(int)((double)now/(double)taskPeriod[k])+1;
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	cc 01       	movw	r24, r24
    2e3e:	a0 e0       	ldi	r26, 0x00	; 0
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	bc 01       	movw	r22, r24
    2e44:	cd 01       	movw	r24, r26
    2e46:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <__floatunsisf>
    2e4a:	6b 01       	movw	r12, r22
    2e4c:	7c 01       	movw	r14, r24
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	88 2f       	mov	r24, r24
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	8d 5f       	subi	r24, 0xFD	; 253
    2e5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	cc 01       	movw	r24, r24
    2e64:	a0 e0       	ldi	r26, 0x00	; 0
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <__floatunsisf>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	9c 01       	movw	r18, r24
    2e76:	ad 01       	movw	r20, r26
    2e78:	c7 01       	movw	r24, r14
    2e7a:	b6 01       	movw	r22, r12
    2e7c:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__divsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__fixsfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	01 96       	adiw	r24, 0x01	; 1
    2e92:	9e 87       	std	Y+14, r25	; 0x0e
    2e94:	8d 87       	std	Y+13, r24	; 0x0d
			aux[k]=(t*taskPeriod[k])-now;
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	88 2f       	mov	r24, r24
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	29 81       	ldd	r18, Y+1	; 0x01
    2e9e:	22 2f       	mov	r18, r18
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	22 0f       	add	r18, r18
    2ea4:	33 1f       	adc	r19, r19
    2ea6:	2d 5f       	subi	r18, 0xFD	; 253
    2ea8:	3e 4f       	sbci	r19, 0xFE	; 254
    2eaa:	f9 01       	movw	r30, r18
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2eb2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2eb4:	62 9f       	mul	r22, r18
    2eb6:	a0 01       	movw	r20, r0
    2eb8:	63 9f       	mul	r22, r19
    2eba:	50 0d       	add	r21, r0
    2ebc:	72 9f       	mul	r23, r18
    2ebe:	50 0d       	add	r21, r0
    2ec0:	11 24       	eor	r1, r1
    2ec2:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec4:	3e 81       	ldd	r19, Y+6	; 0x06
    2ec6:	ba 01       	movw	r22, r20
    2ec8:	62 1b       	sub	r22, r18
    2eca:	73 0b       	sbc	r23, r19
    2ecc:	9b 01       	movw	r18, r22
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	ae 01       	movw	r20, r28
    2ed4:	4f 5f       	subi	r20, 0xFF	; 255
    2ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed8:	84 0f       	add	r24, r20
    2eda:	95 1f       	adc	r25, r21
    2edc:	40 96       	adiw	r24, 0x10	; 16
    2ede:	fc 01       	movw	r30, r24
    2ee0:	31 83       	std	Z+1, r19	; 0x01
    2ee2:	20 83       	st	Z, r18
		now= xTaskGetTickCount();
		
		unsigned char pos=0;
		min=0xFFFF;
		//reset priorities and compute the current deadline for each task.
		for (unsigned char k=0;k<num_tasks;k++)
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	8f 5f       	subi	r24, 0xFF	; 255
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    2eee:	99 81       	ldd	r25, Y+1	; 0x01
    2ef0:	98 17       	cp	r25, r24
    2ef2:	08 f4       	brcc	.+2      	; 0x2ef6 <T4_func+0x11e>
    2ef4:	94 cf       	rjmp	.-216    	; 0x2e1e <T4_func+0x46>
			t=(int)((double)now/(double)taskPeriod[k])+1;
			aux[k]=(t*taskPeriod[k])-now;
		}
		
		//sorting deadlines
		unsigned char order[3]={0,1,2};
    2ef6:	1f 8a       	std	Y+23, r1	; 0x17
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	88 8f       	std	Y+24, r24	; 0x18
    2efc:	82 e0       	ldi	r24, 0x02	; 2
    2efe:	89 8f       	std	Y+25, r24	; 0x19
		for (unsigned char i=0;i<num_tasks-1;i++)
    2f00:	1a 82       	std	Y+2, r1	; 0x02
    2f02:	a9 c0       	rjmp	.+338    	; 0x3056 <T4_func+0x27e>
		{
			for (unsigned char j=0;j<num_tasks-1-i;j++)
    2f04:	1b 82       	std	Y+3, r1	; 0x03
    2f06:	8f c0       	rjmp	.+286    	; 0x3026 <T4_func+0x24e>
			{
				if (aux[j]>aux[j+1])
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	88 2f       	mov	r24, r24
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	88 0f       	add	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	9e 01       	movw	r18, r28
    2f14:	2f 5f       	subi	r18, 0xFF	; 255
    2f16:	3f 4f       	sbci	r19, 0xFF	; 255
    2f18:	82 0f       	add	r24, r18
    2f1a:	93 1f       	adc	r25, r19
    2f1c:	40 96       	adiw	r24, 0x10	; 16
    2f1e:	fc 01       	movw	r30, r24
    2f20:	20 81       	ld	r18, Z
    2f22:	31 81       	ldd	r19, Z+1	; 0x01
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	88 2f       	mov	r24, r24
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	01 96       	adiw	r24, 0x01	; 1
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	ae 01       	movw	r20, r28
    2f32:	4f 5f       	subi	r20, 0xFF	; 255
    2f34:	5f 4f       	sbci	r21, 0xFF	; 255
    2f36:	84 0f       	add	r24, r20
    2f38:	95 1f       	adc	r25, r21
    2f3a:	40 96       	adiw	r24, 0x10	; 16
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	82 17       	cp	r24, r18
    2f44:	93 07       	cpc	r25, r19
    2f46:	08 f0       	brcs	.+2      	; 0x2f4a <T4_func+0x172>
    2f48:	6b c0       	rjmp	.+214    	; 0x3020 <T4_func+0x248>
				{
					temp=aux[j+1];
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4c:	88 2f       	mov	r24, r24
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	88 0f       	add	r24, r24
    2f54:	99 1f       	adc	r25, r25
    2f56:	9e 01       	movw	r18, r28
    2f58:	2f 5f       	subi	r18, 0xFF	; 255
    2f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5c:	82 0f       	add	r24, r18
    2f5e:	93 1f       	adc	r25, r19
    2f60:	40 96       	adiw	r24, 0x10	; 16
    2f62:	fc 01       	movw	r30, r24
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	9b 87       	std	Y+11, r25	; 0x0b
    2f6a:	8a 87       	std	Y+10, r24	; 0x0a
					aux[j+1]=aux[j];
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	88 2f       	mov	r24, r24
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	2b 81       	ldd	r18, Y+3	; 0x03
    2f76:	22 2f       	mov	r18, r18
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	22 0f       	add	r18, r18
    2f7c:	33 1f       	adc	r19, r19
    2f7e:	ae 01       	movw	r20, r28
    2f80:	4f 5f       	subi	r20, 0xFF	; 255
    2f82:	5f 4f       	sbci	r21, 0xFF	; 255
    2f84:	24 0f       	add	r18, r20
    2f86:	35 1f       	adc	r19, r21
    2f88:	20 5f       	subi	r18, 0xF0	; 240
    2f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8c:	f9 01       	movw	r30, r18
    2f8e:	20 81       	ld	r18, Z
    2f90:	31 81       	ldd	r19, Z+1	; 0x01
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	ae 01       	movw	r20, r28
    2f98:	4f 5f       	subi	r20, 0xFF	; 255
    2f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f9c:	84 0f       	add	r24, r20
    2f9e:	95 1f       	adc	r25, r21
    2fa0:	40 96       	adiw	r24, 0x10	; 16
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	31 83       	std	Z+1, r19	; 0x01
    2fa6:	20 83       	st	Z, r18
					aux[j]=temp;
    2fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2faa:	88 2f       	mov	r24, r24
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	88 0f       	add	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	9e 01       	movw	r18, r28
    2fb4:	2f 5f       	subi	r18, 0xFF	; 255
    2fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb8:	82 0f       	add	r24, r18
    2fba:	93 1f       	adc	r25, r19
    2fbc:	40 96       	adiw	r24, 0x10	; 16
    2fbe:	2a 85       	ldd	r18, Y+10	; 0x0a
    2fc0:	3b 85       	ldd	r19, Y+11	; 0x0b
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	31 83       	std	Z+1, r19	; 0x01
    2fc6:	20 83       	st	Z, r18
					
					temp_order=order[j+1];
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	88 2f       	mov	r24, r24
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	01 96       	adiw	r24, 0x01	; 1
    2fd0:	9e 01       	movw	r18, r28
    2fd2:	29 5e       	subi	r18, 0xE9	; 233
    2fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd6:	82 0f       	add	r24, r18
    2fd8:	93 1f       	adc	r25, r19
    2fda:	fc 01       	movw	r30, r24
    2fdc:	80 81       	ld	r24, Z
    2fde:	8c 87       	std	Y+12, r24	; 0x0c
					order[j+1]=order[j];
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	88 2f       	mov	r24, r24
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	01 96       	adiw	r24, 0x01	; 1
    2fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    2fea:	22 2f       	mov	r18, r18
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	ae 01       	movw	r20, r28
    2ff0:	49 5e       	subi	r20, 0xE9	; 233
    2ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff4:	24 0f       	add	r18, r20
    2ff6:	35 1f       	adc	r19, r21
    2ff8:	f9 01       	movw	r30, r18
    2ffa:	40 81       	ld	r20, Z
    2ffc:	9e 01       	movw	r18, r28
    2ffe:	29 5e       	subi	r18, 0xE9	; 233
    3000:	3f 4f       	sbci	r19, 0xFF	; 255
    3002:	82 0f       	add	r24, r18
    3004:	93 1f       	adc	r25, r19
    3006:	fc 01       	movw	r30, r24
    3008:	40 83       	st	Z, r20
					order[j]=temp_order;
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	88 2f       	mov	r24, r24
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9e 01       	movw	r18, r28
    3012:	29 5e       	subi	r18, 0xE9	; 233
    3014:	3f 4f       	sbci	r19, 0xFF	; 255
    3016:	82 0f       	add	r24, r18
    3018:	93 1f       	adc	r25, r19
    301a:	2c 85       	ldd	r18, Y+12	; 0x0c
    301c:	fc 01       	movw	r30, r24
    301e:	20 83       	st	Z, r18
		
		//sorting deadlines
		unsigned char order[3]={0,1,2};
		for (unsigned char i=0;i<num_tasks-1;i++)
		{
			for (unsigned char j=0;j<num_tasks-1-i;j++)
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	8f 5f       	subi	r24, 0xFF	; 255
    3024:	8b 83       	std	Y+3, r24	; 0x03
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	28 2f       	mov	r18, r24
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    3030:	88 2f       	mov	r24, r24
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	ac 01       	movw	r20, r24
    3036:	41 50       	subi	r20, 0x01	; 1
    3038:	51 09       	sbc	r21, r1
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	88 2f       	mov	r24, r24
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	ba 01       	movw	r22, r20
    3042:	68 1b       	sub	r22, r24
    3044:	79 0b       	sbc	r23, r25
    3046:	cb 01       	movw	r24, r22
    3048:	28 17       	cp	r18, r24
    304a:	39 07       	cpc	r19, r25
    304c:	0c f4       	brge	.+2      	; 0x3050 <T4_func+0x278>
    304e:	5c cf       	rjmp	.-328    	; 0x2f08 <T4_func+0x130>
			aux[k]=(t*taskPeriod[k])-now;
		}
		
		//sorting deadlines
		unsigned char order[3]={0,1,2};
		for (unsigned char i=0;i<num_tasks-1;i++)
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	8f 5f       	subi	r24, 0xFF	; 255
    3054:	8a 83       	std	Y+2, r24	; 0x02
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    3060:	88 2f       	mov	r24, r24
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	28 17       	cp	r18, r24
    3068:	39 07       	cpc	r19, r25
    306a:	0c f4       	brge	.+2      	; 0x306e <T4_func+0x296>
    306c:	4b cf       	rjmp	.-362    	; 0x2f04 <T4_func+0x12c>
			}
		}
		
		//assigining priorities in the same order...
		
		for (unsigned char k=0;k<num_tasks;k++)
    306e:	1c 82       	std	Y+4, r1	; 0x04
    3070:	1d c0       	rjmp	.+58     	; 0x30ac <T4_func+0x2d4>
		{
			
			vTaskPrioritySet(tasklist[order[k]],max_TASK_PRIORITY-k-1);
    3072:	93 e0       	ldi	r25, 0x03	; 3
    3074:	8c 81       	ldd	r24, Y+4	; 0x04
    3076:	49 2f       	mov	r20, r25
    3078:	48 1b       	sub	r20, r24
    307a:	8c 81       	ldd	r24, Y+4	; 0x04
    307c:	88 2f       	mov	r24, r24
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9e 01       	movw	r18, r28
    3082:	29 5e       	subi	r18, 0xE9	; 233
    3084:	3f 4f       	sbci	r19, 0xFF	; 255
    3086:	82 0f       	add	r24, r18
    3088:	93 1f       	adc	r25, r19
    308a:	fc 01       	movw	r30, r24
    308c:	80 81       	ld	r24, Z
    308e:	88 2f       	mov	r24, r24
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	88 0f       	add	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	85 55       	subi	r24, 0x55	; 85
    3098:	98 4f       	sbci	r25, 0xF8	; 248
    309a:	fc 01       	movw	r30, r24
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	64 2f       	mov	r22, r20
    30a2:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <vTaskPrioritySet>
			}
		}
		
		//assigining priorities in the same order...
		
		for (unsigned char k=0;k<num_tasks;k++)
    30a6:	8c 81       	ldd	r24, Y+4	; 0x04
    30a8:	8f 5f       	subi	r24, 0xFF	; 255
    30aa:	8c 83       	std	Y+4, r24	; 0x04
    30ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    30b0:	9c 81       	ldd	r25, Y+4	; 0x04
    30b2:	98 17       	cp	r25, r24
    30b4:	f0 f2       	brcs	.-68     	; 0x3072 <T4_func+0x29a>
			
			vTaskPrioritySet(tasklist[order[k]],max_TASK_PRIORITY-k-1);
			
		}
		
		vTaskDelayUntil( &xLastWakeTime, edfPeriod);
    30b6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <edfPeriod>
    30ba:	28 2f       	mov	r18, r24
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	ce 01       	movw	r24, r28
    30c0:	0f 96       	adiw	r24, 0x0f	; 15
    30c2:	b9 01       	movw	r22, r18
    30c4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <vTaskDelayUntil>
	}//for;;
    30c8:	9f ce       	rjmp	.-706    	; 0x2e08 <T4_func+0x30>

000030ca <__vector_18>:
		rs232bufferstate=RS232_RS_PAUSE;
		if (inpcp!=NULL) memcpy(inpcp,(const void *)&rs232inputreport,sizeof(RS232InputReport));
		// enable again ISR work
		RS232_PrepareToRead();
	}
}
    30ca:	1f 92       	push	r1
    30cc:	0f 92       	push	r0
    30ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    30d2:	0f 92       	push	r0
    30d4:	11 24       	eor	r1, r1
    30d6:	2f 93       	push	r18
    30d8:	3f 93       	push	r19
    30da:	8f 93       	push	r24
    30dc:	9f 93       	push	r25
    30de:	ef 93       	push	r30
    30e0:	ff 93       	push	r31
    30e2:	cf 93       	push	r28
    30e4:	df 93       	push	r29
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
    30ea:	80 ec       	ldi	r24, 0xC0	; 192
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	fc 01       	movw	r30, r24
    30f0:	80 81       	ld	r24, Z
    30f2:	8c 71       	andi	r24, 0x1C	; 28
    30f4:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <rs232inputreport+0x2>
    30f8:	86 ec       	ldi	r24, 0xC6	; 198
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	fc 01       	movw	r30, r24
    30fe:	80 81       	ld	r24, Z
    3100:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <rs232inputreport+0x3>
    3104:	81 ec       	ldi	r24, 0xC1	; 193
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	21 ec       	ldi	r18, 0xC1	; 193
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	f9 01       	movw	r30, r18
    310e:	20 81       	ld	r18, Z
    3110:	2f 77       	andi	r18, 0x7F	; 127
    3112:	fc 01       	movw	r30, r24
    3114:	20 83       	st	Z, r18
    3116:	78 94       	sei
    3118:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rs232bufferstate>
    311c:	88 2f       	mov	r24, r24
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	81 30       	cpi	r24, 0x01	; 1
    3122:	91 05       	cpc	r25, r1
    3124:	61 f1       	breq	.+88     	; 0x317e <__vector_18+0xb4>
    3126:	82 30       	cpi	r24, 0x02	; 2
    3128:	91 05       	cpc	r25, r1
    312a:	e1 f1       	breq	.+120    	; 0x31a4 <__vector_18+0xda>
    312c:	89 2b       	or	r24, r25
    312e:	09 f0       	breq	.+2      	; 0x3132 <__vector_18+0x68>
    3130:	40 c0       	rjmp	.+128    	; 0x31b2 <__vector_18+0xe8>
    3132:	20 91 9e 07 	lds	r18, 0x079E	; 0x80079e <rs232buffer>
    3136:	30 91 9f 07 	lds	r19, 0x079F	; 0x80079f <rs232buffer+0x1>
    313a:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <rs232bufferpos>
    313e:	91 e0       	ldi	r25, 0x01	; 1
    3140:	98 0f       	add	r25, r24
    3142:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <rs232bufferpos>
    3146:	88 2f       	mov	r24, r24
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	82 0f       	add	r24, r18
    314c:	93 1f       	adc	r25, r19
    314e:	20 91 a6 07 	lds	r18, 0x07A6	; 0x8007a6 <rs232inputreport+0x3>
    3152:	fc 01       	movw	r30, r24
    3154:	20 83       	st	Z, r18
    3156:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <rs232inputreport+0x3>
    315a:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <rs232endchar>
    315e:	98 17       	cp	r25, r24
    3160:	21 f4       	brne	.+8      	; 0x316a <__vector_18+0xa0>
    3162:	82 e0       	ldi	r24, 0x02	; 2
    3164:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rs232bufferstate>
    3168:	21 c0       	rjmp	.+66     	; 0x31ac <__vector_18+0xe2>
    316a:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <rs232bufferpos>
    316e:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <rs232buffersize>
    3172:	98 17       	cp	r25, r24
    3174:	d9 f4       	brne	.+54     	; 0x31ac <__vector_18+0xe2>
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rs232bufferstate>
    317c:	17 c0       	rjmp	.+46     	; 0x31ac <__vector_18+0xe2>
    317e:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <rs232inputreport>
    3182:	90 91 a4 07 	lds	r25, 0x07A4	; 0x8007a4 <rs232inputreport+0x1>
    3186:	01 96       	adiw	r24, 0x01	; 1
    3188:	90 93 a4 07 	sts	0x07A4, r25	; 0x8007a4 <rs232inputreport+0x1>
    318c:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <rs232inputreport>
    3190:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <rs232inputreport+0x3>
    3194:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <rs232endchar>
    3198:	98 17       	cp	r25, r24
    319a:	51 f4       	brne	.+20     	; 0x31b0 <__vector_18+0xe6>
    319c:	82 e0       	ldi	r24, 0x02	; 2
    319e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rs232bufferstate>
    31a2:	06 c0       	rjmp	.+12     	; 0x31b0 <__vector_18+0xe6>
    31a4:	83 e0       	ldi	r24, 0x03	; 3
    31a6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rs232bufferstate>
    31aa:	03 c0       	rjmp	.+6      	; 0x31b2 <__vector_18+0xe8>
    31ac:	00 00       	nop
    31ae:	01 c0       	rjmp	.+2      	; 0x31b2 <__vector_18+0xe8>
    31b0:	00 00       	nop
    31b2:	f8 94       	cli
    31b4:	81 ec       	ldi	r24, 0xC1	; 193
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	21 ec       	ldi	r18, 0xC1	; 193
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	f9 01       	movw	r30, r18
    31be:	20 81       	ld	r18, Z
    31c0:	20 68       	ori	r18, 0x80	; 128
    31c2:	fc 01       	movw	r30, r24
    31c4:	20 83       	st	Z, r18
    31c6:	00 00       	nop
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	ff 91       	pop	r31
    31ce:	ef 91       	pop	r30
    31d0:	9f 91       	pop	r25
    31d2:	8f 91       	pop	r24
    31d4:	3f 91       	pop	r19
    31d6:	2f 91       	pop	r18
    31d8:	0f 90       	pop	r0
    31da:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    31de:	0f 90       	pop	r0
    31e0:	1f 90       	pop	r1
    31e2:	18 95       	reti

000031e4 <RS232_PrepareToRead>:
    31e4:	cf 93       	push	r28
    31e6:	df 93       	push	r29
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	84 e0       	ldi	r24, 0x04	; 4
    31ee:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rs232bufferstate>
    31f2:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <rs232buffer>
    31f6:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <rs232buffer+0x1>
    31fa:	89 2b       	or	r24, r25
    31fc:	61 f0       	breq	.+24     	; 0x3216 <RS232_PrepareToRead+0x32>
    31fe:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <rs232bufferpos>
    3202:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <rs232inputreport+0x1>
    3206:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <rs232inputreport>
    320a:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <rs232inputreport+0x2>
    320e:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <rs232inputreport+0x3>
    3212:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rs232bufferstate>
    3216:	00 00       	nop
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	08 95       	ret

0000321e <RS232_Init>:
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	00 d0       	rcall	.+0      	; 0x3224 <RS232_Init+0x6>
    3224:	00 d0       	rcall	.+0      	; 0x3226 <RS232_Init+0x8>
    3226:	1f 92       	push	r1
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	9b 83       	std	Y+3, r25	; 0x03
    322e:	8a 83       	std	Y+2, r24	; 0x02
    3230:	6c 83       	std	Y+4, r22	; 0x04
    3232:	4d 83       	std	Y+5, r20	; 0x05
    3234:	8f e5       	ldi	r24, 0x5F	; 95
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	fc 01       	movw	r30, r24
    323a:	80 81       	ld	r24, Z
    323c:	80 78       	andi	r24, 0x80	; 128
    323e:	89 83       	std	Y+1, r24	; 0x01
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	88 23       	and	r24, r24
    3244:	09 f0       	breq	.+2      	; 0x3248 <RS232_Init+0x2a>
    3246:	f8 94       	cli
    3248:	85 ec       	ldi	r24, 0xC5	; 197
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	fc 01       	movw	r30, r24
    324e:	10 82       	st	Z, r1
    3250:	84 ec       	ldi	r24, 0xC4	; 196
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	29 e1       	ldi	r18, 0x19	; 25
    3256:	fc 01       	movw	r30, r24
    3258:	20 83       	st	Z, r18
    325a:	80 ec       	ldi	r24, 0xC0	; 192
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	20 ec       	ldi	r18, 0xC0	; 192
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	f9 01       	movw	r30, r18
    3264:	20 81       	ld	r18, Z
    3266:	2c 7f       	andi	r18, 0xFC	; 252
    3268:	fc 01       	movw	r30, r24
    326a:	20 83       	st	Z, r18
    326c:	81 ec       	ldi	r24, 0xC1	; 193
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	28 e9       	ldi	r18, 0x98	; 152
    3272:	fc 01       	movw	r30, r24
    3274:	20 83       	st	Z, r18
    3276:	82 ec       	ldi	r24, 0xC2	; 194
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	26 e0       	ldi	r18, 0x06	; 6
    327c:	fc 01       	movw	r30, r24
    327e:	20 83       	st	Z, r18
    3280:	09 c0       	rjmp	.+18     	; 0x3294 <RS232_Init+0x76>
    3282:	1f 93       	push	r17
    3284:	ef 93       	push	r30
    3286:	ff 93       	push	r31
    3288:	e6 ec       	ldi	r30, 0xC6	; 198
    328a:	ff 27       	eor	r31, r31
    328c:	10 81       	ld	r17, Z
    328e:	ff 91       	pop	r31
    3290:	ef 91       	pop	r30
    3292:	1f 91       	pop	r17
    3294:	80 ec       	ldi	r24, 0xC0	; 192
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	fc 01       	movw	r30, r24
    329a:	80 81       	ld	r24, Z
    329c:	88 23       	and	r24, r24
    329e:	8c f3       	brlt	.-30     	; 0x3282 <RS232_Init+0x64>
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	9b 81       	ldd	r25, Y+3	; 0x03
    32a4:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <rs232buffer+0x1>
    32a8:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <rs232buffer>
    32ac:	8c 81       	ldd	r24, Y+4	; 0x04
    32ae:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <rs232buffersize>
    32b2:	8d 81       	ldd	r24, Y+5	; 0x05
    32b4:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <rs232endchar>
    32b8:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <RS232_PrepareToRead>
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	88 23       	and	r24, r24
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <RS232_Init+0xa6>
    32c2:	78 94       	sei
    32c4:	00 00       	nop
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	08 95       	ret

000032d6 <RS232_Send>:

void RS232_Send(const char *c, unsigned char endchar)
// Send command in C and return after the whole transmission
{
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	00 d0       	rcall	.+0      	; 0x32dc <RS232_Send+0x6>
    32dc:	00 d0       	rcall	.+0      	; 0x32de <RS232_Send+0x8>
    32de:	1f 92       	push	r1
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	9c 83       	std	Y+4, r25	; 0x04
    32e6:	8b 83       	std	Y+3, r24	; 0x03
    32e8:	6d 83       	std	Y+5, r22	; 0x05
	if (c==NULL) return;
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	89 2b       	or	r24, r25
    32f0:	d9 f1       	breq	.+118    	; 0x3368 <RS232_Send+0x92>
	// send command
	unsigned f=0;
    32f2:	1a 82       	std	Y+2, r1	; 0x02
    32f4:	19 82       	std	Y+1, r1	; 0x01
	while (c[f]!=endchar)
    32f6:	1c c0       	rjmp	.+56     	; 0x3330 <RS232_Send+0x5a>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
    32f8:	00 00       	nop
    32fa:	80 ec       	ldi	r24, 0xC0	; 192
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	fc 01       	movw	r30, r24
    3300:	80 81       	ld	r24, Z
    3302:	88 2f       	mov	r24, r24
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	80 72       	andi	r24, 0x20	; 32
    3308:	99 27       	eor	r25, r25
    330a:	89 2b       	or	r24, r25
    330c:	b1 f3       	breq	.-20     	; 0x32fa <RS232_Send+0x24>
		UDR0=c[f++];
    330e:	26 ec       	ldi	r18, 0xC6	; 198
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	9a 81       	ldd	r25, Y+2	; 0x02
    3316:	ac 01       	movw	r20, r24
    3318:	4f 5f       	subi	r20, 0xFF	; 255
    331a:	5f 4f       	sbci	r21, 0xFF	; 255
    331c:	5a 83       	std	Y+2, r21	; 0x02
    331e:	49 83       	std	Y+1, r20	; 0x01
    3320:	4b 81       	ldd	r20, Y+3	; 0x03
    3322:	5c 81       	ldd	r21, Y+4	; 0x04
    3324:	84 0f       	add	r24, r20
    3326:	95 1f       	adc	r25, r21
    3328:	fc 01       	movw	r30, r24
    332a:	80 81       	ld	r24, Z
    332c:	f9 01       	movw	r30, r18
    332e:	80 83       	st	Z, r24
// Send command in C and return after the whole transmission
{
	if (c==NULL) return;
	// send command
	unsigned f=0;
	while (c[f]!=endchar)
    3330:	2b 81       	ldd	r18, Y+3	; 0x03
    3332:	3c 81       	ldd	r19, Y+4	; 0x04
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	9a 81       	ldd	r25, Y+2	; 0x02
    3338:	82 0f       	add	r24, r18
    333a:	93 1f       	adc	r25, r19
    333c:	fc 01       	movw	r30, r24
    333e:	90 81       	ld	r25, Z
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	98 17       	cp	r25, r24
    3344:	c9 f6       	brne	.-78     	; 0x32f8 <RS232_Send+0x22>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0=c[f++];
	}
	while ( !( UCSR0A & (1<<UDRE0)) );
    3346:	00 00       	nop
    3348:	80 ec       	ldi	r24, 0xC0	; 192
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	fc 01       	movw	r30, r24
    334e:	80 81       	ld	r24, Z
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	80 72       	andi	r24, 0x20	; 32
    3356:	99 27       	eor	r25, r25
    3358:	89 2b       	or	r24, r25
    335a:	b1 f3       	breq	.-20     	; 0x3348 <RS232_Send+0x72>
	UDR0=endchar;
    335c:	86 ec       	ldi	r24, 0xC6	; 198
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	2d 81       	ldd	r18, Y+5	; 0x05
    3362:	fc 01       	movw	r30, r24
    3364:	20 83       	st	Z, r18
    3366:	01 c0       	rjmp	.+2      	; 0x336a <RS232_Send+0x94>
}

void RS232_Send(const char *c, unsigned char endchar)
// Send command in C and return after the whole transmission
{
	if (c==NULL) return;
    3368:	00 00       	nop
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0=c[f++];
	}
	while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0=endchar;
}
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	08 95       	ret

0000337a <SRAMinitiate>:
					   // no real data is being transmitted.
			SRAMREAD(resp[f]);
		}
	}
	SRAMDISABLE;
}
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	84 e2       	ldi	r24, 0x24	; 36
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	24 e2       	ldi	r18, 0x24	; 36
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	f9 01       	movw	r30, r18
    338c:	20 81       	ld	r18, Z
    338e:	2f 7e       	andi	r18, 0xEF	; 239
    3390:	fc 01       	movw	r30, r24
    3392:	20 83       	st	Z, r18
    3394:	84 e2       	ldi	r24, 0x24	; 36
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	24 e2       	ldi	r18, 0x24	; 36
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	f9 01       	movw	r30, r18
    339e:	20 81       	ld	r18, Z
    33a0:	28 62       	ori	r18, 0x28	; 40
    33a2:	fc 01       	movw	r30, r24
    33a4:	20 83       	st	Z, r18
    33a6:	8a e2       	ldi	r24, 0x2A	; 42
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	2a e2       	ldi	r18, 0x2A	; 42
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	f9 01       	movw	r30, r18
    33b0:	20 81       	ld	r18, Z
    33b2:	28 60       	ori	r18, 0x08	; 8
    33b4:	fc 01       	movw	r30, r24
    33b6:	20 83       	st	Z, r18
    33b8:	84 e2       	ldi	r24, 0x24	; 36
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	24 e2       	ldi	r18, 0x24	; 36
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	f9 01       	movw	r30, r18
    33c2:	20 81       	ld	r18, Z
    33c4:	24 60       	ori	r18, 0x04	; 4
    33c6:	fc 01       	movw	r30, r24
    33c8:	20 83       	st	Z, r18
    33ca:	8b e2       	ldi	r24, 0x2B	; 43
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	2b e2       	ldi	r18, 0x2B	; 43
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	f9 01       	movw	r30, r18
    33d4:	20 81       	ld	r18, Z
    33d6:	28 60       	ori	r18, 0x08	; 8
    33d8:	fc 01       	movw	r30, r24
    33da:	20 83       	st	Z, r18
    33dc:	8c e4       	ldi	r24, 0x4C	; 76
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	2c e5       	ldi	r18, 0x5C	; 92
    33e2:	fc 01       	movw	r30, r24
    33e4:	20 83       	st	Z, r18
    33e6:	8d e4       	ldi	r24, 0x4D	; 77
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	2d e4       	ldi	r18, 0x4D	; 77
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	f9 01       	movw	r30, r18
    33f0:	20 81       	ld	r18, Z
    33f2:	21 60       	ori	r18, 0x01	; 1
    33f4:	fc 01       	movw	r30, r24
    33f6:	20 83       	st	Z, r18
    33f8:	00 00       	nop
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	08 95       	ret

00003400 <SRAMwriteblock>:

void SRAMwriteblock(unsigned address, const unsigned char *block,
					unsigned length)
// Write from ADDRESS up, LENGTH bytes taken from BLOCK
{
    3400:	af 92       	push	r10
    3402:	bf 92       	push	r11
    3404:	cf 92       	push	r12
    3406:	df 92       	push	r13
    3408:	ef 92       	push	r14
    340a:	ff 92       	push	r15
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	00 d0       	rcall	.+0      	; 0x3412 <SRAMwriteblock+0x12>
    3412:	00 d0       	rcall	.+0      	; 0x3414 <SRAMwriteblock+0x14>
    3414:	00 d0       	rcall	.+0      	; 0x3416 <SRAMwriteblock+0x16>
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	9a 83       	std	Y+2, r25	; 0x02
    341c:	89 83       	std	Y+1, r24	; 0x01
    341e:	7c 83       	std	Y+4, r23	; 0x04
    3420:	6b 83       	std	Y+3, r22	; 0x03
    3422:	5e 83       	std	Y+6, r21	; 0x06
    3424:	4d 83       	std	Y+5, r20	; 0x05
		"pop r28"		" \n\t"
		"pop r31"		" \n\t"
		"pop r30"		" \n\t"
		"pop r18"		" \n\t"
		::[_wrinstr] "M" (SRAMINSTR_WR),
		  [_lengthlow] "l" ((unsigned char)(length & 0xff)),
    3426:	2d 81       	ldd	r18, Y+5	; 0x05
		  [_lengthhigh] "l" ((unsigned char)(length >> 8)),
    3428:	8d 81       	ldd	r24, Y+5	; 0x05
    342a:	9e 81       	ldd	r25, Y+6	; 0x06
    342c:	89 2f       	mov	r24, r25
    342e:	99 27       	eor	r25, r25
    3430:	48 2f       	mov	r20, r24
		  [_addresslow] "l" ((unsigned char)(address & 0xff)),
    3432:	39 81       	ldd	r19, Y+1	; 0x01
		  [_addresshigh] "l" ((unsigned char)(address >> 8)),
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	9a 81       	ldd	r25, Y+2	; 0x02
    3438:	89 2f       	mov	r24, r25
    343a:	99 27       	eor	r25, r25
    343c:	58 2f       	mov	r21, r24
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	9c 81       	ldd	r25, Y+4	; 0x04
    3442:	68 2f       	mov	r22, r24
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
    3444:	8b 81       	ldd	r24, Y+3	; 0x03
    3446:	9c 81       	ldd	r25, Y+4	; 0x04
    3448:	89 2f       	mov	r24, r25
    344a:	99 27       	eor	r25, r25
	//
	// We assume a communication speed of 8MHz. That means that
	// transmitting a byte to the external sram takes 1microsec = 16 nops
	// The \n\t sequences are completely necessary; otherwise, the next
	// instruction will not be assembled.
	__asm__ __volatile__ (
    344c:	a2 2e       	mov	r10, r18
    344e:	b4 2e       	mov	r11, r20
    3450:	c3 2e       	mov	r12, r19
    3452:	d5 2e       	mov	r13, r21
    3454:	e6 2e       	mov	r14, r22
    3456:	f8 2e       	mov	r15, r24
    3458:	2f 93       	push	r18
    345a:	ef 93       	push	r30
    345c:	ff 93       	push	r31
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	af 93       	push	r26
    3464:	bf 93       	push	r27
    3466:	aa 2d       	mov	r26, r10
    3468:	bb 2d       	mov	r27, r11
    346a:	0b 2e       	mov	r0, r27
    346c:	0a 2a       	or	r0, r26
    346e:	09 f1       	breq	.+66     	; 0x34b2 <SRAMwriteblock_endsending>
    3470:	ed e4       	ldi	r30, 0x4D	; 77
    3472:	ff 27       	eor	r31, r31
    3474:	5b 98       	cbi	0x0b, 3	; 11
    3476:	22 e0       	ldi	r18, 0x02	; 2
    3478:	2e bd       	out	0x2e, r18	; 46
    347a:	0d 2c       	mov	r0, r13

0000347c <SRAMwriteblock_wait1>:
    347c:	20 81       	ld	r18, Z
    347e:	27 fb       	bst	r18, 7
    3480:	ee f7       	brtc	.-6      	; 0x347c <SRAMwriteblock_wait1>
    3482:	2e b5       	in	r18, 0x2e	; 46
    3484:	0e bc       	out	0x2e, r0	; 46
    3486:	0c 2c       	mov	r0, r12

00003488 <SRAMwriteblock_wait2>:
    3488:	20 81       	ld	r18, Z
    348a:	27 fb       	bst	r18, 7
    348c:	ee f7       	brtc	.-6      	; 0x3488 <SRAMwriteblock_wait2>
    348e:	2e b5       	in	r18, 0x2e	; 46
    3490:	0e bc       	out	0x2e, r0	; 46

00003492 <SRAMwriteblock_wait3>:
    3492:	20 81       	ld	r18, Z
    3494:	27 fb       	bst	r18, 7
    3496:	ee f7       	brtc	.-6      	; 0x3492 <SRAMwriteblock_wait3>
    3498:	2e b5       	in	r18, 0x2e	; 46
    349a:	ce 2d       	mov	r28, r14
    349c:	df 2d       	mov	r29, r15
    349e:	09 90       	ld	r0, Y+

000034a0 <SRAMwriteblock_sending>:
    34a0:	0e bc       	out	0x2e, r0	; 46
    34a2:	09 90       	ld	r0, Y+

000034a4 <SRAMwriteblock_wait4>:
    34a4:	20 81       	ld	r18, Z
    34a6:	27 fb       	bst	r18, 7
    34a8:	ee f7       	brtc	.-6      	; 0x34a4 <SRAMwriteblock_wait4>
    34aa:	2e b5       	in	r18, 0x2e	; 46
    34ac:	11 97       	sbiw	r26, 0x01	; 1
    34ae:	c1 f7       	brne	.-16     	; 0x34a0 <SRAMwriteblock_sending>
    34b0:	5b 9a       	sbi	0x0b, 3	; 11

000034b2 <SRAMwriteblock_endsending>:
    34b2:	bf 91       	pop	r27
    34b4:	af 91       	pop	r26
    34b6:	df 91       	pop	r29
    34b8:	cf 91       	pop	r28
    34ba:	ff 91       	pop	r31
    34bc:	ef 91       	pop	r30
    34be:	2f 91       	pop	r18
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
	);

	#endif
}
    34c0:	00 00       	nop
    34c2:	26 96       	adiw	r28, 0x06	; 6
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	ff 90       	pop	r15
    34d4:	ef 90       	pop	r14
    34d6:	df 90       	pop	r13
    34d8:	cf 90       	pop	r12
    34da:	bf 90       	pop	r11
    34dc:	af 90       	pop	r10
    34de:	08 95       	ret

000034e0 <SRAMreadblock>:

void SRAMreadblock(unsigned address, unsigned char *block, unsigned length)
{
    34e0:	af 92       	push	r10
    34e2:	bf 92       	push	r11
    34e4:	cf 92       	push	r12
    34e6:	df 92       	push	r13
    34e8:	ef 92       	push	r14
    34ea:	ff 92       	push	r15
    34ec:	cf 93       	push	r28
    34ee:	df 93       	push	r29
    34f0:	00 d0       	rcall	.+0      	; 0x34f2 <SRAMreadblock+0x12>
    34f2:	00 d0       	rcall	.+0      	; 0x34f4 <SRAMreadblock+0x14>
    34f4:	00 d0       	rcall	.+0      	; 0x34f6 <SRAMreadblock+0x16>
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
    34fa:	9a 83       	std	Y+2, r25	; 0x02
    34fc:	89 83       	std	Y+1, r24	; 0x01
    34fe:	7c 83       	std	Y+4, r23	; 0x04
    3500:	6b 83       	std	Y+3, r22	; 0x03
    3502:	5e 83       	std	Y+6, r21	; 0x06
    3504:	4d 83       	std	Y+5, r20	; 0x05
		"pop r28"		" \n\t"
		"pop r31"		" \n\t"
		"pop r30"		" \n\t"
		"pop r18"		" \n\t"
	::[_rdinstr] "M" (SRAMINSTR_RD),
		  [_lengthlow] "l" ((unsigned char)(length & 0xff)),
    3506:	2d 81       	ldd	r18, Y+5	; 0x05
		  [_lengthhigh] "l" ((unsigned char)(length >> 8)),
    3508:	8d 81       	ldd	r24, Y+5	; 0x05
    350a:	9e 81       	ldd	r25, Y+6	; 0x06
    350c:	89 2f       	mov	r24, r25
    350e:	99 27       	eor	r25, r25
    3510:	48 2f       	mov	r20, r24
		  [_addresslow] "l" ((unsigned char)(address & 0xff)),
    3512:	39 81       	ldd	r19, Y+1	; 0x01
		  [_addresshigh] "l" ((unsigned char)(address >> 8)),
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	9a 81       	ldd	r25, Y+2	; 0x02
    3518:	89 2f       	mov	r24, r25
    351a:	99 27       	eor	r25, r25
    351c:	58 2f       	mov	r21, r24
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
    351e:	8b 81       	ldd	r24, Y+3	; 0x03
    3520:	9c 81       	ldd	r25, Y+4	; 0x04
    3522:	68 2f       	mov	r22, r24
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
    3524:	8b 81       	ldd	r24, Y+3	; 0x03
    3526:	9c 81       	ldd	r25, Y+4	; 0x04
    3528:	89 2f       	mov	r24, r25
    352a:	99 27       	eor	r25, r25
		}
		SRAMDISABLE;

	#else

		__asm__ __volatile__ (
    352c:	a2 2e       	mov	r10, r18
    352e:	b4 2e       	mov	r11, r20
    3530:	c3 2e       	mov	r12, r19
    3532:	d5 2e       	mov	r13, r21
    3534:	e6 2e       	mov	r14, r22
    3536:	f8 2e       	mov	r15, r24
    3538:	2f 93       	push	r18
    353a:	ef 93       	push	r30
    353c:	ff 93       	push	r31
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	af 93       	push	r26
    3544:	bf 93       	push	r27
    3546:	aa 2d       	mov	r26, r10
    3548:	bb 2d       	mov	r27, r11
    354a:	0a 2e       	mov	r0, r26
    354c:	0b 2a       	or	r0, r27
    354e:	39 f1       	breq	.+78     	; 0x359e <SRAMreadblock_endreading>
    3550:	ed e4       	ldi	r30, 0x4D	; 77
    3552:	ff 27       	eor	r31, r31
    3554:	5b 98       	cbi	0x0b, 3	; 11
    3556:	23 e0       	ldi	r18, 0x03	; 3
    3558:	2e bd       	out	0x2e, r18	; 46
    355a:	0d 2c       	mov	r0, r13

0000355c <SRAMreadblock_wait1>:
    355c:	20 81       	ld	r18, Z
    355e:	27 fb       	bst	r18, 7
    3560:	ee f7       	brtc	.-6      	; 0x355c <SRAMreadblock_wait1>
    3562:	2e b5       	in	r18, 0x2e	; 46
    3564:	0e bc       	out	0x2e, r0	; 46
    3566:	0c 2c       	mov	r0, r12

00003568 <SRAMreadblock_wait2>:
    3568:	20 81       	ld	r18, Z
    356a:	27 fb       	bst	r18, 7
    356c:	ee f7       	brtc	.-6      	; 0x3568 <SRAMreadblock_wait2>
    356e:	2e b5       	in	r18, 0x2e	; 46
    3570:	0e bc       	out	0x2e, r0	; 46
    3572:	2f ef       	ldi	r18, 0xFF	; 255
    3574:	02 2e       	mov	r0, r18

00003576 <SRAMreadblock_wait3>:
    3576:	20 81       	ld	r18, Z
    3578:	27 fb       	bst	r18, 7
    357a:	ee f7       	brtc	.-6      	; 0x3576 <SRAMreadblock_wait3>
    357c:	2e b5       	in	r18, 0x2e	; 46
    357e:	0e bc       	out	0x2e, r0	; 46
    3580:	ce 2d       	mov	r28, r14
    3582:	df 2d       	mov	r29, r15
    3584:	2f ef       	ldi	r18, 0xFF	; 255

00003586 <SRAMreadblock_wait4>:
    3586:	00 80       	ld	r0, Z
    3588:	07 fa       	bst	r0, 7
    358a:	ee f7       	brtc	.-6      	; 0x3586 <SRAMreadblock_wait4>
    358c:	0e b4       	in	r0, 0x2e	; 46
    358e:	2e bd       	out	0x2e, r18	; 46
    3590:	09 92       	st	Y+, r0
    3592:	11 97       	sbiw	r26, 0x01	; 1
    3594:	c1 f7       	brne	.-16     	; 0x3586 <SRAMreadblock_wait4>

00003596 <SRAMreadblock_wait5>:
    3596:	00 80       	ld	r0, Z
    3598:	07 fa       	bst	r0, 7
    359a:	ee f7       	brtc	.-6      	; 0x3596 <SRAMreadblock_wait5>
    359c:	5b 9a       	sbi	0x0b, 3	; 11

0000359e <SRAMreadblock_endreading>:
    359e:	bf 91       	pop	r27
    35a0:	af 91       	pop	r26
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	ff 91       	pop	r31
    35a8:	ef 91       	pop	r30
    35aa:	2f 91       	pop	r18
		  [_blocklow] "l" ((unsigned char)((unsigned)block & 0xff)),
		  [_blockhigh] "l" ((unsigned char)((unsigned)block >> 8))
	);

	#endif
}
    35ac:	00 00       	nop
    35ae:	26 96       	adiw	r28, 0x06	; 6
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	cd bf       	out	0x3d, r28	; 61
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	ff 90       	pop	r15
    35c0:	ef 90       	pop	r14
    35c2:	df 90       	pop	r13
    35c4:	cf 90       	pop	r12
    35c6:	bf 90       	pop	r11
    35c8:	af 90       	pop	r10
    35ca:	08 95       	ret

000035cc <my_trace>:
//void my_trace(uint16_t tick, char tag,char userdata,char resource_id);
//void consumeCPU(unsigned char task_id, unsigned short ms);
//void InitHW();

void my_trace(uint16_t tick, char tag,char userdata,char resource_id)
{
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	28 97       	sbiw	r28, 0x08	; 8
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	9d 83       	std	Y+5, r25	; 0x05
    35e2:	8c 83       	std	Y+4, r24	; 0x04
    35e4:	6e 83       	std	Y+6, r22	; 0x06
    35e6:	4f 83       	std	Y+7, r20	; 0x07
    35e8:	28 87       	std	Y+8, r18	; 0x08
	static unsigned mem_pointer=0;
DigitalWrite(tag);
    35ea:	8e 81       	ldd	r24, Y+6	; 0x06
    35ec:	0e 94 ce 00 	call	0x19c	; 0x19c <DigitalWrite>
ev[0]=tick;
    35f0:	8c 81       	ldd	r24, Y+4	; 0x04
    35f2:	9d 81       	ldd	r25, Y+5	; 0x05
    35f4:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <ev+0x1>
    35f8:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <ev>
ev[1]=tag;
    35fc:	8e 81       	ldd	r24, Y+6	; 0x06
    35fe:	88 2f       	mov	r24, r24
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <ev+0x3>
    3606:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <ev+0x2>
ev[2]=userdata;
    360a:	8f 81       	ldd	r24, Y+7	; 0x07
    360c:	88 2f       	mov	r24, r24
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	90 93 c6 07 	sts	0x07C6, r25	; 0x8007c6 <ev+0x5>
    3614:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <ev+0x4>
ev[3]=resource_id;
    3618:	88 85       	ldd	r24, Y+8	; 0x08
    361a:	88 2f       	mov	r24, r24
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	90 93 c8 07 	sts	0x07C8, r25	; 0x8007c8 <ev+0x7>
    3622:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <ev+0x6>
SRAMwriteblock(mem_pointer,(unsigned char*)ev,8);
    3626:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2351>
    362a:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2351+0x1>
    362e:	48 e0       	ldi	r20, 0x08	; 8
    3630:	50 e0       	ldi	r21, 0x00	; 0
    3632:	61 ec       	ldi	r22, 0xC1	; 193
    3634:	77 e0       	ldi	r23, 0x07	; 7
    3636:	0e 94 00 1a 	call	0x3400	; 0x3400 <SRAMwriteblock>
mem_pointer+=8;
    363a:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2351>
    363e:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2351+0x1>
    3642:	08 96       	adiw	r24, 0x08	; 8
    3644:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <mem_pointer.2351+0x1>
    3648:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <mem_pointer.2351>

if (mem_pointer>time2save)
    364c:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2351>
    3650:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2351+0x1>
    3654:	81 32       	cpi	r24, 0x21	; 33
    3656:	9e 44       	sbci	r25, 0x4E	; 78
    3658:	08 f4       	brcc	.+2      	; 0x365c <my_trace+0x90>
    365a:	4f c1       	rjmp	.+670    	; 0x38fa <my_trace+0x32e>
{	DigitalWrite(127);
    365c:	8f e7       	ldi	r24, 0x7F	; 127
    365e:	0e 94 ce 00 	call	0x19c	; 0x19c <DigitalWrite>
mem_pointer=0;
    3662:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mem_pointer.2351+0x1>
    3666:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <mem_pointer.2351>
//Starting
sprintf(trama,"INIT TRACE\r\n");
    366a:	8d e0       	ldi	r24, 0x0D	; 13
    366c:	e2 e2       	ldi	r30, 0x22	; 34
    366e:	f1 e0       	ldi	r31, 0x01	; 1
    3670:	a1 eb       	ldi	r26, 0xB1	; 177
    3672:	b7 e0       	ldi	r27, 0x07	; 7
    3674:	01 90       	ld	r0, Z+
    3676:	0d 92       	st	X+, r0
    3678:	8a 95       	dec	r24
    367a:	e1 f7       	brne	.-8      	; 0x3674 <my_trace+0xa8>
RS232_Send(trama,'\r');
    367c:	6d e0       	ldi	r22, 0x0D	; 13
    367e:	81 eb       	ldi	r24, 0xB1	; 177
    3680:	97 e0       	ldi	r25, 0x07	; 7
    3682:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <RS232_Send>
//Write the number of tasks
sprintf(trama,"%u 0 0 0\r\n",num_tasks);
    3686:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    368a:	88 2f       	mov	r24, r24
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	29 2f       	mov	r18, r25
    3690:	2f 93       	push	r18
    3692:	8f 93       	push	r24
    3694:	8f e2       	ldi	r24, 0x2F	; 47
    3696:	91 e0       	ldi	r25, 0x01	; 1
    3698:	89 2f       	mov	r24, r25
    369a:	8f 93       	push	r24
    369c:	8f e2       	ldi	r24, 0x2F	; 47
    369e:	91 e0       	ldi	r25, 0x01	; 1
    36a0:	8f 93       	push	r24
    36a2:	81 eb       	ldi	r24, 0xB1	; 177
    36a4:	97 e0       	ldi	r25, 0x07	; 7
    36a6:	89 2f       	mov	r24, r25
    36a8:	8f 93       	push	r24
    36aa:	81 eb       	ldi	r24, 0xB1	; 177
    36ac:	97 e0       	ldi	r25, 0x07	; 7
    36ae:	8f 93       	push	r24
    36b0:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <sprintf>
    36b4:	0f 90       	pop	r0
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
RS232_Send(trama,'\r');
    36c0:	6d e0       	ldi	r22, 0x0D	; 13
    36c2:	81 eb       	ldi	r24, 0xB1	; 177
    36c4:	97 e0       	ldi	r25, 0x07	; 7
    36c6:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <RS232_Send>
//Write the computation times: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    36ca:	19 82       	std	Y+1, r1	; 0x01
    36cc:	34 c0       	rjmp	.+104    	; 0x3736 <my_trace+0x16a>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,computationTime[q]);
    36ce:	89 81       	ldd	r24, Y+1	; 0x01
    36d0:	88 2f       	mov	r24, r24
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	87 5f       	subi	r24, 0xF7	; 247
    36da:	9e 4f       	sbci	r25, 0xFE	; 254
    36dc:	fc 01       	movw	r30, r24
    36de:	20 81       	ld	r18, Z
    36e0:	31 81       	ldd	r19, Z+1	; 0x01
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	01 96       	adiw	r24, 0x01	; 1
    36ea:	43 2f       	mov	r20, r19
    36ec:	4f 93       	push	r20
    36ee:	2f 93       	push	r18
    36f0:	29 2f       	mov	r18, r25
    36f2:	2f 93       	push	r18
    36f4:	8f 93       	push	r24
    36f6:	8a e3       	ldi	r24, 0x3A	; 58
    36f8:	91 e0       	ldi	r25, 0x01	; 1
    36fa:	89 2f       	mov	r24, r25
    36fc:	8f 93       	push	r24
    36fe:	8a e3       	ldi	r24, 0x3A	; 58
    3700:	91 e0       	ldi	r25, 0x01	; 1
    3702:	8f 93       	push	r24
    3704:	81 eb       	ldi	r24, 0xB1	; 177
    3706:	97 e0       	ldi	r25, 0x07	; 7
    3708:	89 2f       	mov	r24, r25
    370a:	8f 93       	push	r24
    370c:	81 eb       	ldi	r24, 0xB1	; 177
    370e:	97 e0       	ldi	r25, 0x07	; 7
    3710:	8f 93       	push	r24
    3712:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <sprintf>
    3716:	8d b7       	in	r24, 0x3d	; 61
    3718:	9e b7       	in	r25, 0x3e	; 62
    371a:	08 96       	adiw	r24, 0x08	; 8
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
RS232_Send(trama,'\r');
    3726:	6d e0       	ldi	r22, 0x0D	; 13
    3728:	81 eb       	ldi	r24, 0xB1	; 177
    372a:	97 e0       	ldi	r25, 0x07	; 7
    372c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <RS232_Send>
RS232_Send(trama,'\r');
//Write the number of tasks
sprintf(trama,"%u 0 0 0\r\n",num_tasks);
RS232_Send(trama,'\r');
//Write the computation times: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	8f 5f       	subi	r24, 0xFF	; 255
    3734:	89 83       	std	Y+1, r24	; 0x01
    3736:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    373a:	99 81       	ldd	r25, Y+1	; 0x01
    373c:	98 17       	cp	r25, r24
    373e:	38 f2       	brcs	.-114    	; 0x36ce <my_trace+0x102>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,computationTime[q]);
RS232_Send(trama,'\r');
}
//Write the tasks' periods: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    3740:	1a 82       	std	Y+2, r1	; 0x02
    3742:	34 c0       	rjmp	.+104    	; 0x37ac <my_trace+0x1e0>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,taskPeriod[q]);
    3744:	8a 81       	ldd	r24, Y+2	; 0x02
    3746:	88 2f       	mov	r24, r24
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	88 0f       	add	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	8d 5f       	subi	r24, 0xFD	; 253
    3750:	9e 4f       	sbci	r25, 0xFE	; 254
    3752:	fc 01       	movw	r30, r24
    3754:	20 81       	ld	r18, Z
    3756:	31 81       	ldd	r19, Z+1	; 0x01
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
    375a:	88 2f       	mov	r24, r24
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	01 96       	adiw	r24, 0x01	; 1
    3760:	43 2f       	mov	r20, r19
    3762:	4f 93       	push	r20
    3764:	2f 93       	push	r18
    3766:	29 2f       	mov	r18, r25
    3768:	2f 93       	push	r18
    376a:	8f 93       	push	r24
    376c:	8a e3       	ldi	r24, 0x3A	; 58
    376e:	91 e0       	ldi	r25, 0x01	; 1
    3770:	89 2f       	mov	r24, r25
    3772:	8f 93       	push	r24
    3774:	8a e3       	ldi	r24, 0x3A	; 58
    3776:	91 e0       	ldi	r25, 0x01	; 1
    3778:	8f 93       	push	r24
    377a:	81 eb       	ldi	r24, 0xB1	; 177
    377c:	97 e0       	ldi	r25, 0x07	; 7
    377e:	89 2f       	mov	r24, r25
    3780:	8f 93       	push	r24
    3782:	81 eb       	ldi	r24, 0xB1	; 177
    3784:	97 e0       	ldi	r25, 0x07	; 7
    3786:	8f 93       	push	r24
    3788:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <sprintf>
    378c:	8d b7       	in	r24, 0x3d	; 61
    378e:	9e b7       	in	r25, 0x3e	; 62
    3790:	08 96       	adiw	r24, 0x08	; 8
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	f8 94       	cli
    3796:	de bf       	out	0x3e, r29	; 62
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	cd bf       	out	0x3d, r28	; 61
RS232_Send(trama,'\r');
    379c:	6d e0       	ldi	r22, 0x0D	; 13
    379e:	81 eb       	ldi	r24, 0xB1	; 177
    37a0:	97 e0       	ldi	r25, 0x07	; 7
    37a2:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <RS232_Send>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,computationTime[q]);
RS232_Send(trama,'\r');
}
//Write the tasks' periods: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    37a6:	8a 81       	ldd	r24, Y+2	; 0x02
    37a8:	8f 5f       	subi	r24, 0xFF	; 255
    37aa:	8a 83       	std	Y+2, r24	; 0x02
    37ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    37b0:	9a 81       	ldd	r25, Y+2	; 0x02
    37b2:	98 17       	cp	r25, r24
    37b4:	38 f2       	brcs	.-114    	; 0x3744 <my_trace+0x178>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,taskPeriod[q]);
RS232_Send(trama,'\r');
}
//Write the first activation: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    37b6:	1b 82       	std	Y+3, r1	; 0x03
    37b8:	34 c0       	rjmp	.+104    	; 0x3822 <my_trace+0x256>
{
	sprintf(trama,"%u %u 0 0\r\n",q+1,start[q]);
    37ba:	8b 81       	ldd	r24, Y+3	; 0x03
    37bc:	88 2f       	mov	r24, r24
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	88 0f       	add	r24, r24
    37c2:	99 1f       	adc	r25, r25
    37c4:	88 56       	subi	r24, 0x68	; 104
    37c6:	98 4f       	sbci	r25, 0xF8	; 248
    37c8:	fc 01       	movw	r30, r24
    37ca:	20 81       	ld	r18, Z
    37cc:	31 81       	ldd	r19, Z+1	; 0x01
    37ce:	8b 81       	ldd	r24, Y+3	; 0x03
    37d0:	88 2f       	mov	r24, r24
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	43 2f       	mov	r20, r19
    37d8:	4f 93       	push	r20
    37da:	2f 93       	push	r18
    37dc:	29 2f       	mov	r18, r25
    37de:	2f 93       	push	r18
    37e0:	8f 93       	push	r24
    37e2:	8a e3       	ldi	r24, 0x3A	; 58
    37e4:	91 e0       	ldi	r25, 0x01	; 1
    37e6:	89 2f       	mov	r24, r25
    37e8:	8f 93       	push	r24
    37ea:	8a e3       	ldi	r24, 0x3A	; 58
    37ec:	91 e0       	ldi	r25, 0x01	; 1
    37ee:	8f 93       	push	r24
    37f0:	81 eb       	ldi	r24, 0xB1	; 177
    37f2:	97 e0       	ldi	r25, 0x07	; 7
    37f4:	89 2f       	mov	r24, r25
    37f6:	8f 93       	push	r24
    37f8:	81 eb       	ldi	r24, 0xB1	; 177
    37fa:	97 e0       	ldi	r25, 0x07	; 7
    37fc:	8f 93       	push	r24
    37fe:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <sprintf>
    3802:	8d b7       	in	r24, 0x3d	; 61
    3804:	9e b7       	in	r25, 0x3e	; 62
    3806:	08 96       	adiw	r24, 0x08	; 8
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
	RS232_Send(trama,'\r');
    3812:	6d e0       	ldi	r22, 0x0D	; 13
    3814:	81 eb       	ldi	r24, 0xB1	; 177
    3816:	97 e0       	ldi	r25, 0x07	; 7
    3818:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <RS232_Send>
{
sprintf(trama,"%u %u 0 0\r\n",q+1,taskPeriod[q]);
RS232_Send(trama,'\r');
}
//Write the first activation: a row per task
for (unsigned char q=0;q<num_tasks;q++)
    381c:	8b 81       	ldd	r24, Y+3	; 0x03
    381e:	8f 5f       	subi	r24, 0xFF	; 255
    3820:	8b 83       	std	Y+3, r24	; 0x03
    3822:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_tasks>
    3826:	9b 81       	ldd	r25, Y+3	; 0x03
    3828:	98 17       	cp	r25, r24
    382a:	38 f2       	brcs	.-114    	; 0x37ba <my_trace+0x1ee>
{
	sprintf(trama,"%u %u 0 0\r\n",q+1,start[q]);
	RS232_Send(trama,'\r');
}
//read from memory and send through rs232
while (mem_pointer<time2save)
    382c:	4c c0       	rjmp	.+152    	; 0x38c6 <my_trace+0x2fa>
{
SRAMreadblock(mem_pointer,(unsigned char*)ev,8);
    382e:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2351>
    3832:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2351+0x1>
    3836:	48 e0       	ldi	r20, 0x08	; 8
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	61 ec       	ldi	r22, 0xC1	; 193
    383c:	77 e0       	ldi	r23, 0x07	; 7
    383e:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <SRAMreadblock>
sprintf(trama,"%u %u %u %u\r\n",ev[0],ev[1],ev[2],ev[3]);
    3842:	60 91 c7 07 	lds	r22, 0x07C7	; 0x8007c7 <ev+0x6>
    3846:	70 91 c8 07 	lds	r23, 0x07C8	; 0x8007c8 <ev+0x7>
    384a:	40 91 c5 07 	lds	r20, 0x07C5	; 0x8007c5 <ev+0x4>
    384e:	50 91 c6 07 	lds	r21, 0x07C6	; 0x8007c6 <ev+0x5>
    3852:	20 91 c3 07 	lds	r18, 0x07C3	; 0x8007c3 <ev+0x2>
    3856:	30 91 c4 07 	lds	r19, 0x07C4	; 0x8007c4 <ev+0x3>
    385a:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <ev>
    385e:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <ev+0x1>
    3862:	e7 2f       	mov	r30, r23
    3864:	ef 93       	push	r30
    3866:	6f 93       	push	r22
    3868:	65 2f       	mov	r22, r21
    386a:	6f 93       	push	r22
    386c:	4f 93       	push	r20
    386e:	43 2f       	mov	r20, r19
    3870:	4f 93       	push	r20
    3872:	2f 93       	push	r18
    3874:	29 2f       	mov	r18, r25
    3876:	2f 93       	push	r18
    3878:	8f 93       	push	r24
    387a:	86 e4       	ldi	r24, 0x46	; 70
    387c:	91 e0       	ldi	r25, 0x01	; 1
    387e:	89 2f       	mov	r24, r25
    3880:	8f 93       	push	r24
    3882:	86 e4       	ldi	r24, 0x46	; 70
    3884:	91 e0       	ldi	r25, 0x01	; 1
    3886:	8f 93       	push	r24
    3888:	81 eb       	ldi	r24, 0xB1	; 177
    388a:	97 e0       	ldi	r25, 0x07	; 7
    388c:	89 2f       	mov	r24, r25
    388e:	8f 93       	push	r24
    3890:	81 eb       	ldi	r24, 0xB1	; 177
    3892:	97 e0       	ldi	r25, 0x07	; 7
    3894:	8f 93       	push	r24
    3896:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <sprintf>
    389a:	ed b7       	in	r30, 0x3d	; 61
    389c:	fe b7       	in	r31, 0x3e	; 62
    389e:	3c 96       	adiw	r30, 0x0c	; 12
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
RS232_Send(trama,'\r');
    38aa:	6d e0       	ldi	r22, 0x0D	; 13
    38ac:	81 eb       	ldi	r24, 0xB1	; 177
    38ae:	97 e0       	ldi	r25, 0x07	; 7
    38b0:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <RS232_Send>
mem_pointer+=8;
    38b4:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2351>
    38b8:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2351+0x1>
    38bc:	08 96       	adiw	r24, 0x08	; 8
    38be:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <mem_pointer.2351+0x1>
    38c2:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <mem_pointer.2351>
{
	sprintf(trama,"%u %u 0 0\r\n",q+1,start[q]);
	RS232_Send(trama,'\r');
}
//read from memory and send through rs232
while (mem_pointer<time2save)
    38c6:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <mem_pointer.2351>
    38ca:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <mem_pointer.2351+0x1>
    38ce:	80 32       	cpi	r24, 0x20	; 32
    38d0:	9e 44       	sbci	r25, 0x4E	; 78
    38d2:	08 f4       	brcc	.+2      	; 0x38d6 <my_trace+0x30a>
    38d4:	ac cf       	rjmp	.-168    	; 0x382e <my_trace+0x262>
SRAMreadblock(mem_pointer,(unsigned char*)ev,8);
sprintf(trama,"%u %u %u %u\r\n",ev[0],ev[1],ev[2],ev[3]);
RS232_Send(trama,'\r');
mem_pointer+=8;
}
sprintf(trama,"END TRACE\r\n");
    38d6:	8c e0       	ldi	r24, 0x0C	; 12
    38d8:	e4 e5       	ldi	r30, 0x54	; 84
    38da:	f1 e0       	ldi	r31, 0x01	; 1
    38dc:	a1 eb       	ldi	r26, 0xB1	; 177
    38de:	b7 e0       	ldi	r27, 0x07	; 7
    38e0:	01 90       	ld	r0, Z+
    38e2:	0d 92       	st	X+, r0
    38e4:	8a 95       	dec	r24
    38e6:	e1 f7       	brne	.-8      	; 0x38e0 <my_trace+0x314>
RS232_Send(trama,'\r');
    38e8:	6d e0       	ldi	r22, 0x0D	; 13
    38ea:	81 eb       	ldi	r24, 0xB1	; 177
    38ec:	97 e0       	ldi	r25, 0x07	; 7
    38ee:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <RS232_Send>
mem_pointer=0;
    38f2:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mem_pointer.2351+0x1>
    38f6:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <mem_pointer.2351>

}


}
    38fa:	00 00       	nop
    38fc:	28 96       	adiw	r28, 0x08	; 8
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	08 95       	ret

0000390e <consumeCPU>:


void consumeCPU(unsigned char task_id, unsigned short ms)
{
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
    3916:	29 97       	sbiw	r28, 0x09	; 9
    3918:	0f b6       	in	r0, 0x3f	; 63
    391a:	f8 94       	cli
    391c:	de bf       	out	0x3e, r29	; 62
    391e:	0f be       	out	0x3f, r0	; 63
    3920:	cd bf       	out	0x3d, r28	; 61
    3922:	8f 83       	std	Y+7, r24	; 0x07
    3924:	79 87       	std	Y+9, r23	; 0x09
    3926:	68 87       	std	Y+8, r22	; 0x08
TickType_t current_load=0;
    3928:	1a 82       	std	Y+2, r1	; 0x02
    392a:	19 82       	std	Y+1, r1	; 0x01
TickType_t last_tick=0;
    392c:	1c 82       	std	Y+4, r1	; 0x04
    392e:	1b 82       	std	Y+3, r1	; 0x03
last_tick=xTaskGetTickCount();
    3930:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    3934:	9c 83       	std	Y+4, r25	; 0x04
    3936:	8b 83       	std	Y+3, r24	; 0x03
TickType_t tick;

if (task_id!=0 && current_load==0)
    3938:	8f 81       	ldd	r24, Y+7	; 0x07
    393a:	88 23       	and	r24, r24
    393c:	71 f1       	breq	.+92     	; 0x399a <consumeCPU+0x8c>
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	9a 81       	ldd	r25, Y+2	; 0x02
    3942:	89 2b       	or	r24, r25
    3944:	51 f5       	brne	.+84     	; 0x399a <consumeCPU+0x8c>
{	ev[0]=last_tick;
    3946:	8b 81       	ldd	r24, Y+3	; 0x03
    3948:	9c 81       	ldd	r25, Y+4	; 0x04
    394a:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <ev+0x1>
    394e:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <ev>
ev[1]=10+task_id;
    3952:	8f 81       	ldd	r24, Y+7	; 0x07
    3954:	88 2f       	mov	r24, r24
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	0a 96       	adiw	r24, 0x0a	; 10
    395a:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <ev+0x3>
    395e:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <ev+0x2>
my_trace(last_tick,task_id,10,0);
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
    3964:	9c 81       	ldd	r25, Y+4	; 0x04
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	4a e0       	ldi	r20, 0x0A	; 10
    396a:	6f 81       	ldd	r22, Y+7	; 0x07
    396c:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <my_trace>
}
while (current_load<ms)
    3970:	14 c0       	rjmp	.+40     	; 0x399a <consumeCPU+0x8c>
{
tick=xTaskGetTickCount();
    3972:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskGetTickCount>
    3976:	9e 83       	std	Y+6, r25	; 0x06
    3978:	8d 83       	std	Y+5, r24	; 0x05
if (last_tick!=tick)
    397a:	2b 81       	ldd	r18, Y+3	; 0x03
    397c:	3c 81       	ldd	r19, Y+4	; 0x04
    397e:	8d 81       	ldd	r24, Y+5	; 0x05
    3980:	9e 81       	ldd	r25, Y+6	; 0x06
    3982:	28 17       	cp	r18, r24
    3984:	39 07       	cpc	r19, r25
    3986:	49 f0       	breq	.+18     	; 0x399a <consumeCPU+0x8c>
{
current_load++;
    3988:	89 81       	ldd	r24, Y+1	; 0x01
    398a:	9a 81       	ldd	r25, Y+2	; 0x02
    398c:	01 96       	adiw	r24, 0x01	; 1
    398e:	9a 83       	std	Y+2, r25	; 0x02
    3990:	89 83       	std	Y+1, r24	; 0x01
last_tick=tick;
    3992:	8d 81       	ldd	r24, Y+5	; 0x05
    3994:	9e 81       	ldd	r25, Y+6	; 0x06
    3996:	9c 83       	std	Y+4, r25	; 0x04
    3998:	8b 83       	std	Y+3, r24	; 0x03
if (task_id!=0 && current_load==0)
{	ev[0]=last_tick;
ev[1]=10+task_id;
my_trace(last_tick,task_id,10,0);
}
while (current_load<ms)
    399a:	29 81       	ldd	r18, Y+1	; 0x01
    399c:	3a 81       	ldd	r19, Y+2	; 0x02
    399e:	88 85       	ldd	r24, Y+8	; 0x08
    39a0:	99 85       	ldd	r25, Y+9	; 0x09
    39a2:	28 17       	cp	r18, r24
    39a4:	39 07       	cpc	r19, r25
    39a6:	28 f3       	brcs	.-54     	; 0x3972 <consumeCPU+0x64>
{
current_load++;
last_tick=tick;
}
}
current_load=0;
    39a8:	1a 82       	std	Y+2, r1	; 0x02
    39aa:	19 82       	std	Y+1, r1	; 0x01
}
    39ac:	00 00       	nop
    39ae:	29 96       	adiw	r28, 0x09	; 9
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	de bf       	out	0x3e, r29	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	cd bf       	out	0x3d, r28	; 61
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	08 95       	ret

000039c0 <InitHW>:

void InitHW()
{
    39c0:	cf 93       	push	r28
    39c2:	df 93       	push	r29
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
// Initialize HW
cli();
    39c8:	f8 94       	cli
SRAMinitiate();
    39ca:	0e 94 bd 19 	call	0x337a	; 0x337a <SRAMinitiate>
DigitalInit();
    39ce:	0e 94 53 00 	call	0xa6	; 0xa6 <DigitalInit>
RS232_Init(NULL,16,'\r');
    39d2:	4d e0       	ldi	r20, 0x0D	; 13
    39d4:	60 e1       	ldi	r22, 0x10	; 16
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	0e 94 0f 19 	call	0x321e	; 0x321e <RS232_Init>

sei();
    39de:	78 94       	sei
}
    39e0:	00 00       	nop
    39e2:	df 91       	pop	r29
    39e4:	cf 91       	pop	r28
    39e6:	08 95       	ret

000039e8 <__divsf3>:
    39e8:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <__divsf3x>
    39ec:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__fp_round>
    39f0:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fp_pscB>
    39f4:	58 f0       	brcs	.+22     	; 0x3a0c <__divsf3+0x24>
    39f6:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__fp_pscA>
    39fa:	40 f0       	brcs	.+16     	; 0x3a0c <__divsf3+0x24>
    39fc:	29 f4       	brne	.+10     	; 0x3a08 <__divsf3+0x20>
    39fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3a00:	29 f0       	breq	.+10     	; 0x3a0c <__divsf3+0x24>
    3a02:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__fp_inf>
    3a06:	51 11       	cpse	r21, r1
    3a08:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__fp_szero>
    3a0c:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__fp_nan>

00003a10 <__divsf3x>:
    3a10:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__fp_split3>
    3a14:	68 f3       	brcs	.-38     	; 0x39f0 <__divsf3+0x8>

00003a16 <__divsf3_pse>:
    3a16:	99 23       	and	r25, r25
    3a18:	b1 f3       	breq	.-20     	; 0x3a06 <__divsf3+0x1e>
    3a1a:	55 23       	and	r21, r21
    3a1c:	91 f3       	breq	.-28     	; 0x3a02 <__divsf3+0x1a>
    3a1e:	95 1b       	sub	r25, r21
    3a20:	55 0b       	sbc	r21, r21
    3a22:	bb 27       	eor	r27, r27
    3a24:	aa 27       	eor	r26, r26
    3a26:	62 17       	cp	r22, r18
    3a28:	73 07       	cpc	r23, r19
    3a2a:	84 07       	cpc	r24, r20
    3a2c:	38 f0       	brcs	.+14     	; 0x3a3c <__divsf3_pse+0x26>
    3a2e:	9f 5f       	subi	r25, 0xFF	; 255
    3a30:	5f 4f       	sbci	r21, 0xFF	; 255
    3a32:	22 0f       	add	r18, r18
    3a34:	33 1f       	adc	r19, r19
    3a36:	44 1f       	adc	r20, r20
    3a38:	aa 1f       	adc	r26, r26
    3a3a:	a9 f3       	breq	.-22     	; 0x3a26 <__divsf3_pse+0x10>
    3a3c:	35 d0       	rcall	.+106    	; 0x3aa8 <__divsf3_pse+0x92>
    3a3e:	0e 2e       	mov	r0, r30
    3a40:	3a f0       	brmi	.+14     	; 0x3a50 <__divsf3_pse+0x3a>
    3a42:	e0 e8       	ldi	r30, 0x80	; 128
    3a44:	32 d0       	rcall	.+100    	; 0x3aaa <__divsf3_pse+0x94>
    3a46:	91 50       	subi	r25, 0x01	; 1
    3a48:	50 40       	sbci	r21, 0x00	; 0
    3a4a:	e6 95       	lsr	r30
    3a4c:	00 1c       	adc	r0, r0
    3a4e:	ca f7       	brpl	.-14     	; 0x3a42 <__divsf3_pse+0x2c>
    3a50:	2b d0       	rcall	.+86     	; 0x3aa8 <__divsf3_pse+0x92>
    3a52:	fe 2f       	mov	r31, r30
    3a54:	29 d0       	rcall	.+82     	; 0x3aa8 <__divsf3_pse+0x92>
    3a56:	66 0f       	add	r22, r22
    3a58:	77 1f       	adc	r23, r23
    3a5a:	88 1f       	adc	r24, r24
    3a5c:	bb 1f       	adc	r27, r27
    3a5e:	26 17       	cp	r18, r22
    3a60:	37 07       	cpc	r19, r23
    3a62:	48 07       	cpc	r20, r24
    3a64:	ab 07       	cpc	r26, r27
    3a66:	b0 e8       	ldi	r27, 0x80	; 128
    3a68:	09 f0       	breq	.+2      	; 0x3a6c <__divsf3_pse+0x56>
    3a6a:	bb 0b       	sbc	r27, r27
    3a6c:	80 2d       	mov	r24, r0
    3a6e:	bf 01       	movw	r22, r30
    3a70:	ff 27       	eor	r31, r31
    3a72:	93 58       	subi	r25, 0x83	; 131
    3a74:	5f 4f       	sbci	r21, 0xFF	; 255
    3a76:	3a f0       	brmi	.+14     	; 0x3a86 <__divsf3_pse+0x70>
    3a78:	9e 3f       	cpi	r25, 0xFE	; 254
    3a7a:	51 05       	cpc	r21, r1
    3a7c:	78 f0       	brcs	.+30     	; 0x3a9c <__divsf3_pse+0x86>
    3a7e:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__fp_inf>
    3a82:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__fp_szero>
    3a86:	5f 3f       	cpi	r21, 0xFF	; 255
    3a88:	e4 f3       	brlt	.-8      	; 0x3a82 <__divsf3_pse+0x6c>
    3a8a:	98 3e       	cpi	r25, 0xE8	; 232
    3a8c:	d4 f3       	brlt	.-12     	; 0x3a82 <__divsf3_pse+0x6c>
    3a8e:	86 95       	lsr	r24
    3a90:	77 95       	ror	r23
    3a92:	67 95       	ror	r22
    3a94:	b7 95       	ror	r27
    3a96:	f7 95       	ror	r31
    3a98:	9f 5f       	subi	r25, 0xFF	; 255
    3a9a:	c9 f7       	brne	.-14     	; 0x3a8e <__divsf3_pse+0x78>
    3a9c:	88 0f       	add	r24, r24
    3a9e:	91 1d       	adc	r25, r1
    3aa0:	96 95       	lsr	r25
    3aa2:	87 95       	ror	r24
    3aa4:	97 f9       	bld	r25, 7
    3aa6:	08 95       	ret
    3aa8:	e1 e0       	ldi	r30, 0x01	; 1
    3aaa:	66 0f       	add	r22, r22
    3aac:	77 1f       	adc	r23, r23
    3aae:	88 1f       	adc	r24, r24
    3ab0:	bb 1f       	adc	r27, r27
    3ab2:	62 17       	cp	r22, r18
    3ab4:	73 07       	cpc	r23, r19
    3ab6:	84 07       	cpc	r24, r20
    3ab8:	ba 07       	cpc	r27, r26
    3aba:	20 f0       	brcs	.+8      	; 0x3ac4 <__divsf3_pse+0xae>
    3abc:	62 1b       	sub	r22, r18
    3abe:	73 0b       	sbc	r23, r19
    3ac0:	84 0b       	sbc	r24, r20
    3ac2:	ba 0b       	sbc	r27, r26
    3ac4:	ee 1f       	adc	r30, r30
    3ac6:	88 f7       	brcc	.-30     	; 0x3aaa <__divsf3_pse+0x94>
    3ac8:	e0 95       	com	r30
    3aca:	08 95       	ret

00003acc <__fixsfsi>:
    3acc:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fixunssfsi>
    3ad0:	68 94       	set
    3ad2:	b1 11       	cpse	r27, r1
    3ad4:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__fp_szero>
    3ad8:	08 95       	ret

00003ada <__fixunssfsi>:
    3ada:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <__fp_splitA>
    3ade:	88 f0       	brcs	.+34     	; 0x3b02 <__fixunssfsi+0x28>
    3ae0:	9f 57       	subi	r25, 0x7F	; 127
    3ae2:	98 f0       	brcs	.+38     	; 0x3b0a <__fixunssfsi+0x30>
    3ae4:	b9 2f       	mov	r27, r25
    3ae6:	99 27       	eor	r25, r25
    3ae8:	b7 51       	subi	r27, 0x17	; 23
    3aea:	b0 f0       	brcs	.+44     	; 0x3b18 <__fixunssfsi+0x3e>
    3aec:	e1 f0       	breq	.+56     	; 0x3b26 <__fixunssfsi+0x4c>
    3aee:	66 0f       	add	r22, r22
    3af0:	77 1f       	adc	r23, r23
    3af2:	88 1f       	adc	r24, r24
    3af4:	99 1f       	adc	r25, r25
    3af6:	1a f0       	brmi	.+6      	; 0x3afe <__fixunssfsi+0x24>
    3af8:	ba 95       	dec	r27
    3afa:	c9 f7       	brne	.-14     	; 0x3aee <__fixunssfsi+0x14>
    3afc:	14 c0       	rjmp	.+40     	; 0x3b26 <__fixunssfsi+0x4c>
    3afe:	b1 30       	cpi	r27, 0x01	; 1
    3b00:	91 f0       	breq	.+36     	; 0x3b26 <__fixunssfsi+0x4c>
    3b02:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__fp_zero>
    3b06:	b1 e0       	ldi	r27, 0x01	; 1
    3b08:	08 95       	ret
    3b0a:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__fp_zero>
    3b0e:	67 2f       	mov	r22, r23
    3b10:	78 2f       	mov	r23, r24
    3b12:	88 27       	eor	r24, r24
    3b14:	b8 5f       	subi	r27, 0xF8	; 248
    3b16:	39 f0       	breq	.+14     	; 0x3b26 <__fixunssfsi+0x4c>
    3b18:	b9 3f       	cpi	r27, 0xF9	; 249
    3b1a:	cc f3       	brlt	.-14     	; 0x3b0e <__fixunssfsi+0x34>
    3b1c:	86 95       	lsr	r24
    3b1e:	77 95       	ror	r23
    3b20:	67 95       	ror	r22
    3b22:	b3 95       	inc	r27
    3b24:	d9 f7       	brne	.-10     	; 0x3b1c <__fixunssfsi+0x42>
    3b26:	3e f4       	brtc	.+14     	; 0x3b36 <__fixunssfsi+0x5c>
    3b28:	90 95       	com	r25
    3b2a:	80 95       	com	r24
    3b2c:	70 95       	com	r23
    3b2e:	61 95       	neg	r22
    3b30:	7f 4f       	sbci	r23, 0xFF	; 255
    3b32:	8f 4f       	sbci	r24, 0xFF	; 255
    3b34:	9f 4f       	sbci	r25, 0xFF	; 255
    3b36:	08 95       	ret

00003b38 <__floatunsisf>:
    3b38:	e8 94       	clt
    3b3a:	09 c0       	rjmp	.+18     	; 0x3b4e <__floatsisf+0x12>

00003b3c <__floatsisf>:
    3b3c:	97 fb       	bst	r25, 7
    3b3e:	3e f4       	brtc	.+14     	; 0x3b4e <__floatsisf+0x12>
    3b40:	90 95       	com	r25
    3b42:	80 95       	com	r24
    3b44:	70 95       	com	r23
    3b46:	61 95       	neg	r22
    3b48:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b4e:	99 23       	and	r25, r25
    3b50:	a9 f0       	breq	.+42     	; 0x3b7c <__floatsisf+0x40>
    3b52:	f9 2f       	mov	r31, r25
    3b54:	96 e9       	ldi	r25, 0x96	; 150
    3b56:	bb 27       	eor	r27, r27
    3b58:	93 95       	inc	r25
    3b5a:	f6 95       	lsr	r31
    3b5c:	87 95       	ror	r24
    3b5e:	77 95       	ror	r23
    3b60:	67 95       	ror	r22
    3b62:	b7 95       	ror	r27
    3b64:	f1 11       	cpse	r31, r1
    3b66:	f8 cf       	rjmp	.-16     	; 0x3b58 <__floatsisf+0x1c>
    3b68:	fa f4       	brpl	.+62     	; 0x3ba8 <__floatsisf+0x6c>
    3b6a:	bb 0f       	add	r27, r27
    3b6c:	11 f4       	brne	.+4      	; 0x3b72 <__floatsisf+0x36>
    3b6e:	60 ff       	sbrs	r22, 0
    3b70:	1b c0       	rjmp	.+54     	; 0x3ba8 <__floatsisf+0x6c>
    3b72:	6f 5f       	subi	r22, 0xFF	; 255
    3b74:	7f 4f       	sbci	r23, 0xFF	; 255
    3b76:	8f 4f       	sbci	r24, 0xFF	; 255
    3b78:	9f 4f       	sbci	r25, 0xFF	; 255
    3b7a:	16 c0       	rjmp	.+44     	; 0x3ba8 <__floatsisf+0x6c>
    3b7c:	88 23       	and	r24, r24
    3b7e:	11 f0       	breq	.+4      	; 0x3b84 <__floatsisf+0x48>
    3b80:	96 e9       	ldi	r25, 0x96	; 150
    3b82:	11 c0       	rjmp	.+34     	; 0x3ba6 <__floatsisf+0x6a>
    3b84:	77 23       	and	r23, r23
    3b86:	21 f0       	breq	.+8      	; 0x3b90 <__floatsisf+0x54>
    3b88:	9e e8       	ldi	r25, 0x8E	; 142
    3b8a:	87 2f       	mov	r24, r23
    3b8c:	76 2f       	mov	r23, r22
    3b8e:	05 c0       	rjmp	.+10     	; 0x3b9a <__floatsisf+0x5e>
    3b90:	66 23       	and	r22, r22
    3b92:	71 f0       	breq	.+28     	; 0x3bb0 <__floatsisf+0x74>
    3b94:	96 e8       	ldi	r25, 0x86	; 134
    3b96:	86 2f       	mov	r24, r22
    3b98:	70 e0       	ldi	r23, 0x00	; 0
    3b9a:	60 e0       	ldi	r22, 0x00	; 0
    3b9c:	2a f0       	brmi	.+10     	; 0x3ba8 <__floatsisf+0x6c>
    3b9e:	9a 95       	dec	r25
    3ba0:	66 0f       	add	r22, r22
    3ba2:	77 1f       	adc	r23, r23
    3ba4:	88 1f       	adc	r24, r24
    3ba6:	da f7       	brpl	.-10     	; 0x3b9e <__floatsisf+0x62>
    3ba8:	88 0f       	add	r24, r24
    3baa:	96 95       	lsr	r25
    3bac:	87 95       	ror	r24
    3bae:	97 f9       	bld	r25, 7
    3bb0:	08 95       	ret

00003bb2 <__fp_inf>:
    3bb2:	97 f9       	bld	r25, 7
    3bb4:	9f 67       	ori	r25, 0x7F	; 127
    3bb6:	80 e8       	ldi	r24, 0x80	; 128
    3bb8:	70 e0       	ldi	r23, 0x00	; 0
    3bba:	60 e0       	ldi	r22, 0x00	; 0
    3bbc:	08 95       	ret

00003bbe <__fp_nan>:
    3bbe:	9f ef       	ldi	r25, 0xFF	; 255
    3bc0:	80 ec       	ldi	r24, 0xC0	; 192
    3bc2:	08 95       	ret

00003bc4 <__fp_pscA>:
    3bc4:	00 24       	eor	r0, r0
    3bc6:	0a 94       	dec	r0
    3bc8:	16 16       	cp	r1, r22
    3bca:	17 06       	cpc	r1, r23
    3bcc:	18 06       	cpc	r1, r24
    3bce:	09 06       	cpc	r0, r25
    3bd0:	08 95       	ret

00003bd2 <__fp_pscB>:
    3bd2:	00 24       	eor	r0, r0
    3bd4:	0a 94       	dec	r0
    3bd6:	12 16       	cp	r1, r18
    3bd8:	13 06       	cpc	r1, r19
    3bda:	14 06       	cpc	r1, r20
    3bdc:	05 06       	cpc	r0, r21
    3bde:	08 95       	ret

00003be0 <__fp_round>:
    3be0:	09 2e       	mov	r0, r25
    3be2:	03 94       	inc	r0
    3be4:	00 0c       	add	r0, r0
    3be6:	11 f4       	brne	.+4      	; 0x3bec <__fp_round+0xc>
    3be8:	88 23       	and	r24, r24
    3bea:	52 f0       	brmi	.+20     	; 0x3c00 <__fp_round+0x20>
    3bec:	bb 0f       	add	r27, r27
    3bee:	40 f4       	brcc	.+16     	; 0x3c00 <__fp_round+0x20>
    3bf0:	bf 2b       	or	r27, r31
    3bf2:	11 f4       	brne	.+4      	; 0x3bf8 <__fp_round+0x18>
    3bf4:	60 ff       	sbrs	r22, 0
    3bf6:	04 c0       	rjmp	.+8      	; 0x3c00 <__fp_round+0x20>
    3bf8:	6f 5f       	subi	r22, 0xFF	; 255
    3bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3c00:	08 95       	ret

00003c02 <__fp_split3>:
    3c02:	57 fd       	sbrc	r21, 7
    3c04:	90 58       	subi	r25, 0x80	; 128
    3c06:	44 0f       	add	r20, r20
    3c08:	55 1f       	adc	r21, r21
    3c0a:	59 f0       	breq	.+22     	; 0x3c22 <__fp_splitA+0x10>
    3c0c:	5f 3f       	cpi	r21, 0xFF	; 255
    3c0e:	71 f0       	breq	.+28     	; 0x3c2c <__fp_splitA+0x1a>
    3c10:	47 95       	ror	r20

00003c12 <__fp_splitA>:
    3c12:	88 0f       	add	r24, r24
    3c14:	97 fb       	bst	r25, 7
    3c16:	99 1f       	adc	r25, r25
    3c18:	61 f0       	breq	.+24     	; 0x3c32 <__fp_splitA+0x20>
    3c1a:	9f 3f       	cpi	r25, 0xFF	; 255
    3c1c:	79 f0       	breq	.+30     	; 0x3c3c <__fp_splitA+0x2a>
    3c1e:	87 95       	ror	r24
    3c20:	08 95       	ret
    3c22:	12 16       	cp	r1, r18
    3c24:	13 06       	cpc	r1, r19
    3c26:	14 06       	cpc	r1, r20
    3c28:	55 1f       	adc	r21, r21
    3c2a:	f2 cf       	rjmp	.-28     	; 0x3c10 <__fp_split3+0xe>
    3c2c:	46 95       	lsr	r20
    3c2e:	f1 df       	rcall	.-30     	; 0x3c12 <__fp_splitA>
    3c30:	08 c0       	rjmp	.+16     	; 0x3c42 <__fp_splitA+0x30>
    3c32:	16 16       	cp	r1, r22
    3c34:	17 06       	cpc	r1, r23
    3c36:	18 06       	cpc	r1, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	f1 cf       	rjmp	.-30     	; 0x3c1e <__fp_splitA+0xc>
    3c3c:	86 95       	lsr	r24
    3c3e:	71 05       	cpc	r23, r1
    3c40:	61 05       	cpc	r22, r1
    3c42:	08 94       	sec
    3c44:	08 95       	ret

00003c46 <__fp_zero>:
    3c46:	e8 94       	clt

00003c48 <__fp_szero>:
    3c48:	bb 27       	eor	r27, r27
    3c4a:	66 27       	eor	r22, r22
    3c4c:	77 27       	eor	r23, r23
    3c4e:	cb 01       	movw	r24, r22
    3c50:	97 f9       	bld	r25, 7
    3c52:	08 95       	ret

00003c54 <memcpy>:
    3c54:	fb 01       	movw	r30, r22
    3c56:	dc 01       	movw	r26, r24
    3c58:	02 c0       	rjmp	.+4      	; 0x3c5e <memcpy+0xa>
    3c5a:	01 90       	ld	r0, Z+
    3c5c:	0d 92       	st	X+, r0
    3c5e:	41 50       	subi	r20, 0x01	; 1
    3c60:	50 40       	sbci	r21, 0x00	; 0
    3c62:	d8 f7       	brcc	.-10     	; 0x3c5a <memcpy+0x6>
    3c64:	08 95       	ret

00003c66 <memset>:
    3c66:	dc 01       	movw	r26, r24
    3c68:	01 c0       	rjmp	.+2      	; 0x3c6c <memset+0x6>
    3c6a:	6d 93       	st	X+, r22
    3c6c:	41 50       	subi	r20, 0x01	; 1
    3c6e:	50 40       	sbci	r21, 0x00	; 0
    3c70:	e0 f7       	brcc	.-8      	; 0x3c6a <memset+0x4>
    3c72:	08 95       	ret

00003c74 <sprintf>:
    3c74:	ae e0       	ldi	r26, 0x0E	; 14
    3c76:	b0 e0       	ldi	r27, 0x00	; 0
    3c78:	e0 e4       	ldi	r30, 0x40	; 64
    3c7a:	fe e1       	ldi	r31, 0x1E	; 30
    3c7c:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <__prologue_saves__+0x1c>
    3c80:	0d 89       	ldd	r16, Y+21	; 0x15
    3c82:	1e 89       	ldd	r17, Y+22	; 0x16
    3c84:	86 e0       	ldi	r24, 0x06	; 6
    3c86:	8c 83       	std	Y+4, r24	; 0x04
    3c88:	1a 83       	std	Y+2, r17	; 0x02
    3c8a:	09 83       	std	Y+1, r16	; 0x01
    3c8c:	8f ef       	ldi	r24, 0xFF	; 255
    3c8e:	9f e7       	ldi	r25, 0x7F	; 127
    3c90:	9e 83       	std	Y+6, r25	; 0x06
    3c92:	8d 83       	std	Y+5, r24	; 0x05
    3c94:	ae 01       	movw	r20, r28
    3c96:	47 5e       	subi	r20, 0xE7	; 231
    3c98:	5f 4f       	sbci	r21, 0xFF	; 255
    3c9a:	6f 89       	ldd	r22, Y+23	; 0x17
    3c9c:	78 8d       	ldd	r23, Y+24	; 0x18
    3c9e:	ce 01       	movw	r24, r28
    3ca0:	01 96       	adiw	r24, 0x01	; 1
    3ca2:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <vfprintf>
    3ca6:	ef 81       	ldd	r30, Y+7	; 0x07
    3ca8:	f8 85       	ldd	r31, Y+8	; 0x08
    3caa:	e0 0f       	add	r30, r16
    3cac:	f1 1f       	adc	r31, r17
    3cae:	10 82       	st	Z, r1
    3cb0:	2e 96       	adiw	r28, 0x0e	; 14
    3cb2:	e4 e0       	ldi	r30, 0x04	; 4
    3cb4:	0c 94 17 21 	jmp	0x422e	; 0x422e <__epilogue_restores__+0x1c>

00003cb8 <vfprintf>:
    3cb8:	ab e0       	ldi	r26, 0x0B	; 11
    3cba:	b0 e0       	ldi	r27, 0x00	; 0
    3cbc:	e2 e6       	ldi	r30, 0x62	; 98
    3cbe:	fe e1       	ldi	r31, 0x1E	; 30
    3cc0:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__>
    3cc4:	6c 01       	movw	r12, r24
    3cc6:	7b 01       	movw	r14, r22
    3cc8:	8a 01       	movw	r16, r20
    3cca:	fc 01       	movw	r30, r24
    3ccc:	17 82       	std	Z+7, r1	; 0x07
    3cce:	16 82       	std	Z+6, r1	; 0x06
    3cd0:	83 81       	ldd	r24, Z+3	; 0x03
    3cd2:	81 ff       	sbrs	r24, 1
    3cd4:	cc c1       	rjmp	.+920    	; 0x406e <vfprintf+0x3b6>
    3cd6:	ce 01       	movw	r24, r28
    3cd8:	01 96       	adiw	r24, 0x01	; 1
    3cda:	3c 01       	movw	r6, r24
    3cdc:	f6 01       	movw	r30, r12
    3cde:	93 81       	ldd	r25, Z+3	; 0x03
    3ce0:	f7 01       	movw	r30, r14
    3ce2:	93 fd       	sbrc	r25, 3
    3ce4:	85 91       	lpm	r24, Z+
    3ce6:	93 ff       	sbrs	r25, 3
    3ce8:	81 91       	ld	r24, Z+
    3cea:	7f 01       	movw	r14, r30
    3cec:	88 23       	and	r24, r24
    3cee:	09 f4       	brne	.+2      	; 0x3cf2 <vfprintf+0x3a>
    3cf0:	ba c1       	rjmp	.+884    	; 0x4066 <vfprintf+0x3ae>
    3cf2:	85 32       	cpi	r24, 0x25	; 37
    3cf4:	39 f4       	brne	.+14     	; 0x3d04 <vfprintf+0x4c>
    3cf6:	93 fd       	sbrc	r25, 3
    3cf8:	85 91       	lpm	r24, Z+
    3cfa:	93 ff       	sbrs	r25, 3
    3cfc:	81 91       	ld	r24, Z+
    3cfe:	7f 01       	movw	r14, r30
    3d00:	85 32       	cpi	r24, 0x25	; 37
    3d02:	29 f4       	brne	.+10     	; 0x3d0e <vfprintf+0x56>
    3d04:	b6 01       	movw	r22, r12
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	0e 94 53 20 	call	0x40a6	; 0x40a6 <fputc>
    3d0c:	e7 cf       	rjmp	.-50     	; 0x3cdc <vfprintf+0x24>
    3d0e:	91 2c       	mov	r9, r1
    3d10:	21 2c       	mov	r2, r1
    3d12:	31 2c       	mov	r3, r1
    3d14:	ff e1       	ldi	r31, 0x1F	; 31
    3d16:	f3 15       	cp	r31, r3
    3d18:	d8 f0       	brcs	.+54     	; 0x3d50 <vfprintf+0x98>
    3d1a:	8b 32       	cpi	r24, 0x2B	; 43
    3d1c:	79 f0       	breq	.+30     	; 0x3d3c <vfprintf+0x84>
    3d1e:	38 f4       	brcc	.+14     	; 0x3d2e <vfprintf+0x76>
    3d20:	80 32       	cpi	r24, 0x20	; 32
    3d22:	79 f0       	breq	.+30     	; 0x3d42 <vfprintf+0x8a>
    3d24:	83 32       	cpi	r24, 0x23	; 35
    3d26:	a1 f4       	brne	.+40     	; 0x3d50 <vfprintf+0x98>
    3d28:	23 2d       	mov	r18, r3
    3d2a:	20 61       	ori	r18, 0x10	; 16
    3d2c:	1d c0       	rjmp	.+58     	; 0x3d68 <vfprintf+0xb0>
    3d2e:	8d 32       	cpi	r24, 0x2D	; 45
    3d30:	61 f0       	breq	.+24     	; 0x3d4a <vfprintf+0x92>
    3d32:	80 33       	cpi	r24, 0x30	; 48
    3d34:	69 f4       	brne	.+26     	; 0x3d50 <vfprintf+0x98>
    3d36:	23 2d       	mov	r18, r3
    3d38:	21 60       	ori	r18, 0x01	; 1
    3d3a:	16 c0       	rjmp	.+44     	; 0x3d68 <vfprintf+0xb0>
    3d3c:	83 2d       	mov	r24, r3
    3d3e:	82 60       	ori	r24, 0x02	; 2
    3d40:	38 2e       	mov	r3, r24
    3d42:	e3 2d       	mov	r30, r3
    3d44:	e4 60       	ori	r30, 0x04	; 4
    3d46:	3e 2e       	mov	r3, r30
    3d48:	2a c0       	rjmp	.+84     	; 0x3d9e <vfprintf+0xe6>
    3d4a:	f3 2d       	mov	r31, r3
    3d4c:	f8 60       	ori	r31, 0x08	; 8
    3d4e:	1d c0       	rjmp	.+58     	; 0x3d8a <vfprintf+0xd2>
    3d50:	37 fc       	sbrc	r3, 7
    3d52:	2d c0       	rjmp	.+90     	; 0x3dae <vfprintf+0xf6>
    3d54:	20 ed       	ldi	r18, 0xD0	; 208
    3d56:	28 0f       	add	r18, r24
    3d58:	2a 30       	cpi	r18, 0x0A	; 10
    3d5a:	40 f0       	brcs	.+16     	; 0x3d6c <vfprintf+0xb4>
    3d5c:	8e 32       	cpi	r24, 0x2E	; 46
    3d5e:	b9 f4       	brne	.+46     	; 0x3d8e <vfprintf+0xd6>
    3d60:	36 fc       	sbrc	r3, 6
    3d62:	81 c1       	rjmp	.+770    	; 0x4066 <vfprintf+0x3ae>
    3d64:	23 2d       	mov	r18, r3
    3d66:	20 64       	ori	r18, 0x40	; 64
    3d68:	32 2e       	mov	r3, r18
    3d6a:	19 c0       	rjmp	.+50     	; 0x3d9e <vfprintf+0xe6>
    3d6c:	36 fe       	sbrs	r3, 6
    3d6e:	06 c0       	rjmp	.+12     	; 0x3d7c <vfprintf+0xc4>
    3d70:	8a e0       	ldi	r24, 0x0A	; 10
    3d72:	98 9e       	mul	r9, r24
    3d74:	20 0d       	add	r18, r0
    3d76:	11 24       	eor	r1, r1
    3d78:	92 2e       	mov	r9, r18
    3d7a:	11 c0       	rjmp	.+34     	; 0x3d9e <vfprintf+0xe6>
    3d7c:	ea e0       	ldi	r30, 0x0A	; 10
    3d7e:	2e 9e       	mul	r2, r30
    3d80:	20 0d       	add	r18, r0
    3d82:	11 24       	eor	r1, r1
    3d84:	22 2e       	mov	r2, r18
    3d86:	f3 2d       	mov	r31, r3
    3d88:	f0 62       	ori	r31, 0x20	; 32
    3d8a:	3f 2e       	mov	r3, r31
    3d8c:	08 c0       	rjmp	.+16     	; 0x3d9e <vfprintf+0xe6>
    3d8e:	8c 36       	cpi	r24, 0x6C	; 108
    3d90:	21 f4       	brne	.+8      	; 0x3d9a <vfprintf+0xe2>
    3d92:	83 2d       	mov	r24, r3
    3d94:	80 68       	ori	r24, 0x80	; 128
    3d96:	38 2e       	mov	r3, r24
    3d98:	02 c0       	rjmp	.+4      	; 0x3d9e <vfprintf+0xe6>
    3d9a:	88 36       	cpi	r24, 0x68	; 104
    3d9c:	41 f4       	brne	.+16     	; 0x3dae <vfprintf+0xf6>
    3d9e:	f7 01       	movw	r30, r14
    3da0:	93 fd       	sbrc	r25, 3
    3da2:	85 91       	lpm	r24, Z+
    3da4:	93 ff       	sbrs	r25, 3
    3da6:	81 91       	ld	r24, Z+
    3da8:	7f 01       	movw	r14, r30
    3daa:	81 11       	cpse	r24, r1
    3dac:	b3 cf       	rjmp	.-154    	; 0x3d14 <vfprintf+0x5c>
    3dae:	98 2f       	mov	r25, r24
    3db0:	9f 7d       	andi	r25, 0xDF	; 223
    3db2:	95 54       	subi	r25, 0x45	; 69
    3db4:	93 30       	cpi	r25, 0x03	; 3
    3db6:	28 f4       	brcc	.+10     	; 0x3dc2 <vfprintf+0x10a>
    3db8:	0c 5f       	subi	r16, 0xFC	; 252
    3dba:	1f 4f       	sbci	r17, 0xFF	; 255
    3dbc:	9f e3       	ldi	r25, 0x3F	; 63
    3dbe:	99 83       	std	Y+1, r25	; 0x01
    3dc0:	0d c0       	rjmp	.+26     	; 0x3ddc <vfprintf+0x124>
    3dc2:	83 36       	cpi	r24, 0x63	; 99
    3dc4:	31 f0       	breq	.+12     	; 0x3dd2 <vfprintf+0x11a>
    3dc6:	83 37       	cpi	r24, 0x73	; 115
    3dc8:	71 f0       	breq	.+28     	; 0x3de6 <vfprintf+0x12e>
    3dca:	83 35       	cpi	r24, 0x53	; 83
    3dcc:	09 f0       	breq	.+2      	; 0x3dd0 <vfprintf+0x118>
    3dce:	59 c0       	rjmp	.+178    	; 0x3e82 <vfprintf+0x1ca>
    3dd0:	21 c0       	rjmp	.+66     	; 0x3e14 <vfprintf+0x15c>
    3dd2:	f8 01       	movw	r30, r16
    3dd4:	80 81       	ld	r24, Z
    3dd6:	89 83       	std	Y+1, r24	; 0x01
    3dd8:	0e 5f       	subi	r16, 0xFE	; 254
    3dda:	1f 4f       	sbci	r17, 0xFF	; 255
    3ddc:	88 24       	eor	r8, r8
    3dde:	83 94       	inc	r8
    3de0:	91 2c       	mov	r9, r1
    3de2:	53 01       	movw	r10, r6
    3de4:	13 c0       	rjmp	.+38     	; 0x3e0c <vfprintf+0x154>
    3de6:	28 01       	movw	r4, r16
    3de8:	f2 e0       	ldi	r31, 0x02	; 2
    3dea:	4f 0e       	add	r4, r31
    3dec:	51 1c       	adc	r5, r1
    3dee:	f8 01       	movw	r30, r16
    3df0:	a0 80       	ld	r10, Z
    3df2:	b1 80       	ldd	r11, Z+1	; 0x01
    3df4:	36 fe       	sbrs	r3, 6
    3df6:	03 c0       	rjmp	.+6      	; 0x3dfe <vfprintf+0x146>
    3df8:	69 2d       	mov	r22, r9
    3dfa:	70 e0       	ldi	r23, 0x00	; 0
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <vfprintf+0x14a>
    3dfe:	6f ef       	ldi	r22, 0xFF	; 255
    3e00:	7f ef       	ldi	r23, 0xFF	; 255
    3e02:	c5 01       	movw	r24, r10
    3e04:	0e 94 48 20 	call	0x4090	; 0x4090 <strnlen>
    3e08:	4c 01       	movw	r8, r24
    3e0a:	82 01       	movw	r16, r4
    3e0c:	f3 2d       	mov	r31, r3
    3e0e:	ff 77       	andi	r31, 0x7F	; 127
    3e10:	3f 2e       	mov	r3, r31
    3e12:	16 c0       	rjmp	.+44     	; 0x3e40 <vfprintf+0x188>
    3e14:	28 01       	movw	r4, r16
    3e16:	22 e0       	ldi	r18, 0x02	; 2
    3e18:	42 0e       	add	r4, r18
    3e1a:	51 1c       	adc	r5, r1
    3e1c:	f8 01       	movw	r30, r16
    3e1e:	a0 80       	ld	r10, Z
    3e20:	b1 80       	ldd	r11, Z+1	; 0x01
    3e22:	36 fe       	sbrs	r3, 6
    3e24:	03 c0       	rjmp	.+6      	; 0x3e2c <vfprintf+0x174>
    3e26:	69 2d       	mov	r22, r9
    3e28:	70 e0       	ldi	r23, 0x00	; 0
    3e2a:	02 c0       	rjmp	.+4      	; 0x3e30 <vfprintf+0x178>
    3e2c:	6f ef       	ldi	r22, 0xFF	; 255
    3e2e:	7f ef       	ldi	r23, 0xFF	; 255
    3e30:	c5 01       	movw	r24, r10
    3e32:	0e 94 3d 20 	call	0x407a	; 0x407a <strnlen_P>
    3e36:	4c 01       	movw	r8, r24
    3e38:	f3 2d       	mov	r31, r3
    3e3a:	f0 68       	ori	r31, 0x80	; 128
    3e3c:	3f 2e       	mov	r3, r31
    3e3e:	82 01       	movw	r16, r4
    3e40:	33 fc       	sbrc	r3, 3
    3e42:	1b c0       	rjmp	.+54     	; 0x3e7a <vfprintf+0x1c2>
    3e44:	82 2d       	mov	r24, r2
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	88 16       	cp	r8, r24
    3e4a:	99 06       	cpc	r9, r25
    3e4c:	b0 f4       	brcc	.+44     	; 0x3e7a <vfprintf+0x1c2>
    3e4e:	b6 01       	movw	r22, r12
    3e50:	80 e2       	ldi	r24, 0x20	; 32
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	0e 94 53 20 	call	0x40a6	; 0x40a6 <fputc>
    3e58:	2a 94       	dec	r2
    3e5a:	f4 cf       	rjmp	.-24     	; 0x3e44 <vfprintf+0x18c>
    3e5c:	f5 01       	movw	r30, r10
    3e5e:	37 fc       	sbrc	r3, 7
    3e60:	85 91       	lpm	r24, Z+
    3e62:	37 fe       	sbrs	r3, 7
    3e64:	81 91       	ld	r24, Z+
    3e66:	5f 01       	movw	r10, r30
    3e68:	b6 01       	movw	r22, r12
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	0e 94 53 20 	call	0x40a6	; 0x40a6 <fputc>
    3e70:	21 10       	cpse	r2, r1
    3e72:	2a 94       	dec	r2
    3e74:	21 e0       	ldi	r18, 0x01	; 1
    3e76:	82 1a       	sub	r8, r18
    3e78:	91 08       	sbc	r9, r1
    3e7a:	81 14       	cp	r8, r1
    3e7c:	91 04       	cpc	r9, r1
    3e7e:	71 f7       	brne	.-36     	; 0x3e5c <vfprintf+0x1a4>
    3e80:	e8 c0       	rjmp	.+464    	; 0x4052 <vfprintf+0x39a>
    3e82:	84 36       	cpi	r24, 0x64	; 100
    3e84:	11 f0       	breq	.+4      	; 0x3e8a <vfprintf+0x1d2>
    3e86:	89 36       	cpi	r24, 0x69	; 105
    3e88:	41 f5       	brne	.+80     	; 0x3eda <vfprintf+0x222>
    3e8a:	f8 01       	movw	r30, r16
    3e8c:	37 fe       	sbrs	r3, 7
    3e8e:	07 c0       	rjmp	.+14     	; 0x3e9e <vfprintf+0x1e6>
    3e90:	60 81       	ld	r22, Z
    3e92:	71 81       	ldd	r23, Z+1	; 0x01
    3e94:	82 81       	ldd	r24, Z+2	; 0x02
    3e96:	93 81       	ldd	r25, Z+3	; 0x03
    3e98:	0c 5f       	subi	r16, 0xFC	; 252
    3e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e9c:	08 c0       	rjmp	.+16     	; 0x3eae <vfprintf+0x1f6>
    3e9e:	60 81       	ld	r22, Z
    3ea0:	71 81       	ldd	r23, Z+1	; 0x01
    3ea2:	07 2e       	mov	r0, r23
    3ea4:	00 0c       	add	r0, r0
    3ea6:	88 0b       	sbc	r24, r24
    3ea8:	99 0b       	sbc	r25, r25
    3eaa:	0e 5f       	subi	r16, 0xFE	; 254
    3eac:	1f 4f       	sbci	r17, 0xFF	; 255
    3eae:	f3 2d       	mov	r31, r3
    3eb0:	ff 76       	andi	r31, 0x6F	; 111
    3eb2:	3f 2e       	mov	r3, r31
    3eb4:	97 ff       	sbrs	r25, 7
    3eb6:	09 c0       	rjmp	.+18     	; 0x3eca <vfprintf+0x212>
    3eb8:	90 95       	com	r25
    3eba:	80 95       	com	r24
    3ebc:	70 95       	com	r23
    3ebe:	61 95       	neg	r22
    3ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec6:	f0 68       	ori	r31, 0x80	; 128
    3ec8:	3f 2e       	mov	r3, r31
    3eca:	2a e0       	ldi	r18, 0x0A	; 10
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	a3 01       	movw	r20, r6
    3ed0:	0e 94 8f 20 	call	0x411e	; 0x411e <__ultoa_invert>
    3ed4:	88 2e       	mov	r8, r24
    3ed6:	86 18       	sub	r8, r6
    3ed8:	45 c0       	rjmp	.+138    	; 0x3f64 <vfprintf+0x2ac>
    3eda:	85 37       	cpi	r24, 0x75	; 117
    3edc:	31 f4       	brne	.+12     	; 0x3eea <vfprintf+0x232>
    3ede:	23 2d       	mov	r18, r3
    3ee0:	2f 7e       	andi	r18, 0xEF	; 239
    3ee2:	b2 2e       	mov	r11, r18
    3ee4:	2a e0       	ldi	r18, 0x0A	; 10
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	25 c0       	rjmp	.+74     	; 0x3f34 <vfprintf+0x27c>
    3eea:	93 2d       	mov	r25, r3
    3eec:	99 7f       	andi	r25, 0xF9	; 249
    3eee:	b9 2e       	mov	r11, r25
    3ef0:	8f 36       	cpi	r24, 0x6F	; 111
    3ef2:	c1 f0       	breq	.+48     	; 0x3f24 <vfprintf+0x26c>
    3ef4:	18 f4       	brcc	.+6      	; 0x3efc <vfprintf+0x244>
    3ef6:	88 35       	cpi	r24, 0x58	; 88
    3ef8:	79 f0       	breq	.+30     	; 0x3f18 <vfprintf+0x260>
    3efa:	b5 c0       	rjmp	.+362    	; 0x4066 <vfprintf+0x3ae>
    3efc:	80 37       	cpi	r24, 0x70	; 112
    3efe:	19 f0       	breq	.+6      	; 0x3f06 <vfprintf+0x24e>
    3f00:	88 37       	cpi	r24, 0x78	; 120
    3f02:	21 f0       	breq	.+8      	; 0x3f0c <vfprintf+0x254>
    3f04:	b0 c0       	rjmp	.+352    	; 0x4066 <vfprintf+0x3ae>
    3f06:	e9 2f       	mov	r30, r25
    3f08:	e0 61       	ori	r30, 0x10	; 16
    3f0a:	be 2e       	mov	r11, r30
    3f0c:	b4 fe       	sbrs	r11, 4
    3f0e:	0d c0       	rjmp	.+26     	; 0x3f2a <vfprintf+0x272>
    3f10:	fb 2d       	mov	r31, r11
    3f12:	f4 60       	ori	r31, 0x04	; 4
    3f14:	bf 2e       	mov	r11, r31
    3f16:	09 c0       	rjmp	.+18     	; 0x3f2a <vfprintf+0x272>
    3f18:	34 fe       	sbrs	r3, 4
    3f1a:	0a c0       	rjmp	.+20     	; 0x3f30 <vfprintf+0x278>
    3f1c:	29 2f       	mov	r18, r25
    3f1e:	26 60       	ori	r18, 0x06	; 6
    3f20:	b2 2e       	mov	r11, r18
    3f22:	06 c0       	rjmp	.+12     	; 0x3f30 <vfprintf+0x278>
    3f24:	28 e0       	ldi	r18, 0x08	; 8
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	05 c0       	rjmp	.+10     	; 0x3f34 <vfprintf+0x27c>
    3f2a:	20 e1       	ldi	r18, 0x10	; 16
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	02 c0       	rjmp	.+4      	; 0x3f34 <vfprintf+0x27c>
    3f30:	20 e1       	ldi	r18, 0x10	; 16
    3f32:	32 e0       	ldi	r19, 0x02	; 2
    3f34:	f8 01       	movw	r30, r16
    3f36:	b7 fe       	sbrs	r11, 7
    3f38:	07 c0       	rjmp	.+14     	; 0x3f48 <vfprintf+0x290>
    3f3a:	60 81       	ld	r22, Z
    3f3c:	71 81       	ldd	r23, Z+1	; 0x01
    3f3e:	82 81       	ldd	r24, Z+2	; 0x02
    3f40:	93 81       	ldd	r25, Z+3	; 0x03
    3f42:	0c 5f       	subi	r16, 0xFC	; 252
    3f44:	1f 4f       	sbci	r17, 0xFF	; 255
    3f46:	06 c0       	rjmp	.+12     	; 0x3f54 <vfprintf+0x29c>
    3f48:	60 81       	ld	r22, Z
    3f4a:	71 81       	ldd	r23, Z+1	; 0x01
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	0e 5f       	subi	r16, 0xFE	; 254
    3f52:	1f 4f       	sbci	r17, 0xFF	; 255
    3f54:	a3 01       	movw	r20, r6
    3f56:	0e 94 8f 20 	call	0x411e	; 0x411e <__ultoa_invert>
    3f5a:	88 2e       	mov	r8, r24
    3f5c:	86 18       	sub	r8, r6
    3f5e:	fb 2d       	mov	r31, r11
    3f60:	ff 77       	andi	r31, 0x7F	; 127
    3f62:	3f 2e       	mov	r3, r31
    3f64:	36 fe       	sbrs	r3, 6
    3f66:	0d c0       	rjmp	.+26     	; 0x3f82 <vfprintf+0x2ca>
    3f68:	23 2d       	mov	r18, r3
    3f6a:	2e 7f       	andi	r18, 0xFE	; 254
    3f6c:	a2 2e       	mov	r10, r18
    3f6e:	89 14       	cp	r8, r9
    3f70:	58 f4       	brcc	.+22     	; 0x3f88 <vfprintf+0x2d0>
    3f72:	34 fe       	sbrs	r3, 4
    3f74:	0b c0       	rjmp	.+22     	; 0x3f8c <vfprintf+0x2d4>
    3f76:	32 fc       	sbrc	r3, 2
    3f78:	09 c0       	rjmp	.+18     	; 0x3f8c <vfprintf+0x2d4>
    3f7a:	83 2d       	mov	r24, r3
    3f7c:	8e 7e       	andi	r24, 0xEE	; 238
    3f7e:	a8 2e       	mov	r10, r24
    3f80:	05 c0       	rjmp	.+10     	; 0x3f8c <vfprintf+0x2d4>
    3f82:	b8 2c       	mov	r11, r8
    3f84:	a3 2c       	mov	r10, r3
    3f86:	03 c0       	rjmp	.+6      	; 0x3f8e <vfprintf+0x2d6>
    3f88:	b8 2c       	mov	r11, r8
    3f8a:	01 c0       	rjmp	.+2      	; 0x3f8e <vfprintf+0x2d6>
    3f8c:	b9 2c       	mov	r11, r9
    3f8e:	a4 fe       	sbrs	r10, 4
    3f90:	0f c0       	rjmp	.+30     	; 0x3fb0 <vfprintf+0x2f8>
    3f92:	fe 01       	movw	r30, r28
    3f94:	e8 0d       	add	r30, r8
    3f96:	f1 1d       	adc	r31, r1
    3f98:	80 81       	ld	r24, Z
    3f9a:	80 33       	cpi	r24, 0x30	; 48
    3f9c:	21 f4       	brne	.+8      	; 0x3fa6 <vfprintf+0x2ee>
    3f9e:	9a 2d       	mov	r25, r10
    3fa0:	99 7e       	andi	r25, 0xE9	; 233
    3fa2:	a9 2e       	mov	r10, r25
    3fa4:	09 c0       	rjmp	.+18     	; 0x3fb8 <vfprintf+0x300>
    3fa6:	a2 fe       	sbrs	r10, 2
    3fa8:	06 c0       	rjmp	.+12     	; 0x3fb6 <vfprintf+0x2fe>
    3faa:	b3 94       	inc	r11
    3fac:	b3 94       	inc	r11
    3fae:	04 c0       	rjmp	.+8      	; 0x3fb8 <vfprintf+0x300>
    3fb0:	8a 2d       	mov	r24, r10
    3fb2:	86 78       	andi	r24, 0x86	; 134
    3fb4:	09 f0       	breq	.+2      	; 0x3fb8 <vfprintf+0x300>
    3fb6:	b3 94       	inc	r11
    3fb8:	a3 fc       	sbrc	r10, 3
    3fba:	11 c0       	rjmp	.+34     	; 0x3fde <vfprintf+0x326>
    3fbc:	a0 fe       	sbrs	r10, 0
    3fbe:	06 c0       	rjmp	.+12     	; 0x3fcc <vfprintf+0x314>
    3fc0:	b2 14       	cp	r11, r2
    3fc2:	88 f4       	brcc	.+34     	; 0x3fe6 <vfprintf+0x32e>
    3fc4:	28 0c       	add	r2, r8
    3fc6:	92 2c       	mov	r9, r2
    3fc8:	9b 18       	sub	r9, r11
    3fca:	0e c0       	rjmp	.+28     	; 0x3fe8 <vfprintf+0x330>
    3fcc:	b2 14       	cp	r11, r2
    3fce:	60 f4       	brcc	.+24     	; 0x3fe8 <vfprintf+0x330>
    3fd0:	b6 01       	movw	r22, r12
    3fd2:	80 e2       	ldi	r24, 0x20	; 32
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	0e 94 53 20 	call	0x40a6	; 0x40a6 <fputc>
    3fda:	b3 94       	inc	r11
    3fdc:	f7 cf       	rjmp	.-18     	; 0x3fcc <vfprintf+0x314>
    3fde:	b2 14       	cp	r11, r2
    3fe0:	18 f4       	brcc	.+6      	; 0x3fe8 <vfprintf+0x330>
    3fe2:	2b 18       	sub	r2, r11
    3fe4:	02 c0       	rjmp	.+4      	; 0x3fea <vfprintf+0x332>
    3fe6:	98 2c       	mov	r9, r8
    3fe8:	21 2c       	mov	r2, r1
    3fea:	a4 fe       	sbrs	r10, 4
    3fec:	10 c0       	rjmp	.+32     	; 0x400e <vfprintf+0x356>
    3fee:	b6 01       	movw	r22, r12
    3ff0:	80 e3       	ldi	r24, 0x30	; 48
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	0e 94 53 20 	call	0x40a6	; 0x40a6 <fputc>
    3ff8:	a2 fe       	sbrs	r10, 2
    3ffa:	17 c0       	rjmp	.+46     	; 0x402a <vfprintf+0x372>
    3ffc:	a1 fc       	sbrc	r10, 1
    3ffe:	03 c0       	rjmp	.+6      	; 0x4006 <vfprintf+0x34e>
    4000:	88 e7       	ldi	r24, 0x78	; 120
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	02 c0       	rjmp	.+4      	; 0x400a <vfprintf+0x352>
    4006:	88 e5       	ldi	r24, 0x58	; 88
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	b6 01       	movw	r22, r12
    400c:	0c c0       	rjmp	.+24     	; 0x4026 <vfprintf+0x36e>
    400e:	8a 2d       	mov	r24, r10
    4010:	86 78       	andi	r24, 0x86	; 134
    4012:	59 f0       	breq	.+22     	; 0x402a <vfprintf+0x372>
    4014:	a1 fe       	sbrs	r10, 1
    4016:	02 c0       	rjmp	.+4      	; 0x401c <vfprintf+0x364>
    4018:	8b e2       	ldi	r24, 0x2B	; 43
    401a:	01 c0       	rjmp	.+2      	; 0x401e <vfprintf+0x366>
    401c:	80 e2       	ldi	r24, 0x20	; 32
    401e:	a7 fc       	sbrc	r10, 7
    4020:	8d e2       	ldi	r24, 0x2D	; 45
    4022:	b6 01       	movw	r22, r12
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	0e 94 53 20 	call	0x40a6	; 0x40a6 <fputc>
    402a:	89 14       	cp	r8, r9
    402c:	38 f4       	brcc	.+14     	; 0x403c <vfprintf+0x384>
    402e:	b6 01       	movw	r22, r12
    4030:	80 e3       	ldi	r24, 0x30	; 48
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	0e 94 53 20 	call	0x40a6	; 0x40a6 <fputc>
    4038:	9a 94       	dec	r9
    403a:	f7 cf       	rjmp	.-18     	; 0x402a <vfprintf+0x372>
    403c:	8a 94       	dec	r8
    403e:	f3 01       	movw	r30, r6
    4040:	e8 0d       	add	r30, r8
    4042:	f1 1d       	adc	r31, r1
    4044:	80 81       	ld	r24, Z
    4046:	b6 01       	movw	r22, r12
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0e 94 53 20 	call	0x40a6	; 0x40a6 <fputc>
    404e:	81 10       	cpse	r8, r1
    4050:	f5 cf       	rjmp	.-22     	; 0x403c <vfprintf+0x384>
    4052:	22 20       	and	r2, r2
    4054:	09 f4       	brne	.+2      	; 0x4058 <vfprintf+0x3a0>
    4056:	42 ce       	rjmp	.-892    	; 0x3cdc <vfprintf+0x24>
    4058:	b6 01       	movw	r22, r12
    405a:	80 e2       	ldi	r24, 0x20	; 32
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	0e 94 53 20 	call	0x40a6	; 0x40a6 <fputc>
    4062:	2a 94       	dec	r2
    4064:	f6 cf       	rjmp	.-20     	; 0x4052 <vfprintf+0x39a>
    4066:	f6 01       	movw	r30, r12
    4068:	86 81       	ldd	r24, Z+6	; 0x06
    406a:	97 81       	ldd	r25, Z+7	; 0x07
    406c:	02 c0       	rjmp	.+4      	; 0x4072 <vfprintf+0x3ba>
    406e:	8f ef       	ldi	r24, 0xFF	; 255
    4070:	9f ef       	ldi	r25, 0xFF	; 255
    4072:	2b 96       	adiw	r28, 0x0b	; 11
    4074:	e2 e1       	ldi	r30, 0x12	; 18
    4076:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__>

0000407a <strnlen_P>:
    407a:	fc 01       	movw	r30, r24
    407c:	05 90       	lpm	r0, Z+
    407e:	61 50       	subi	r22, 0x01	; 1
    4080:	70 40       	sbci	r23, 0x00	; 0
    4082:	01 10       	cpse	r0, r1
    4084:	d8 f7       	brcc	.-10     	; 0x407c <strnlen_P+0x2>
    4086:	80 95       	com	r24
    4088:	90 95       	com	r25
    408a:	8e 0f       	add	r24, r30
    408c:	9f 1f       	adc	r25, r31
    408e:	08 95       	ret

00004090 <strnlen>:
    4090:	fc 01       	movw	r30, r24
    4092:	61 50       	subi	r22, 0x01	; 1
    4094:	70 40       	sbci	r23, 0x00	; 0
    4096:	01 90       	ld	r0, Z+
    4098:	01 10       	cpse	r0, r1
    409a:	d8 f7       	brcc	.-10     	; 0x4092 <strnlen+0x2>
    409c:	80 95       	com	r24
    409e:	90 95       	com	r25
    40a0:	8e 0f       	add	r24, r30
    40a2:	9f 1f       	adc	r25, r31
    40a4:	08 95       	ret

000040a6 <fputc>:
    40a6:	0f 93       	push	r16
    40a8:	1f 93       	push	r17
    40aa:	cf 93       	push	r28
    40ac:	df 93       	push	r29
    40ae:	fb 01       	movw	r30, r22
    40b0:	23 81       	ldd	r18, Z+3	; 0x03
    40b2:	21 fd       	sbrc	r18, 1
    40b4:	03 c0       	rjmp	.+6      	; 0x40bc <fputc+0x16>
    40b6:	8f ef       	ldi	r24, 0xFF	; 255
    40b8:	9f ef       	ldi	r25, 0xFF	; 255
    40ba:	2c c0       	rjmp	.+88     	; 0x4114 <fputc+0x6e>
    40bc:	22 ff       	sbrs	r18, 2
    40be:	16 c0       	rjmp	.+44     	; 0x40ec <fputc+0x46>
    40c0:	46 81       	ldd	r20, Z+6	; 0x06
    40c2:	57 81       	ldd	r21, Z+7	; 0x07
    40c4:	24 81       	ldd	r18, Z+4	; 0x04
    40c6:	35 81       	ldd	r19, Z+5	; 0x05
    40c8:	42 17       	cp	r20, r18
    40ca:	53 07       	cpc	r21, r19
    40cc:	44 f4       	brge	.+16     	; 0x40de <fputc+0x38>
    40ce:	a0 81       	ld	r26, Z
    40d0:	b1 81       	ldd	r27, Z+1	; 0x01
    40d2:	9d 01       	movw	r18, r26
    40d4:	2f 5f       	subi	r18, 0xFF	; 255
    40d6:	3f 4f       	sbci	r19, 0xFF	; 255
    40d8:	31 83       	std	Z+1, r19	; 0x01
    40da:	20 83       	st	Z, r18
    40dc:	8c 93       	st	X, r24
    40de:	26 81       	ldd	r18, Z+6	; 0x06
    40e0:	37 81       	ldd	r19, Z+7	; 0x07
    40e2:	2f 5f       	subi	r18, 0xFF	; 255
    40e4:	3f 4f       	sbci	r19, 0xFF	; 255
    40e6:	37 83       	std	Z+7, r19	; 0x07
    40e8:	26 83       	std	Z+6, r18	; 0x06
    40ea:	14 c0       	rjmp	.+40     	; 0x4114 <fputc+0x6e>
    40ec:	8b 01       	movw	r16, r22
    40ee:	ec 01       	movw	r28, r24
    40f0:	fb 01       	movw	r30, r22
    40f2:	00 84       	ldd	r0, Z+8	; 0x08
    40f4:	f1 85       	ldd	r31, Z+9	; 0x09
    40f6:	e0 2d       	mov	r30, r0
    40f8:	09 95       	icall
    40fa:	89 2b       	or	r24, r25
    40fc:	e1 f6       	brne	.-72     	; 0x40b6 <fputc+0x10>
    40fe:	d8 01       	movw	r26, r16
    4100:	16 96       	adiw	r26, 0x06	; 6
    4102:	8d 91       	ld	r24, X+
    4104:	9c 91       	ld	r25, X
    4106:	17 97       	sbiw	r26, 0x07	; 7
    4108:	01 96       	adiw	r24, 0x01	; 1
    410a:	17 96       	adiw	r26, 0x07	; 7
    410c:	9c 93       	st	X, r25
    410e:	8e 93       	st	-X, r24
    4110:	16 97       	sbiw	r26, 0x06	; 6
    4112:	ce 01       	movw	r24, r28
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	1f 91       	pop	r17
    411a:	0f 91       	pop	r16
    411c:	08 95       	ret

0000411e <__ultoa_invert>:
    411e:	fa 01       	movw	r30, r20
    4120:	aa 27       	eor	r26, r26
    4122:	28 30       	cpi	r18, 0x08	; 8
    4124:	51 f1       	breq	.+84     	; 0x417a <__ultoa_invert+0x5c>
    4126:	20 31       	cpi	r18, 0x10	; 16
    4128:	81 f1       	breq	.+96     	; 0x418a <__ultoa_invert+0x6c>
    412a:	e8 94       	clt
    412c:	6f 93       	push	r22
    412e:	6e 7f       	andi	r22, 0xFE	; 254
    4130:	6e 5f       	subi	r22, 0xFE	; 254
    4132:	7f 4f       	sbci	r23, 0xFF	; 255
    4134:	8f 4f       	sbci	r24, 0xFF	; 255
    4136:	9f 4f       	sbci	r25, 0xFF	; 255
    4138:	af 4f       	sbci	r26, 0xFF	; 255
    413a:	b1 e0       	ldi	r27, 0x01	; 1
    413c:	3e d0       	rcall	.+124    	; 0x41ba <__ultoa_invert+0x9c>
    413e:	b4 e0       	ldi	r27, 0x04	; 4
    4140:	3c d0       	rcall	.+120    	; 0x41ba <__ultoa_invert+0x9c>
    4142:	67 0f       	add	r22, r23
    4144:	78 1f       	adc	r23, r24
    4146:	89 1f       	adc	r24, r25
    4148:	9a 1f       	adc	r25, r26
    414a:	a1 1d       	adc	r26, r1
    414c:	68 0f       	add	r22, r24
    414e:	79 1f       	adc	r23, r25
    4150:	8a 1f       	adc	r24, r26
    4152:	91 1d       	adc	r25, r1
    4154:	a1 1d       	adc	r26, r1
    4156:	6a 0f       	add	r22, r26
    4158:	71 1d       	adc	r23, r1
    415a:	81 1d       	adc	r24, r1
    415c:	91 1d       	adc	r25, r1
    415e:	a1 1d       	adc	r26, r1
    4160:	20 d0       	rcall	.+64     	; 0x41a2 <__ultoa_invert+0x84>
    4162:	09 f4       	brne	.+2      	; 0x4166 <__ultoa_invert+0x48>
    4164:	68 94       	set
    4166:	3f 91       	pop	r19
    4168:	2a e0       	ldi	r18, 0x0A	; 10
    416a:	26 9f       	mul	r18, r22
    416c:	11 24       	eor	r1, r1
    416e:	30 19       	sub	r19, r0
    4170:	30 5d       	subi	r19, 0xD0	; 208
    4172:	31 93       	st	Z+, r19
    4174:	de f6       	brtc	.-74     	; 0x412c <__ultoa_invert+0xe>
    4176:	cf 01       	movw	r24, r30
    4178:	08 95       	ret
    417a:	46 2f       	mov	r20, r22
    417c:	47 70       	andi	r20, 0x07	; 7
    417e:	40 5d       	subi	r20, 0xD0	; 208
    4180:	41 93       	st	Z+, r20
    4182:	b3 e0       	ldi	r27, 0x03	; 3
    4184:	0f d0       	rcall	.+30     	; 0x41a4 <__ultoa_invert+0x86>
    4186:	c9 f7       	brne	.-14     	; 0x417a <__ultoa_invert+0x5c>
    4188:	f6 cf       	rjmp	.-20     	; 0x4176 <__ultoa_invert+0x58>
    418a:	46 2f       	mov	r20, r22
    418c:	4f 70       	andi	r20, 0x0F	; 15
    418e:	40 5d       	subi	r20, 0xD0	; 208
    4190:	4a 33       	cpi	r20, 0x3A	; 58
    4192:	18 f0       	brcs	.+6      	; 0x419a <__ultoa_invert+0x7c>
    4194:	49 5d       	subi	r20, 0xD9	; 217
    4196:	31 fd       	sbrc	r19, 1
    4198:	40 52       	subi	r20, 0x20	; 32
    419a:	41 93       	st	Z+, r20
    419c:	02 d0       	rcall	.+4      	; 0x41a2 <__ultoa_invert+0x84>
    419e:	a9 f7       	brne	.-22     	; 0x418a <__ultoa_invert+0x6c>
    41a0:	ea cf       	rjmp	.-44     	; 0x4176 <__ultoa_invert+0x58>
    41a2:	b4 e0       	ldi	r27, 0x04	; 4
    41a4:	a6 95       	lsr	r26
    41a6:	97 95       	ror	r25
    41a8:	87 95       	ror	r24
    41aa:	77 95       	ror	r23
    41ac:	67 95       	ror	r22
    41ae:	ba 95       	dec	r27
    41b0:	c9 f7       	brne	.-14     	; 0x41a4 <__ultoa_invert+0x86>
    41b2:	00 97       	sbiw	r24, 0x00	; 0
    41b4:	61 05       	cpc	r22, r1
    41b6:	71 05       	cpc	r23, r1
    41b8:	08 95       	ret
    41ba:	9b 01       	movw	r18, r22
    41bc:	ac 01       	movw	r20, r24
    41be:	0a 2e       	mov	r0, r26
    41c0:	06 94       	lsr	r0
    41c2:	57 95       	ror	r21
    41c4:	47 95       	ror	r20
    41c6:	37 95       	ror	r19
    41c8:	27 95       	ror	r18
    41ca:	ba 95       	dec	r27
    41cc:	c9 f7       	brne	.-14     	; 0x41c0 <__ultoa_invert+0xa2>
    41ce:	62 0f       	add	r22, r18
    41d0:	73 1f       	adc	r23, r19
    41d2:	84 1f       	adc	r24, r20
    41d4:	95 1f       	adc	r25, r21
    41d6:	a0 1d       	adc	r26, r0
    41d8:	08 95       	ret

000041da <__prologue_saves__>:
    41da:	2f 92       	push	r2
    41dc:	3f 92       	push	r3
    41de:	4f 92       	push	r4
    41e0:	5f 92       	push	r5
    41e2:	6f 92       	push	r6
    41e4:	7f 92       	push	r7
    41e6:	8f 92       	push	r8
    41e8:	9f 92       	push	r9
    41ea:	af 92       	push	r10
    41ec:	bf 92       	push	r11
    41ee:	cf 92       	push	r12
    41f0:	df 92       	push	r13
    41f2:	ef 92       	push	r14
    41f4:	ff 92       	push	r15
    41f6:	0f 93       	push	r16
    41f8:	1f 93       	push	r17
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    41fe:	cd b7       	in	r28, 0x3d	; 61
    4200:	de b7       	in	r29, 0x3e	; 62
    4202:	ca 1b       	sub	r28, r26
    4204:	db 0b       	sbc	r29, r27
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	f8 94       	cli
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	cd bf       	out	0x3d, r28	; 61
    4210:	09 94       	ijmp

00004212 <__epilogue_restores__>:
    4212:	2a 88       	ldd	r2, Y+18	; 0x12
    4214:	39 88       	ldd	r3, Y+17	; 0x11
    4216:	48 88       	ldd	r4, Y+16	; 0x10
    4218:	5f 84       	ldd	r5, Y+15	; 0x0f
    421a:	6e 84       	ldd	r6, Y+14	; 0x0e
    421c:	7d 84       	ldd	r7, Y+13	; 0x0d
    421e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4220:	9b 84       	ldd	r9, Y+11	; 0x0b
    4222:	aa 84       	ldd	r10, Y+10	; 0x0a
    4224:	b9 84       	ldd	r11, Y+9	; 0x09
    4226:	c8 84       	ldd	r12, Y+8	; 0x08
    4228:	df 80       	ldd	r13, Y+7	; 0x07
    422a:	ee 80       	ldd	r14, Y+6	; 0x06
    422c:	fd 80       	ldd	r15, Y+5	; 0x05
    422e:	0c 81       	ldd	r16, Y+4	; 0x04
    4230:	1b 81       	ldd	r17, Y+3	; 0x03
    4232:	aa 81       	ldd	r26, Y+2	; 0x02
    4234:	b9 81       	ldd	r27, Y+1	; 0x01
    4236:	ce 0f       	add	r28, r30
    4238:	d1 1d       	adc	r29, r1
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	f8 94       	cli
    423e:	de bf       	out	0x3e, r29	; 62
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	cd bf       	out	0x3d, r28	; 61
    4244:	ed 01       	movw	r28, r26
    4246:	08 95       	ret

00004248 <_exit>:
    4248:	f8 94       	cli

0000424a <__stop_program>:
    424a:	ff cf       	rjmp	.-2      	; 0x424a <__stop_program>
