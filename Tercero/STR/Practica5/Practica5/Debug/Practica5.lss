
Practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000762  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a9  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  0000117f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000396  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014a  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  88:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <digitalWrite>:
#include <avr/interrupt.h>

static uint8_t toggle = 0;

void digitalWrite(unsigned char data){
	PORTB = ((data & 0x01) << PINB2)  | (((data & 0x04) >> 2) << PINB0);
  90:	28 2f       	mov	r18, r24
  92:	21 70       	andi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	a9 01       	movw	r20, r18
  98:	44 0f       	add	r20, r20
  9a:	55 1f       	adc	r21, r21
  9c:	44 0f       	add	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	98 2f       	mov	r25, r24
  a2:	94 70       	andi	r25, 0x04	; 4
  a4:	29 2f       	mov	r18, r25
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	35 95       	asr	r19
  aa:	27 95       	ror	r18
  ac:	35 95       	asr	r19
  ae:	27 95       	ror	r18
  b0:	24 2b       	or	r18, r20
  b2:	25 b9       	out	0x05, r18	; 5
	PORTD = (((data & 0x10) >> 4) << PIND5) | (((data & 0x08) >> 3) << PIND7);
  b4:	28 2f       	mov	r18, r24
  b6:	20 71       	andi	r18, 0x10	; 16
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	35 95       	asr	r19
  bc:	27 95       	ror	r18
  be:	35 95       	asr	r19
  c0:	27 95       	ror	r18
  c2:	35 95       	asr	r19
  c4:	27 95       	ror	r18
  c6:	35 95       	asr	r19
  c8:	27 95       	ror	r18
  ca:	a9 01       	movw	r20, r18
  cc:	44 0f       	add	r20, r20
  ce:	55 1f       	adc	r21, r21
  d0:	42 95       	swap	r20
  d2:	52 95       	swap	r21
  d4:	50 7f       	andi	r21, 0xF0	; 240
  d6:	54 27       	eor	r21, r20
  d8:	40 7f       	andi	r20, 0xF0	; 240
  da:	54 27       	eor	r21, r20
  dc:	98 2f       	mov	r25, r24
  de:	98 70       	andi	r25, 0x08	; 8
  e0:	29 2f       	mov	r18, r25
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	35 95       	asr	r19
  e6:	27 95       	ror	r18
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	35 95       	asr	r19
  ee:	27 95       	ror	r18
  f0:	36 95       	lsr	r19
  f2:	32 2f       	mov	r19, r18
  f4:	22 27       	eor	r18, r18
  f6:	37 95       	ror	r19
  f8:	27 95       	ror	r18
  fa:	24 2b       	or	r18, r20
  fc:	2b b9       	out	0x0b, r18	; 11
	PORTC = (((data & 0x80) >> 7) << PINC3) | (((data & 0x40) >> 6) << PINC4);
  fe:	28 2f       	mov	r18, r24
 100:	22 1f       	adc	r18, r18
 102:	22 27       	eor	r18, r18
 104:	22 1f       	adc	r18, r18
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	98 2f       	mov	r25, r24
 116:	90 74       	andi	r25, 0x40	; 64
 118:	89 2f       	mov	r24, r25
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	08 2e       	mov	r0, r24
 11e:	89 2f       	mov	r24, r25
 120:	00 0c       	add	r0, r0
 122:	88 1f       	adc	r24, r24
 124:	99 0b       	sbc	r25, r25
 126:	00 0c       	add	r0, r0
 128:	88 1f       	adc	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	82 95       	swap	r24
 12e:	92 95       	swap	r25
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	98 27       	eor	r25, r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	98 27       	eor	r25, r24
 138:	82 2b       	or	r24, r18
 13a:	88 b9       	out	0x08, r24	; 8
 13c:	08 95       	ret

0000013e <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB0);
 13e:	84 b1       	in	r24, 0x04	; 4
 140:	85 60       	ori	r24, 0x05	; 5
 142:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 144:	87 b1       	in	r24, 0x07	; 7
 146:	88 61       	ori	r24, 0x18	; 24
 148:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND5) | (1 << PIND7);
 14a:	8a b1       	in	r24, 0x0a	; 10
 14c:	80 6a       	ori	r24, 0xA0	; 160
 14e:	8a b9       	out	0x0a, r24	; 10
 150:	08 95       	ret

00000152 <initTimers>:
}

void initTimers(){
	//Timer 0 en modo CTC usando la señal generada por la pwm como reloj.
	TCCR0A = (1 << WGM01);
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS02) | (1 << CS01) | (1 << CS00);
 156:	97 e0       	ldi	r25, 0x07	; 7
 158:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1 << OCIE0A);
 15a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = 5; 
 15e:	95 e0       	ldi	r25, 0x05	; 5
 160:	97 bd       	out	0x27, r25	; 39
	 
	
	//Timer 1 en modo FastPWM, non inverted con canal A, preescalado de 8 y carga del valor 40000
	//Se carga por defecto 1ms
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 162:	92 e8       	ldi	r25, 0x82	; 130
 164:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 168:	9a e1       	ldi	r25, 0x1A	; 26
 16a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << OCIE1A);
 16e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	ICR1H = (40000 >> 8) & 0xFF;
 172:	8c e9       	ldi	r24, 0x9C	; 156
 174:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 40000 & 0x00FF;
 178:	80 e4       	ldi	r24, 0x40	; 64
 17a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1AL = 40;
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//Asignar salida de la señal pwm como reloj del timer0
	DDRB |= (1 << PINB1);										 											
 184:	84 b1       	in	r24, 0x04	; 4
 186:	82 60       	ori	r24, 0x02	; 2
 188:	84 b9       	out	0x04, r24	; 4
 18a:	08 95       	ret

0000018c <__vector_1>:
}

ISR(INT0_vect){
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
	;
}
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	if (!toggle){
 1c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	81 11       	cpse	r24, r1
 1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <__vector_14+0x38>
		digitalWrite(0xFF);
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
		toggle = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <__vector_14+0x42>
	} else {
		digitalWrite(0x00);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
		toggle = 0;
 1de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_3>:

ISR(PCINT0_vect){
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
	;
}
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <main>:

int main(void)
{
    //Deshabilitar interrupciones
    cli(); 
 218:	f8 94       	cli
    
    /*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
    //Mascara para INT0
    EIMSK = 0x01;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	8d bb       	out	0x1d, r24	; 29
    
    //Activacion por flanco de bajada
    EICRA = 0x02;
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    
    //Limpieza del registro de flag
    EIFR = 0x00;
 224:	1c ba       	out	0x1c, r1	; 28
    
    /*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
    PCICR = (1<<PCIE0);
 226:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK0 = (1<<PCINT4) | (1<<PCINT3);			//Boton B y A
 22a:	88 e1       	ldi	r24, 0x18	; 24
 22c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
    initLEDS();
 230:	0e 94 9f 00 	call	0x13e	; 0x13e <initLEDS>
	initTimers();
 234:	0e 94 a9 00 	call	0x152	; 0x152 <initTimers>
    
    //Activar interrupciones
    sei();
 238:	78 94       	sei
 23a:	ff cf       	rjmp	.-2      	; 0x23a <main+0x22>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
