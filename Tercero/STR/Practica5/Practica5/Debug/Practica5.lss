
Practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000027e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000778  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000694  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ee  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bc  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000157  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  88:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <print>:
static uint8_t reposo = 1;
static uint8_t configuracion = 0;
static uint8_t counter = 0;

void print(unsigned char data){
	PORTB = (((PORTB >> PINB1) & 0x01) << PINB1) | (((PORTB >> PINB2) & 0x01) << PINB2) | ((data & 0x01) << PINB0);
  90:	95 b1       	in	r25, 0x05	; 5
  92:	91 fb       	bst	r25, 1
  94:	66 27       	eor	r22, r22
  96:	60 f9       	bld	r22, 0
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	66 0f       	add	r22, r22
  9c:	77 1f       	adc	r23, r23
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	92 fb       	bst	r25, 2
  a2:	44 27       	eor	r20, r20
  a4:	40 f9       	bld	r20, 0
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	44 0f       	add	r20, r20
  aa:	55 1f       	adc	r21, r21
  ac:	44 0f       	add	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	46 2b       	or	r20, r22
  b2:	98 2f       	mov	r25, r24
  b4:	91 70       	andi	r25, 0x01	; 1
  b6:	49 2b       	or	r20, r25
  b8:	45 b9       	out	0x05, r20	; 5
	PORTD = (((PORTD >> PIND4) & 0x01) << PIND4) | (((data & 0x04) >> 2) << PIND5) | (((data & 0x02) >> 1) << PIND7);
  ba:	9b b1       	in	r25, 0x0b	; 11
  bc:	94 fb       	bst	r25, 4
  be:	22 27       	eor	r18, r18
  c0:	20 f9       	bld	r18, 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	a9 01       	movw	r20, r18
  c6:	42 95       	swap	r20
  c8:	52 95       	swap	r21
  ca:	50 7f       	andi	r21, 0xF0	; 240
  cc:	54 27       	eor	r21, r20
  ce:	40 7f       	andi	r20, 0xF0	; 240
  d0:	54 27       	eor	r21, r20
  d2:	98 2f       	mov	r25, r24
  d4:	94 70       	andi	r25, 0x04	; 4
  d6:	29 2f       	mov	r18, r25
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	35 95       	asr	r19
  dc:	27 95       	ror	r18
  de:	35 95       	asr	r19
  e0:	27 95       	ror	r18
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	22 95       	swap	r18
  e8:	32 95       	swap	r19
  ea:	30 7f       	andi	r19, 0xF0	; 240
  ec:	32 27       	eor	r19, r18
  ee:	20 7f       	andi	r18, 0xF0	; 240
  f0:	32 27       	eor	r19, r18
  f2:	82 70       	andi	r24, 0x02	; 2
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	95 95       	asr	r25
  f8:	87 95       	ror	r24
  fa:	96 95       	lsr	r25
  fc:	98 2f       	mov	r25, r24
  fe:	88 27       	eor	r24, r24
 100:	97 95       	ror	r25
 102:	87 95       	ror	r24
 104:	24 2b       	or	r18, r20
 106:	82 2b       	or	r24, r18
 108:	8b b9       	out	0x0b, r24	; 11
 10a:	08 95       	ret

0000010c <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB0);
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	85 60       	ori	r24, 0x05	; 5
 110:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 112:	87 b1       	in	r24, 0x07	; 7
 114:	88 61       	ori	r24, 0x18	; 24
 116:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND5) | (1 << PIND7);
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	80 6a       	ori	r24, 0xA0	; 160
 11c:	8a b9       	out	0x0a, r24	; 10
 11e:	08 95       	ret

00000120 <initTimers>:
	//OCR0A = 5;											//0.1s
	 
	
	//Timer 1 en modo FastPWM, non inverted con canal A, preescalado de 8 y carga del valor 40000
	//Se carga por defecto 1ms
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 120:	82 e8       	ldi	r24, 0x82	; 130
 122:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 126:	8a e1       	ldi	r24, 0x1A	; 26
 128:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << OCIE1A);
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	ICR1H = (40000 >> 8) & 0xFF;
 132:	8c e9       	ldi	r24, 0x9C	; 156
 134:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 40000 & 0x00FF;
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1AH = (2000 >> 8) & 0xFF;
 13e:	87 e0       	ldi	r24, 0x07	; 7
 140:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 2000 & 0x00FF;
 144:	80 ed       	ldi	r24, 0xD0	; 208
 146:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 14a:	08 95       	ret

0000014c <__vector_1>:
	
	//Asignar salida de la señal pwm como reloj del timer0
	//DDRB |= (1 << PINB1);										 											
}

ISR(INT0_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
	;
}
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
	PORTB = (!((PORTB >> PINB2) & 0x01) << PINB2);
 16c:	2a 99       	sbic	0x05, 2	; 5
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__vector_14+0x14>
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	01 c0       	rjmp	.+2      	; 0x176 <__vector_14+0x16>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	85 b9       	out	0x05, r24	; 5
}
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_3>:

ISR(PCINT0_vect){
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	//	if (reposo) {
		//	reposo = 0;
			//entra_coche = 1;
			
			//Apagar semaforo
			PORTC &= ~((1 << PINC3) | (1 << PINC4));
 1a6:	88 b1       	in	r24, 0x08	; 8
 1a8:	87 7e       	andi	r24, 0xE7	; 231
 1aa:	88 b9       	out	0x08, r24	; 8
			counter += 1;
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			print(counter);
 1b6:	0e 94 48 00 	call	0x90	; 0x90 <print>
			
			//counter += 1;
			//print(counter);
		//}
	//}
}
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <main>:

int main(void)
{
    //Deshabilitar interrupciones
    cli(); 
 1dc:	f8 94       	cli
    
    /*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
    //Mascara para INT0
    EIMSK = 0x01;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	8d bb       	out	0x1d, r24	; 29
    
    //Activacion por flanco de bajada
    EICRA = 0x02;
 1e2:	92 e0       	ldi	r25, 0x02	; 2
 1e4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    
    //Limpieza del registro de flag
    EIFR = 0x00;
 1e8:	1c ba       	out	0x1c, r1	; 28
    
    /*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
    PCICR = (1<<PCIE0);
 1ea:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK0 = (1<<PCINT4) | (1<<PCINT3);							//Boton B y A
 1ee:	88 e1       	ldi	r24, 0x18	; 24
 1f0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
    initLEDS();
 1f4:	0e 94 86 00 	call	0x10c	; 0x10c <initLEDS>
	initTimers();
 1f8:	0e 94 90 00 	call	0x120	; 0x120 <initTimers>
    
    //Activar interrupciones
    sei();
 1fc:	78 94       	sei
	
	//Enciendo semaforo
	PORTC |= (1 << PINC3) | (1 << PINC4);						//LED6 y LED7
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	88 61       	ori	r24, 0x18	; 24
 202:	88 b9       	out	0x08, r24	; 8
 204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x28>

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
