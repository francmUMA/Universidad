
Practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000744  000007d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000744  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  000007da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f8  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cc  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a9  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e9  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000256  00000000  00000000  00002169  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000023bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <main>
  9e:	0c 94 a0 03 	jmp	0x740	; 0x740 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <print>:
static uint8_t configuracion = 0;
static uint8_t counter = 0;
static const float factor_conversion = 45.0 / 255.0;

void print(unsigned char data){
	PORTB = (((PORTB >> PINB1) & 0x01) << PINB1) | (((PORTB >> PINB2) & 0x01) << PINB2) | ((data & 0x01) << PINB0);
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	91 fb       	bst	r25, 1
  aa:	66 27       	eor	r22, r22
  ac:	60 f9       	bld	r22, 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	66 0f       	add	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	92 fb       	bst	r25, 2
  b8:	44 27       	eor	r20, r20
  ba:	40 f9       	bld	r20, 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	46 2b       	or	r20, r22
  c8:	98 2f       	mov	r25, r24
  ca:	91 70       	andi	r25, 0x01	; 1
  cc:	49 2b       	or	r20, r25
  ce:	45 b9       	out	0x05, r20	; 5
	PORTD = (((PORTD >> PIND4) & 0x01) << PIND4) | (((data & 0x04) >> 2) << PIND5) | (((data & 0x02) >> 1) << PIND7);
  d0:	9b b1       	in	r25, 0x0b	; 11
  d2:	94 fb       	bst	r25, 4
  d4:	22 27       	eor	r18, r18
  d6:	20 f9       	bld	r18, 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	a9 01       	movw	r20, r18
  dc:	42 95       	swap	r20
  de:	52 95       	swap	r21
  e0:	50 7f       	andi	r21, 0xF0	; 240
  e2:	54 27       	eor	r21, r20
  e4:	40 7f       	andi	r20, 0xF0	; 240
  e6:	54 27       	eor	r21, r20
  e8:	98 2f       	mov	r25, r24
  ea:	94 70       	andi	r25, 0x04	; 4
  ec:	29 2f       	mov	r18, r25
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	35 95       	asr	r19
  f2:	27 95       	ror	r18
  f4:	35 95       	asr	r19
  f6:	27 95       	ror	r18
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	22 95       	swap	r18
  fe:	32 95       	swap	r19
 100:	30 7f       	andi	r19, 0xF0	; 240
 102:	32 27       	eor	r19, r18
 104:	20 7f       	andi	r18, 0xF0	; 240
 106:	32 27       	eor	r19, r18
 108:	82 70       	andi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	95 95       	asr	r25
 10e:	87 95       	ror	r24
 110:	96 95       	lsr	r25
 112:	98 2f       	mov	r25, r24
 114:	88 27       	eor	r24, r24
 116:	97 95       	ror	r25
 118:	87 95       	ror	r24
 11a:	24 2b       	or	r18, r20
 11c:	82 2b       	or	r24, r18
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	08 95       	ret

00000122 <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB0);
 122:	84 b1       	in	r24, 0x04	; 4
 124:	85 60       	ori	r24, 0x05	; 5
 126:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 128:	87 b1       	in	r24, 0x07	; 7
 12a:	88 61       	ori	r24, 0x18	; 24
 12c:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND5) | (1 << PIND7);
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	80 6a       	ori	r24, 0xA0	; 160
 132:	8a b9       	out	0x0a, r24	; 10
 134:	08 95       	ret

00000136 <init_ADC>:
}

void init_ADC(){
	ADMUX = (1 << REFS0) | (1<<ADLAR) | (5 & 0x0F);				
 136:	85 e6       	ldi	r24, 0x65	; 101
 138:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2);	
 13c:	84 e8       	ldi	r24, 0x84	; 132
 13e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 142:	08 95       	ret

00000144 <initTimers>:
}

void initTimers(){
	//Timer 0 en modo CTC usando la señal generada por la pwm como reloj.
	TCCR0A = (1 << WGM01); 
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	84 bd       	out	0x24, r24	; 36
	OCR0A = 5;											//0.1s
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	87 bd       	out	0x27, r24	; 39
	 
	
	//Timer 1 en modo FastPWM, non inverted con canal A, preescalado de 8 y carga del valor 40000
	//Se carga por defecto 1ms
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 14c:	82 e8       	ldi	r24, 0x82	; 130
 14e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 152:	8a e1       	ldi	r24, 0x1A	; 26
 154:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1H = (40000 >> 8) & 0xFF;
 158:	8c e9       	ldi	r24, 0x9C	; 156
 15a:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 40000 & 0x00FF;
 15e:	80 e4       	ldi	r24, 0x40	; 64
 160:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1AH = (2000 >> 8) & 0xFF;
 164:	87 e0       	ldi	r24, 0x07	; 7
 166:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 2000 & 0x00FF;
 16a:	80 ed       	ldi	r24, 0xD0	; 208
 16c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//Asignar salida de la señal pwm como reloj del timer0
	DDRB |= (1 << PINB1);										 											
 170:	84 b1       	in	r24, 0x04	; 4
 172:	82 60       	ori	r24, 0x02	; 2
 174:	84 b9       	out	0x04, r24	; 4
 176:	08 95       	ret

00000178 <__vector_1>:
}

ISR(INT0_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
	if (reposo){
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	88 23       	and	r24, r24
 18e:	81 f0       	breq	.+32     	; 0x1b0 <__vector_1+0x38>
		reposo = 0;
 190:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		configuracion = 1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <configuracion>
		
		//Activar parpadeo
		TCCR0B = (1 << CS02) | (1 << CS01) | (1 << CS00);
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	85 bd       	out	0x25, r24	; 37
		TIMSK0 = (1 << OCIE0A);
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		
		//Enable ADC interrupt
		ADCSRA |= (1 << ADSC) | (1<<ADIE); 
 1a4:	ea e7       	ldi	r30, 0x7A	; 122
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	88 64       	ori	r24, 0x48	; 72
 1ac:	80 83       	st	Z, r24
 1ae:	15 c0       	rjmp	.+42     	; 0x1da <__vector_1+0x62>
		
	} else if (configuracion){
 1b0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <configuracion>
 1b4:	88 23       	and	r24, r24
 1b6:	89 f0       	breq	.+34     	; 0x1da <__vector_1+0x62>
		reposo = 1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		configuracion = 0;
 1be:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <configuracion>
		
		//Desactivar ADC
		ADCSRA &= ~((1 << ADSC) | (1<<ADIE));
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	87 7b       	andi	r24, 0xB7	; 183
 1ca:	80 83       	st	Z, r24
		
		//Apagar parpadeo
		TCCR0B = 0;
 1cc:	15 bc       	out	0x25, r1	; 37
		TIMSK0 = 0;
 1ce:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		TCNT0 = 0;
 1d2:	16 bc       	out	0x26, r1	; 38
		PORTB = (((PORTB >> PINB0) & 0x01) << PINB0);
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	81 70       	andi	r24, 0x01	; 1
 1d8:	85 b9       	out	0x05, r24	; 5
	}
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_21>:

ISR(ADC_vect){
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
	//Escritura del resultado de la conversion
	OCR0A = (ADCH * factor_conversion) + 5;
 20c:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 a7 02 	call	0x54e	; 0x54e <__floatsisf>
 21a:	25 eb       	ldi	r18, 0xB5	; 181
 21c:	34 eb       	ldi	r19, 0xB4	; 180
 21e:	44 e3       	ldi	r20, 0x34	; 52
 220:	5e e3       	ldi	r21, 0x3E	; 62
 222:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3>
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	40 ea       	ldi	r20, 0xA0	; 160
 22c:	50 e4       	ldi	r21, 0x40	; 64
 22e:	0e 94 0a 02 	call	0x414	; 0x414 <__addsf3>
 232:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fixunssfsi>
 236:	67 bd       	out	0x27, r22	; 39
	
	//Inicio la conversion
	ADCSRA |= (1<<ADSC);
 238:	ea e7       	ldi	r30, 0x7A	; 122
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	80 83       	st	Z, r24
}
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
	PORTB = (!((PORTB >> PINB2) & 0x01) << PINB2) | (((PORTB >> PINB0) & 0x01) << PINB0);
 272:	2a 99       	sbic	0x05, 2	; 5
 274:	02 c0       	rjmp	.+4      	; 0x27a <__vector_14+0x16>
 276:	94 e0       	ldi	r25, 0x04	; 4
 278:	01 c0       	rjmp	.+2      	; 0x27c <__vector_14+0x18>
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	81 70       	andi	r24, 0x01	; 1
 280:	89 2b       	or	r24, r25
 282:	85 b9       	out	0x05, r24	; 5
}
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__vector_3>:

ISR(PCINT0_vect){
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	if (PINB & (1 << PINB3)){			//Boton A
 2b4:	1b 9b       	sbis	0x03, 3	; 3
 2b6:	47 c0       	rjmp	.+142    	; 0x346 <__vector_3+0xb4>
		if (reposo && counter < 7) {
 2b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2bc:	88 23       	and	r24, r24
 2be:	c1 f0       	breq	.+48     	; 0x2f0 <__vector_3+0x5e>
 2c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2c4:	87 30       	cpi	r24, 0x07	; 7
 2c6:	a0 f4       	brcc	.+40     	; 0x2f0 <__vector_3+0x5e>
			reposo = 0;
 2c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			entra_coche = 1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <entra_coche>
			
			//Apagar semaforo
			PORTC &= ~((1 << PINC3) | (1 << PINC4));
 2d2:	88 b1       	in	r24, 0x08	; 8
 2d4:	87 7e       	andi	r24, 0xE7	; 231
 2d6:	88 b9       	out	0x08, r24	; 8
			

			//Activo parpadeo y levanto barrera
			TCCR0B = (1 << CS02) | (1 << CS01) | (1 << CS00);
 2d8:	87 e0       	ldi	r24, 0x07	; 7
 2da:	85 bd       	out	0x25, r24	; 37
			TIMSK0 = (1 << OCIE0A);
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
			OCR1AH = (3000 >> 8) & 0xFF;
 2e2:	8b e0       	ldi	r24, 0x0B	; 11
 2e4:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 3000 & 0x00FF;
 2e8:	88 eb       	ldi	r24, 0xB8	; 184
 2ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2ee:	69 c0       	rjmp	.+210    	; 0x3c2 <__vector_3+0x130>
			
		} else if (sale_coche){
 2f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sale_coche>
 2f4:	88 23       	and	r24, r24
 2f6:	e1 f0       	breq	.+56     	; 0x330 <__vector_3+0x9e>
			reposo = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			sale_coche = 0;
 2fe:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sale_coche>
		
			//Enciendo semaforo
			PORTC = (1 << PINC3) | (1 << PINC4);						//LED6 y LED7
 302:	88 e1       	ldi	r24, 0x18	; 24
 304:	88 b9       	out	0x08, r24	; 8
		
			//Apagar luz parpadeante
			TCCR0B = 0;
 306:	15 bc       	out	0x25, r1	; 37
			TIMSK0 = 0;
 308:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
			TCNT0 = 0;
 30c:	16 bc       	out	0x26, r1	; 38
			PORTB = (((PORTB >> PINB0) & 0x01) << PINB0);
 30e:	85 b1       	in	r24, 0x05	; 5
 310:	81 70       	andi	r24, 0x01	; 1
 312:	85 b9       	out	0x05, r24	; 5
		
			//Bajar barrera
			OCR1AH = (2000 >> 8) & 0xFF;
 314:	87 e0       	ldi	r24, 0x07	; 7
 316:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 2000 & 0x00FF;
 31a:	80 ed       	ldi	r24, 0xD0	; 208
 31c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		
			counter -= 1;
 320:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 324:	81 50       	subi	r24, 0x01	; 1
 326:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			print(counter);
 32a:	0e 94 53 00 	call	0xa6	; 0xa6 <print>
 32e:	49 c0       	rjmp	.+146    	; 0x3c2 <__vector_3+0x130>
		} else if (configuracion){
 330:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <configuracion>
 334:	88 23       	and	r24, r24
 336:	09 f4       	brne	.+2      	; 0x33a <__vector_3+0xa8>
 338:	44 c0       	rjmp	.+136    	; 0x3c2 <__vector_3+0x130>
			counter = 0;
 33a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			print(counter);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 53 00 	call	0xa6	; 0xa6 <print>
 344:	3e c0       	rjmp	.+124    	; 0x3c2 <__vector_3+0x130>
		}
		
	} else if (PINB & (1<<PINB4)){		//Boton B
 346:	1c 9b       	sbis	0x03, 4	; 3
 348:	3c c0       	rjmp	.+120    	; 0x3c2 <__vector_3+0x130>
		if (reposo && counter > 0) {
 34a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 34e:	88 23       	and	r24, r24
 350:	c1 f0       	breq	.+48     	; 0x382 <__vector_3+0xf0>
 352:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 356:	88 23       	and	r24, r24
 358:	a1 f0       	breq	.+40     	; 0x382 <__vector_3+0xf0>
			reposo = 0;
 35a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			sale_coche = 1;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sale_coche>
			
			//Apagar led7 y led6
			PORTC &= ~((1 << PINC3) | (1 << PINC4));
 364:	88 b1       	in	r24, 0x08	; 8
 366:	87 7e       	andi	r24, 0xE7	; 231
 368:	88 b9       	out	0x08, r24	; 8
			
			//Activo parpadeo y levanto barrera
			TCCR0B = (1 << CS02) | (1 << CS01) | (1 << CS00);
 36a:	87 e0       	ldi	r24, 0x07	; 7
 36c:	85 bd       	out	0x25, r24	; 37
			TIMSK0 = (1 << OCIE0A);
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
			OCR1AH = (3000 >> 8) & 0xFF;
 374:	8b e0       	ldi	r24, 0x0B	; 11
 376:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 3000 & 0x00FF;
 37a:	88 eb       	ldi	r24, 0xB8	; 184
 37c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 380:	20 c0       	rjmp	.+64     	; 0x3c2 <__vector_3+0x130>
			
		} else if (entra_coche){
 382:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <entra_coche>
 386:	88 23       	and	r24, r24
 388:	e1 f0       	breq	.+56     	; 0x3c2 <__vector_3+0x130>
			reposo = 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			entra_coche = 0;
 390:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <entra_coche>
			
			//Enciendo semaforo
			PORTC |= (1 << PINC3) | (1 << PINC4);						//LED6 y LED7
 394:	88 b1       	in	r24, 0x08	; 8
 396:	88 61       	ori	r24, 0x18	; 24
 398:	88 b9       	out	0x08, r24	; 8
			
			//Apagar luz parpadeante
			TCCR0B = 0;
 39a:	15 bc       	out	0x25, r1	; 37
			TIMSK0 = 0;
 39c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
			TCNT0 = 0;
 3a0:	16 bc       	out	0x26, r1	; 38
			PORTB &= ~(1 << PINB2);
 3a2:	85 b1       	in	r24, 0x05	; 5
 3a4:	8b 7f       	andi	r24, 0xFB	; 251
 3a6:	85 b9       	out	0x05, r24	; 5
			
			//Bajar barrera
			OCR1AH = (3000 >> 8) & 0xFF;
 3a8:	8b e0       	ldi	r24, 0x0B	; 11
 3aa:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 3000 & 0x00FF;
 3ae:	88 eb       	ldi	r24, 0xB8	; 184
 3b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			
			counter += 1;
 3b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			print(counter);
 3be:	0e 94 53 00 	call	0xa6	; 0xa6 <print>
		}
	}
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <main>:

int main(void)
{
    //Deshabilitar interrupciones
    cli(); 
 3e4:	f8 94       	cli
    
    /*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
    //Mascara para INT0
    EIMSK = 0x01;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	8d bb       	out	0x1d, r24	; 29
    
    //Activacion por flanco de bajada
    EICRA = 0x02;
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    
    //Limpieza del registro de flag
    EIFR = 0x00;
 3f0:	1c ba       	out	0x1c, r1	; 28
    
    /*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
    PCICR = (1<<PCIE0);
 3f2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK0 = (1<<PCINT4) | (1<<PCINT3);							//Boton B y A
 3f6:	88 e1       	ldi	r24, 0x18	; 24
 3f8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
    initLEDS();
 3fc:	0e 94 91 00 	call	0x122	; 0x122 <initLEDS>
	initTimers();
 400:	0e 94 a2 00 	call	0x144	; 0x144 <initTimers>
	init_ADC();
 404:	0e 94 9b 00 	call	0x136	; 0x136 <init_ADC>
    
    //Activar interrupciones
    sei();
 408:	78 94       	sei
	
	//Enciendo semaforo
	PORTC |= (1 << PINC3) | (1 << PINC4);						//LED6 y LED7
 40a:	88 b1       	in	r24, 0x08	; 8
 40c:	88 61       	ori	r24, 0x18	; 24
 40e:	88 b9       	out	0x08, r24	; 8
 410:	ff cf       	rjmp	.-2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>

00000412 <__subsf3>:
 412:	50 58       	subi	r21, 0x80	; 128

00000414 <__addsf3>:
 414:	bb 27       	eor	r27, r27
 416:	aa 27       	eor	r26, r26
 418:	0e 94 21 02 	call	0x442	; 0x442 <__addsf3x>
 41c:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__fp_round>
 420:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fp_pscA>
 424:	38 f0       	brcs	.+14     	; 0x434 <__addsf3+0x20>
 426:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fp_pscB>
 42a:	20 f0       	brcs	.+8      	; 0x434 <__addsf3+0x20>
 42c:	39 f4       	brne	.+14     	; 0x43c <__addsf3+0x28>
 42e:	9f 3f       	cpi	r25, 0xFF	; 255
 430:	19 f4       	brne	.+6      	; 0x438 <__addsf3+0x24>
 432:	26 f4       	brtc	.+8      	; 0x43c <__addsf3+0x28>
 434:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_nan>
 438:	0e f4       	brtc	.+2      	; 0x43c <__addsf3+0x28>
 43a:	e0 95       	com	r30
 43c:	e7 fb       	bst	r30, 7
 43e:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_inf>

00000442 <__addsf3x>:
 442:	e9 2f       	mov	r30, r25
 444:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_split3>
 448:	58 f3       	brcs	.-42     	; 0x420 <__addsf3+0xc>
 44a:	ba 17       	cp	r27, r26
 44c:	62 07       	cpc	r22, r18
 44e:	73 07       	cpc	r23, r19
 450:	84 07       	cpc	r24, r20
 452:	95 07       	cpc	r25, r21
 454:	20 f0       	brcs	.+8      	; 0x45e <__addsf3x+0x1c>
 456:	79 f4       	brne	.+30     	; 0x476 <__addsf3x+0x34>
 458:	a6 f5       	brtc	.+104    	; 0x4c2 <__addsf3x+0x80>
 45a:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_zero>
 45e:	0e f4       	brtc	.+2      	; 0x462 <__addsf3x+0x20>
 460:	e0 95       	com	r30
 462:	0b 2e       	mov	r0, r27
 464:	ba 2f       	mov	r27, r26
 466:	a0 2d       	mov	r26, r0
 468:	0b 01       	movw	r0, r22
 46a:	b9 01       	movw	r22, r18
 46c:	90 01       	movw	r18, r0
 46e:	0c 01       	movw	r0, r24
 470:	ca 01       	movw	r24, r20
 472:	a0 01       	movw	r20, r0
 474:	11 24       	eor	r1, r1
 476:	ff 27       	eor	r31, r31
 478:	59 1b       	sub	r21, r25
 47a:	99 f0       	breq	.+38     	; 0x4a2 <__addsf3x+0x60>
 47c:	59 3f       	cpi	r21, 0xF9	; 249
 47e:	50 f4       	brcc	.+20     	; 0x494 <__addsf3x+0x52>
 480:	50 3e       	cpi	r21, 0xE0	; 224
 482:	68 f1       	brcs	.+90     	; 0x4de <__addsf3x+0x9c>
 484:	1a 16       	cp	r1, r26
 486:	f0 40       	sbci	r31, 0x00	; 0
 488:	a2 2f       	mov	r26, r18
 48a:	23 2f       	mov	r18, r19
 48c:	34 2f       	mov	r19, r20
 48e:	44 27       	eor	r20, r20
 490:	58 5f       	subi	r21, 0xF8	; 248
 492:	f3 cf       	rjmp	.-26     	; 0x47a <__addsf3x+0x38>
 494:	46 95       	lsr	r20
 496:	37 95       	ror	r19
 498:	27 95       	ror	r18
 49a:	a7 95       	ror	r26
 49c:	f0 40       	sbci	r31, 0x00	; 0
 49e:	53 95       	inc	r21
 4a0:	c9 f7       	brne	.-14     	; 0x494 <__addsf3x+0x52>
 4a2:	7e f4       	brtc	.+30     	; 0x4c2 <__addsf3x+0x80>
 4a4:	1f 16       	cp	r1, r31
 4a6:	ba 0b       	sbc	r27, r26
 4a8:	62 0b       	sbc	r22, r18
 4aa:	73 0b       	sbc	r23, r19
 4ac:	84 0b       	sbc	r24, r20
 4ae:	ba f0       	brmi	.+46     	; 0x4de <__addsf3x+0x9c>
 4b0:	91 50       	subi	r25, 0x01	; 1
 4b2:	a1 f0       	breq	.+40     	; 0x4dc <__addsf3x+0x9a>
 4b4:	ff 0f       	add	r31, r31
 4b6:	bb 1f       	adc	r27, r27
 4b8:	66 1f       	adc	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	c2 f7       	brpl	.-16     	; 0x4b0 <__addsf3x+0x6e>
 4c0:	0e c0       	rjmp	.+28     	; 0x4de <__addsf3x+0x9c>
 4c2:	ba 0f       	add	r27, r26
 4c4:	62 1f       	adc	r22, r18
 4c6:	73 1f       	adc	r23, r19
 4c8:	84 1f       	adc	r24, r20
 4ca:	48 f4       	brcc	.+18     	; 0x4de <__addsf3x+0x9c>
 4cc:	87 95       	ror	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	b7 95       	ror	r27
 4d4:	f7 95       	ror	r31
 4d6:	9e 3f       	cpi	r25, 0xFE	; 254
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <__addsf3x+0x9a>
 4da:	b0 cf       	rjmp	.-160    	; 0x43c <__addsf3+0x28>
 4dc:	93 95       	inc	r25
 4de:	88 0f       	add	r24, r24
 4e0:	08 f0       	brcs	.+2      	; 0x4e4 <__addsf3x+0xa2>
 4e2:	99 27       	eor	r25, r25
 4e4:	ee 0f       	add	r30, r30
 4e6:	97 95       	ror	r25
 4e8:	87 95       	ror	r24
 4ea:	08 95       	ret

000004ec <__fixunssfsi>:
 4ec:	0e 94 12 03 	call	0x624	; 0x624 <__fp_splitA>
 4f0:	88 f0       	brcs	.+34     	; 0x514 <__fixunssfsi+0x28>
 4f2:	9f 57       	subi	r25, 0x7F	; 127
 4f4:	98 f0       	brcs	.+38     	; 0x51c <__fixunssfsi+0x30>
 4f6:	b9 2f       	mov	r27, r25
 4f8:	99 27       	eor	r25, r25
 4fa:	b7 51       	subi	r27, 0x17	; 23
 4fc:	b0 f0       	brcs	.+44     	; 0x52a <__fixunssfsi+0x3e>
 4fe:	e1 f0       	breq	.+56     	; 0x538 <__fixunssfsi+0x4c>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	88 1f       	adc	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	1a f0       	brmi	.+6      	; 0x510 <__fixunssfsi+0x24>
 50a:	ba 95       	dec	r27
 50c:	c9 f7       	brne	.-14     	; 0x500 <__fixunssfsi+0x14>
 50e:	14 c0       	rjmp	.+40     	; 0x538 <__fixunssfsi+0x4c>
 510:	b1 30       	cpi	r27, 0x01	; 1
 512:	91 f0       	breq	.+36     	; 0x538 <__fixunssfsi+0x4c>
 514:	0e 94 2c 03 	call	0x658	; 0x658 <__fp_zero>
 518:	b1 e0       	ldi	r27, 0x01	; 1
 51a:	08 95       	ret
 51c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_zero>
 520:	67 2f       	mov	r22, r23
 522:	78 2f       	mov	r23, r24
 524:	88 27       	eor	r24, r24
 526:	b8 5f       	subi	r27, 0xF8	; 248
 528:	39 f0       	breq	.+14     	; 0x538 <__fixunssfsi+0x4c>
 52a:	b9 3f       	cpi	r27, 0xF9	; 249
 52c:	cc f3       	brlt	.-14     	; 0x520 <__fixunssfsi+0x34>
 52e:	86 95       	lsr	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b3 95       	inc	r27
 536:	d9 f7       	brne	.-10     	; 0x52e <__fixunssfsi+0x42>
 538:	3e f4       	brtc	.+14     	; 0x548 <__fixunssfsi+0x5c>
 53a:	90 95       	com	r25
 53c:	80 95       	com	r24
 53e:	70 95       	com	r23
 540:	61 95       	neg	r22
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8f 4f       	sbci	r24, 0xFF	; 255
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <__floatunsisf>:
 54a:	e8 94       	clt
 54c:	09 c0       	rjmp	.+18     	; 0x560 <__floatsisf+0x12>

0000054e <__floatsisf>:
 54e:	97 fb       	bst	r25, 7
 550:	3e f4       	brtc	.+14     	; 0x560 <__floatsisf+0x12>
 552:	90 95       	com	r25
 554:	80 95       	com	r24
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	99 23       	and	r25, r25
 562:	a9 f0       	breq	.+42     	; 0x58e <__floatsisf+0x40>
 564:	f9 2f       	mov	r31, r25
 566:	96 e9       	ldi	r25, 0x96	; 150
 568:	bb 27       	eor	r27, r27
 56a:	93 95       	inc	r25
 56c:	f6 95       	lsr	r31
 56e:	87 95       	ror	r24
 570:	77 95       	ror	r23
 572:	67 95       	ror	r22
 574:	b7 95       	ror	r27
 576:	f1 11       	cpse	r31, r1
 578:	f8 cf       	rjmp	.-16     	; 0x56a <__floatsisf+0x1c>
 57a:	fa f4       	brpl	.+62     	; 0x5ba <__floatsisf+0x6c>
 57c:	bb 0f       	add	r27, r27
 57e:	11 f4       	brne	.+4      	; 0x584 <__floatsisf+0x36>
 580:	60 ff       	sbrs	r22, 0
 582:	1b c0       	rjmp	.+54     	; 0x5ba <__floatsisf+0x6c>
 584:	6f 5f       	subi	r22, 0xFF	; 255
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	8f 4f       	sbci	r24, 0xFF	; 255
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	16 c0       	rjmp	.+44     	; 0x5ba <__floatsisf+0x6c>
 58e:	88 23       	and	r24, r24
 590:	11 f0       	breq	.+4      	; 0x596 <__floatsisf+0x48>
 592:	96 e9       	ldi	r25, 0x96	; 150
 594:	11 c0       	rjmp	.+34     	; 0x5b8 <__floatsisf+0x6a>
 596:	77 23       	and	r23, r23
 598:	21 f0       	breq	.+8      	; 0x5a2 <__floatsisf+0x54>
 59a:	9e e8       	ldi	r25, 0x8E	; 142
 59c:	87 2f       	mov	r24, r23
 59e:	76 2f       	mov	r23, r22
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <__floatsisf+0x5e>
 5a2:	66 23       	and	r22, r22
 5a4:	71 f0       	breq	.+28     	; 0x5c2 <__floatsisf+0x74>
 5a6:	96 e8       	ldi	r25, 0x86	; 134
 5a8:	86 2f       	mov	r24, r22
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	2a f0       	brmi	.+10     	; 0x5ba <__floatsisf+0x6c>
 5b0:	9a 95       	dec	r25
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	da f7       	brpl	.-10     	; 0x5b0 <__floatsisf+0x62>
 5ba:	88 0f       	add	r24, r24
 5bc:	96 95       	lsr	r25
 5be:	87 95       	ror	r24
 5c0:	97 f9       	bld	r25, 7
 5c2:	08 95       	ret

000005c4 <__fp_inf>:
 5c4:	97 f9       	bld	r25, 7
 5c6:	9f 67       	ori	r25, 0x7F	; 127
 5c8:	80 e8       	ldi	r24, 0x80	; 128
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	08 95       	ret

000005d0 <__fp_nan>:
 5d0:	9f ef       	ldi	r25, 0xFF	; 255
 5d2:	80 ec       	ldi	r24, 0xC0	; 192
 5d4:	08 95       	ret

000005d6 <__fp_pscA>:
 5d6:	00 24       	eor	r0, r0
 5d8:	0a 94       	dec	r0
 5da:	16 16       	cp	r1, r22
 5dc:	17 06       	cpc	r1, r23
 5de:	18 06       	cpc	r1, r24
 5e0:	09 06       	cpc	r0, r25
 5e2:	08 95       	ret

000005e4 <__fp_pscB>:
 5e4:	00 24       	eor	r0, r0
 5e6:	0a 94       	dec	r0
 5e8:	12 16       	cp	r1, r18
 5ea:	13 06       	cpc	r1, r19
 5ec:	14 06       	cpc	r1, r20
 5ee:	05 06       	cpc	r0, r21
 5f0:	08 95       	ret

000005f2 <__fp_round>:
 5f2:	09 2e       	mov	r0, r25
 5f4:	03 94       	inc	r0
 5f6:	00 0c       	add	r0, r0
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__fp_round+0xc>
 5fa:	88 23       	and	r24, r24
 5fc:	52 f0       	brmi	.+20     	; 0x612 <__fp_round+0x20>
 5fe:	bb 0f       	add	r27, r27
 600:	40 f4       	brcc	.+16     	; 0x612 <__fp_round+0x20>
 602:	bf 2b       	or	r27, r31
 604:	11 f4       	brne	.+4      	; 0x60a <__fp_round+0x18>
 606:	60 ff       	sbrs	r22, 0
 608:	04 c0       	rjmp	.+8      	; 0x612 <__fp_round+0x20>
 60a:	6f 5f       	subi	r22, 0xFF	; 255
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	08 95       	ret

00000614 <__fp_split3>:
 614:	57 fd       	sbrc	r21, 7
 616:	90 58       	subi	r25, 0x80	; 128
 618:	44 0f       	add	r20, r20
 61a:	55 1f       	adc	r21, r21
 61c:	59 f0       	breq	.+22     	; 0x634 <__fp_splitA+0x10>
 61e:	5f 3f       	cpi	r21, 0xFF	; 255
 620:	71 f0       	breq	.+28     	; 0x63e <__fp_splitA+0x1a>
 622:	47 95       	ror	r20

00000624 <__fp_splitA>:
 624:	88 0f       	add	r24, r24
 626:	97 fb       	bst	r25, 7
 628:	99 1f       	adc	r25, r25
 62a:	61 f0       	breq	.+24     	; 0x644 <__fp_splitA+0x20>
 62c:	9f 3f       	cpi	r25, 0xFF	; 255
 62e:	79 f0       	breq	.+30     	; 0x64e <__fp_splitA+0x2a>
 630:	87 95       	ror	r24
 632:	08 95       	ret
 634:	12 16       	cp	r1, r18
 636:	13 06       	cpc	r1, r19
 638:	14 06       	cpc	r1, r20
 63a:	55 1f       	adc	r21, r21
 63c:	f2 cf       	rjmp	.-28     	; 0x622 <__fp_split3+0xe>
 63e:	46 95       	lsr	r20
 640:	f1 df       	rcall	.-30     	; 0x624 <__fp_splitA>
 642:	08 c0       	rjmp	.+16     	; 0x654 <__fp_splitA+0x30>
 644:	16 16       	cp	r1, r22
 646:	17 06       	cpc	r1, r23
 648:	18 06       	cpc	r1, r24
 64a:	99 1f       	adc	r25, r25
 64c:	f1 cf       	rjmp	.-30     	; 0x630 <__fp_splitA+0xc>
 64e:	86 95       	lsr	r24
 650:	71 05       	cpc	r23, r1
 652:	61 05       	cpc	r22, r1
 654:	08 94       	sec
 656:	08 95       	ret

00000658 <__fp_zero>:
 658:	e8 94       	clt

0000065a <__fp_szero>:
 65a:	bb 27       	eor	r27, r27
 65c:	66 27       	eor	r22, r22
 65e:	77 27       	eor	r23, r23
 660:	cb 01       	movw	r24, r22
 662:	97 f9       	bld	r25, 7
 664:	08 95       	ret

00000666 <__mulsf3>:
 666:	0e 94 46 03 	call	0x68c	; 0x68c <__mulsf3x>
 66a:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__fp_round>
 66e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fp_pscA>
 672:	38 f0       	brcs	.+14     	; 0x682 <__mulsf3+0x1c>
 674:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fp_pscB>
 678:	20 f0       	brcs	.+8      	; 0x682 <__mulsf3+0x1c>
 67a:	95 23       	and	r25, r21
 67c:	11 f0       	breq	.+4      	; 0x682 <__mulsf3+0x1c>
 67e:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_inf>
 682:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_nan>
 686:	11 24       	eor	r1, r1
 688:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__fp_szero>

0000068c <__mulsf3x>:
 68c:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_split3>
 690:	70 f3       	brcs	.-36     	; 0x66e <__mulsf3+0x8>

00000692 <__mulsf3_pse>:
 692:	95 9f       	mul	r25, r21
 694:	c1 f3       	breq	.-16     	; 0x686 <__mulsf3+0x20>
 696:	95 0f       	add	r25, r21
 698:	50 e0       	ldi	r21, 0x00	; 0
 69a:	55 1f       	adc	r21, r21
 69c:	62 9f       	mul	r22, r18
 69e:	f0 01       	movw	r30, r0
 6a0:	72 9f       	mul	r23, r18
 6a2:	bb 27       	eor	r27, r27
 6a4:	f0 0d       	add	r31, r0
 6a6:	b1 1d       	adc	r27, r1
 6a8:	63 9f       	mul	r22, r19
 6aa:	aa 27       	eor	r26, r26
 6ac:	f0 0d       	add	r31, r0
 6ae:	b1 1d       	adc	r27, r1
 6b0:	aa 1f       	adc	r26, r26
 6b2:	64 9f       	mul	r22, r20
 6b4:	66 27       	eor	r22, r22
 6b6:	b0 0d       	add	r27, r0
 6b8:	a1 1d       	adc	r26, r1
 6ba:	66 1f       	adc	r22, r22
 6bc:	82 9f       	mul	r24, r18
 6be:	22 27       	eor	r18, r18
 6c0:	b0 0d       	add	r27, r0
 6c2:	a1 1d       	adc	r26, r1
 6c4:	62 1f       	adc	r22, r18
 6c6:	73 9f       	mul	r23, r19
 6c8:	b0 0d       	add	r27, r0
 6ca:	a1 1d       	adc	r26, r1
 6cc:	62 1f       	adc	r22, r18
 6ce:	83 9f       	mul	r24, r19
 6d0:	a0 0d       	add	r26, r0
 6d2:	61 1d       	adc	r22, r1
 6d4:	22 1f       	adc	r18, r18
 6d6:	74 9f       	mul	r23, r20
 6d8:	33 27       	eor	r19, r19
 6da:	a0 0d       	add	r26, r0
 6dc:	61 1d       	adc	r22, r1
 6de:	23 1f       	adc	r18, r19
 6e0:	84 9f       	mul	r24, r20
 6e2:	60 0d       	add	r22, r0
 6e4:	21 1d       	adc	r18, r1
 6e6:	82 2f       	mov	r24, r18
 6e8:	76 2f       	mov	r23, r22
 6ea:	6a 2f       	mov	r22, r26
 6ec:	11 24       	eor	r1, r1
 6ee:	9f 57       	subi	r25, 0x7F	; 127
 6f0:	50 40       	sbci	r21, 0x00	; 0
 6f2:	9a f0       	brmi	.+38     	; 0x71a <__mulsf3_pse+0x88>
 6f4:	f1 f0       	breq	.+60     	; 0x732 <__mulsf3_pse+0xa0>
 6f6:	88 23       	and	r24, r24
 6f8:	4a f0       	brmi	.+18     	; 0x70c <__mulsf3_pse+0x7a>
 6fa:	ee 0f       	add	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	bb 1f       	adc	r27, r27
 700:	66 1f       	adc	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	88 1f       	adc	r24, r24
 706:	91 50       	subi	r25, 0x01	; 1
 708:	50 40       	sbci	r21, 0x00	; 0
 70a:	a9 f7       	brne	.-22     	; 0x6f6 <__mulsf3_pse+0x64>
 70c:	9e 3f       	cpi	r25, 0xFE	; 254
 70e:	51 05       	cpc	r21, r1
 710:	80 f0       	brcs	.+32     	; 0x732 <__mulsf3_pse+0xa0>
 712:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_inf>
 716:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__fp_szero>
 71a:	5f 3f       	cpi	r21, 0xFF	; 255
 71c:	e4 f3       	brlt	.-8      	; 0x716 <__mulsf3_pse+0x84>
 71e:	98 3e       	cpi	r25, 0xE8	; 232
 720:	d4 f3       	brlt	.-12     	; 0x716 <__mulsf3_pse+0x84>
 722:	86 95       	lsr	r24
 724:	77 95       	ror	r23
 726:	67 95       	ror	r22
 728:	b7 95       	ror	r27
 72a:	f7 95       	ror	r31
 72c:	e7 95       	ror	r30
 72e:	9f 5f       	subi	r25, 0xFF	; 255
 730:	c1 f7       	brne	.-16     	; 0x722 <__mulsf3_pse+0x90>
 732:	fe 2b       	or	r31, r30
 734:	88 0f       	add	r24, r24
 736:	91 1d       	adc	r25, r1
 738:	96 95       	lsr	r25
 73a:	87 95       	ror	r24
 73c:	97 f9       	bld	r25, 7
 73e:	08 95       	ret

00000740 <_exit>:
 740:	f8 94       	cli

00000742 <__stop_program>:
 742:	ff cf       	rjmp	.-2      	; 0x742 <__stop_program>
