
Practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002a0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000336  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000781  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a1  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000384  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bc  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000157  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  9e:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <print>:
static uint8_t reposo = 1;
static uint8_t configuracion = 0;
static int counter = 0;

void print(unsigned char data){
	PORTB = (((PORTB >> PINB1) & 0x01) << PINB1) | (((PORTB >> PINB2) & 0x01) << PINB2) | ((data & 0x01) << PINB0);
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	91 fb       	bst	r25, 1
  aa:	66 27       	eor	r22, r22
  ac:	60 f9       	bld	r22, 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	66 0f       	add	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	92 fb       	bst	r25, 2
  b8:	44 27       	eor	r20, r20
  ba:	40 f9       	bld	r20, 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	46 2b       	or	r20, r22
  c8:	98 2f       	mov	r25, r24
  ca:	91 70       	andi	r25, 0x01	; 1
  cc:	49 2b       	or	r20, r25
  ce:	45 b9       	out	0x05, r20	; 5
	PORTD = (((PORTD >> PIND4) & 0x01) << PIND4) | (((data & 0x04) >> 2) << PIND5) | (((data & 0x02) >> 1) << PIND7);
  d0:	9b b1       	in	r25, 0x0b	; 11
  d2:	94 fb       	bst	r25, 4
  d4:	22 27       	eor	r18, r18
  d6:	20 f9       	bld	r18, 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	a9 01       	movw	r20, r18
  dc:	42 95       	swap	r20
  de:	52 95       	swap	r21
  e0:	50 7f       	andi	r21, 0xF0	; 240
  e2:	54 27       	eor	r21, r20
  e4:	40 7f       	andi	r20, 0xF0	; 240
  e6:	54 27       	eor	r21, r20
  e8:	98 2f       	mov	r25, r24
  ea:	94 70       	andi	r25, 0x04	; 4
  ec:	29 2f       	mov	r18, r25
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	35 95       	asr	r19
  f2:	27 95       	ror	r18
  f4:	35 95       	asr	r19
  f6:	27 95       	ror	r18
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	22 95       	swap	r18
  fe:	32 95       	swap	r19
 100:	30 7f       	andi	r19, 0xF0	; 240
 102:	32 27       	eor	r19, r18
 104:	20 7f       	andi	r18, 0xF0	; 240
 106:	32 27       	eor	r19, r18
 108:	82 70       	andi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	95 95       	asr	r25
 10e:	87 95       	ror	r24
 110:	96 95       	lsr	r25
 112:	98 2f       	mov	r25, r24
 114:	88 27       	eor	r24, r24
 116:	97 95       	ror	r25
 118:	87 95       	ror	r24
 11a:	24 2b       	or	r18, r20
 11c:	82 2b       	or	r24, r18
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	08 95       	ret

00000122 <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB0);
 122:	84 b1       	in	r24, 0x04	; 4
 124:	85 60       	ori	r24, 0x05	; 5
 126:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 128:	87 b1       	in	r24, 0x07	; 7
 12a:	88 61       	ori	r24, 0x18	; 24
 12c:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND5) | (1 << PIND7);
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	80 6a       	ori	r24, 0xA0	; 160
 132:	8a b9       	out	0x0a, r24	; 10
 134:	08 95       	ret

00000136 <initTimers>:
}

void initTimers(){
	//Timer 0 en modo CTC usando la señal generada por la pwm como reloj.
	TCCR0A = (1 << WGM01); 
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A);
 13a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = 5;											//0.1s
 13e:	95 e0       	ldi	r25, 0x05	; 5
 140:	97 bd       	out	0x27, r25	; 39
	 
	
	//Timer 1 en modo FastPWM, non inverted con canal A, preescalado de 8 y carga del valor 40000
	//Se carga por defecto 1ms
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 142:	92 e8       	ldi	r25, 0x82	; 130
 144:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 148:	9a e1       	ldi	r25, 0x1A	; 26
 14a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << OCIE1A);
 14e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	ICR1H = (40000 >> 8) & 0xFF;
 152:	8c e9       	ldi	r24, 0x9C	; 156
 154:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 40000 & 0x00FF;
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1AH = (2000 >> 8) & 0xFF;
 15e:	87 e0       	ldi	r24, 0x07	; 7
 160:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 2000 & 0x00FF;
 164:	80 ed       	ldi	r24, 0xD0	; 208
 166:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//Asignar salida de la señal pwm como reloj del timer0
	DDRB |= (1 << PINB1);										 											
 16a:	84 b1       	in	r24, 0x04	; 4
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	84 b9       	out	0x04, r24	; 4
 170:	08 95       	ret

00000172 <__vector_1>:
}

ISR(INT0_vect){
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
	;
}
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	8f 93       	push	r24
	PORTB = (!((PORTB >> PINB2) & 0x01) << PINB2);
 192:	2a 99       	sbic	0x05, 2	; 5
 194:	02 c0       	rjmp	.+4      	; 0x19a <__vector_14+0x14>
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	01 c0       	rjmp	.+2      	; 0x19c <__vector_14+0x16>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	85 b9       	out	0x05, r24	; 5
}
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_3>:

ISR(PCINT0_vect){
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
	if (PINB & (1 << PINB3)){			//Boton A
 1cc:	1b 9b       	sbis	0x03, 3	; 3
 1ce:	13 c0       	rjmp	.+38     	; 0x1f6 <__vector_3+0x4c>
		if (reposo) {
 1d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d4:	88 23       	and	r24, r24
 1d6:	f1 f1       	breq	.+124    	; 0x254 <__vector_3+0xaa>
			reposo = 0;
 1d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			entra_coche = 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <entra_coche>
			
			//Apagar led7 y led6
			PORTC = 0;
 1e2:	18 b8       	out	0x08, r1	; 8
			
			//Activo parpadeo y levanto barrera
			TCCR0B = (1 << CS02) | (1 << CS01) | (1 << CS00);
 1e4:	87 e0       	ldi	r24, 0x07	; 7
 1e6:	85 bd       	out	0x25, r24	; 37
			OCR1AH = (3000 >> 8) & 0xFF;
 1e8:	8b e0       	ldi	r24, 0x0B	; 11
 1ea:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 3000 & 0x00FF;
 1ee:	88 eb       	ldi	r24, 0xB8	; 184
 1f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1f4:	2f c0       	rjmp	.+94     	; 0x254 <__vector_3+0xaa>
		} 
	} else if (PINB & (1<<PINB4)){		//Boton B
 1f6:	1c 9b       	sbis	0x03, 4	; 3
 1f8:	2d c0       	rjmp	.+90     	; 0x254 <__vector_3+0xaa>
		if (reposo) {
 1fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fe:	88 23       	and	r24, r24
 200:	61 f0       	breq	.+24     	; 0x21a <__vector_3+0x70>
			reposo = 0;
 202:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			sale_coche = 1;
			
			//Apagar led7 y led6
			PORTC = 0;
 206:	18 b8       	out	0x08, r1	; 8
			
			//Activo parpadeo y levanto barrera
			TCCR0B = (1 << CS02) | (1 << CS01) | (1 << CS00);
 208:	87 e0       	ldi	r24, 0x07	; 7
 20a:	85 bd       	out	0x25, r24	; 37
			OCR1AH = (3000 >> 8) & 0xFF;
 20c:	8b e0       	ldi	r24, 0x0B	; 11
 20e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 3000 & 0x00FF;
 212:	88 eb       	ldi	r24, 0xB8	; 184
 214:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 218:	1d c0       	rjmp	.+58     	; 0x254 <__vector_3+0xaa>
		} else if (entra_coche){
 21a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <entra_coche>
 21e:	88 23       	and	r24, r24
 220:	c9 f0       	breq	.+50     	; 0x254 <__vector_3+0xaa>
			reposo = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			entra_coche = 0;
 228:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <entra_coche>
			
			//Enciendo semaforo
			PORTC = (1 << PINC3) | (1 << PINC4);						//LED6 y LED7
 22c:	88 e1       	ldi	r24, 0x18	; 24
 22e:	88 b9       	out	0x08, r24	; 8
			
			//Apagar luz parpadeante
			TCCR0B = 0;
 230:	15 bc       	out	0x25, r1	; 37
			
			//Bajar barrera
			OCR1AH = (3000 >> 8) & 0xFF;
 232:	8b e0       	ldi	r24, 0x0B	; 11
 234:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 3000 & 0x00FF;
 238:	88 eb       	ldi	r24, 0xB8	; 184
 23a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			
			counter += 1;
 23e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 242:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 24c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			print(counter);
 250:	0e 94 53 00 	call	0xa6	; 0xa6 <print>
		}
	}
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <main>:

int main(void)
{
    //Deshabilitar interrupciones
    cli(); 
 276:	f8 94       	cli
    
    /*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
    //Mascara para INT0
    EIMSK = 0x01;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	8d bb       	out	0x1d, r24	; 29
    
    //Activacion por flanco de bajada
    EICRA = 0x02;
 27c:	92 e0       	ldi	r25, 0x02	; 2
 27e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    
    //Limpieza del registro de flag
    EIFR = 0x00;
 282:	1c ba       	out	0x1c, r1	; 28
    
    /*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
    PCICR = (1<<PCIE0);
 284:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK0 = (1<<PCINT4) | (1<<PCINT3);							//Boton B y A
 288:	c8 e1       	ldi	r28, 0x18	; 24
 28a:	c0 93 6b 00 	sts	0x006B, r28	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
    initLEDS();
 28e:	0e 94 91 00 	call	0x122	; 0x122 <initLEDS>
	initTimers();
 292:	0e 94 9b 00 	call	0x136	; 0x136 <initTimers>
    
    //Activar interrupciones
    sei();
 296:	78 94       	sei
	
	//Enciendo semaforo
	PORTC = (1 << PINC3) | (1 << PINC4);						//LED6 y LED7
 298:	c8 b9       	out	0x08, r28	; 8
 29a:	ff cf       	rjmp	.-2      	; 0x29a <main+0x24>

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
