
Practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000031e  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  000003b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ab  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ae  00000000  00000000  00000c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000418  00000000  00000000  000012cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bc  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017b  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001d07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  9e:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <print>:
static uint8_t reposo = 1;
static uint8_t configuracion = 0;
static uint8_t counter = 0;

void print(unsigned char data){
	PORTB = (((PORTB >> PINB1) & 0x01) << PINB1) | (((PORTB >> PINB2) & 0x01) << PINB2) | ((data & 0x01) << PINB0);
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	91 fb       	bst	r25, 1
  aa:	66 27       	eor	r22, r22
  ac:	60 f9       	bld	r22, 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	66 0f       	add	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	92 fb       	bst	r25, 2
  b8:	44 27       	eor	r20, r20
  ba:	40 f9       	bld	r20, 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	46 2b       	or	r20, r22
  c8:	98 2f       	mov	r25, r24
  ca:	91 70       	andi	r25, 0x01	; 1
  cc:	49 2b       	or	r20, r25
  ce:	45 b9       	out	0x05, r20	; 5
	PORTD = (((PORTD >> PIND4) & 0x01) << PIND4) | (((data & 0x04) >> 2) << PIND5) | (((data & 0x02) >> 1) << PIND7);
  d0:	9b b1       	in	r25, 0x0b	; 11
  d2:	94 fb       	bst	r25, 4
  d4:	22 27       	eor	r18, r18
  d6:	20 f9       	bld	r18, 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	a9 01       	movw	r20, r18
  dc:	42 95       	swap	r20
  de:	52 95       	swap	r21
  e0:	50 7f       	andi	r21, 0xF0	; 240
  e2:	54 27       	eor	r21, r20
  e4:	40 7f       	andi	r20, 0xF0	; 240
  e6:	54 27       	eor	r21, r20
  e8:	98 2f       	mov	r25, r24
  ea:	94 70       	andi	r25, 0x04	; 4
  ec:	29 2f       	mov	r18, r25
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	35 95       	asr	r19
  f2:	27 95       	ror	r18
  f4:	35 95       	asr	r19
  f6:	27 95       	ror	r18
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	22 95       	swap	r18
  fe:	32 95       	swap	r19
 100:	30 7f       	andi	r19, 0xF0	; 240
 102:	32 27       	eor	r19, r18
 104:	20 7f       	andi	r18, 0xF0	; 240
 106:	32 27       	eor	r19, r18
 108:	82 70       	andi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	95 95       	asr	r25
 10e:	87 95       	ror	r24
 110:	96 95       	lsr	r25
 112:	98 2f       	mov	r25, r24
 114:	88 27       	eor	r24, r24
 116:	97 95       	ror	r25
 118:	87 95       	ror	r24
 11a:	24 2b       	or	r18, r20
 11c:	82 2b       	or	r24, r18
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	08 95       	ret

00000122 <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB0);
 122:	84 b1       	in	r24, 0x04	; 4
 124:	85 60       	ori	r24, 0x05	; 5
 126:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 128:	87 b1       	in	r24, 0x07	; 7
 12a:	88 61       	ori	r24, 0x18	; 24
 12c:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND5) | (1 << PIND7);
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	80 6a       	ori	r24, 0xA0	; 160
 132:	8a b9       	out	0x0a, r24	; 10
 134:	08 95       	ret

00000136 <initTimers>:
}

void initTimers(){
	//Timer 0 en modo CTC usando la señal generada por la pwm como reloj.
	TCCR0A = (1 << WGM01); 
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	84 bd       	out	0x24, r24	; 36
	OCR0A = 5;											//0.1s
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	87 bd       	out	0x27, r24	; 39
	 
	
	//Timer 1 en modo FastPWM, non inverted con canal A, preescalado de 8 y carga del valor 40000
	//Se carga por defecto 1ms
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 13e:	82 e8       	ldi	r24, 0x82	; 130
 140:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 144:	8a e1       	ldi	r24, 0x1A	; 26
 146:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1H = (40000 >> 8) & 0xFF;
 14a:	8c e9       	ldi	r24, 0x9C	; 156
 14c:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 40000 & 0x00FF;
 150:	80 e4       	ldi	r24, 0x40	; 64
 152:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1AH = (2000 >> 8) & 0xFF;
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 2000 & 0x00FF;
 15c:	80 ed       	ldi	r24, 0xD0	; 208
 15e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//Asignar salida de la señal pwm como reloj del timer0
	DDRB |= (1 << PINB1);										 											
 162:	84 b1       	in	r24, 0x04	; 4
 164:	82 60       	ori	r24, 0x02	; 2
 166:	84 b9       	out	0x04, r24	; 4
 168:	08 95       	ret

0000016a <__vector_1>:
}

ISR(INT0_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
	;
}
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__vector_14>:

ISR(TIMER0_COMPA_vect){
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	8f 93       	push	r24
	PORTB = (!((PORTB >> PINB2) & 0x01) << PINB2);
 18a:	2a 99       	sbic	0x05, 2	; 5
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__vector_14+0x14>
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	01 c0       	rjmp	.+2      	; 0x194 <__vector_14+0x16>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	85 b9       	out	0x05, r24	; 5
}
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_3>:

ISR(PCINT0_vect){
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	if (PINB & (1 << PINB3)){			//Boton A
 1c4:	1b 9b       	sbis	0x03, 3	; 3
 1c6:	3d c0       	rjmp	.+122    	; 0x242 <__vector_3+0xa0>
		if (reposo && counter < 7) {
 1c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1cc:	88 23       	and	r24, r24
 1ce:	c1 f0       	breq	.+48     	; 0x200 <__vector_3+0x5e>
 1d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1d4:	87 30       	cpi	r24, 0x07	; 7
 1d6:	a0 f4       	brcc	.+40     	; 0x200 <__vector_3+0x5e>
			reposo = 0;
 1d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			entra_coche = 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <entra_coche>
			
			//Apagar semaforo
			PORTC &= ~((1 << PINC3) | (1 << PINC4));
 1e2:	88 b1       	in	r24, 0x08	; 8
 1e4:	87 7e       	andi	r24, 0xE7	; 231
 1e6:	88 b9       	out	0x08, r24	; 8
			

			//Activo parpadeo y levanto barrera
			TCCR0B = (1 << CS02) | (1 << CS01) | (1 << CS00);
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	85 bd       	out	0x25, r24	; 37
			TIMSK0 = (1 << OCIE0A);
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
			OCR1AH = (3000 >> 8) & 0xFF;
 1f2:	8b e0       	ldi	r24, 0x0B	; 11
 1f4:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 3000 & 0x00FF;
 1f8:	88 eb       	ldi	r24, 0xB8	; 184
 1fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1fe:	5f c0       	rjmp	.+190    	; 0x2be <__vector_3+0x11c>
			
		} else if (sale_coche){
 200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sale_coche>
 204:	88 23       	and	r24, r24
 206:	09 f4       	brne	.+2      	; 0x20a <__vector_3+0x68>
 208:	5a c0       	rjmp	.+180    	; 0x2be <__vector_3+0x11c>
			reposo = 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			sale_coche = 0;
 210:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <sale_coche>
		
			//Enciendo semaforo
			PORTC = (1 << PINC3) | (1 << PINC4);						//LED6 y LED7
 214:	88 e1       	ldi	r24, 0x18	; 24
 216:	88 b9       	out	0x08, r24	; 8
		
			//Apagar luz parpadeante
			TCCR0B = 0;
 218:	15 bc       	out	0x25, r1	; 37
			TIMSK0 = 0;
 21a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
			TCNT0 = 0;
 21e:	16 bc       	out	0x26, r1	; 38
			PORTB &= ~(1 << PINB2);
 220:	85 b1       	in	r24, 0x05	; 5
 222:	8b 7f       	andi	r24, 0xFB	; 251
 224:	85 b9       	out	0x05, r24	; 5
		
			//Bajar barrera
			OCR1AH = (2000 >> 8) & 0xFF;
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 2000 & 0x00FF;
 22c:	80 ed       	ldi	r24, 0xD0	; 208
 22e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		
			counter -= 1;
 232:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 236:	81 50       	subi	r24, 0x01	; 1
 238:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			print(counter);
 23c:	0e 94 53 00 	call	0xa6	; 0xa6 <print>
 240:	3e c0       	rjmp	.+124    	; 0x2be <__vector_3+0x11c>
		}
		
	} else if (PINB & (1<<PINB4)){		//Boton B
 242:	1c 9b       	sbis	0x03, 4	; 3
 244:	3c c0       	rjmp	.+120    	; 0x2be <__vector_3+0x11c>
		if (reposo && counter > 0) {
 246:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24a:	88 23       	and	r24, r24
 24c:	c1 f0       	breq	.+48     	; 0x27e <__vector_3+0xdc>
 24e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 252:	88 23       	and	r24, r24
 254:	a1 f0       	breq	.+40     	; 0x27e <__vector_3+0xdc>
			reposo = 0;
 256:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			sale_coche = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sale_coche>
			
			//Apagar led7 y led6
			PORTC &= ~((1 << PINC3) | (1 << PINC4));
 260:	88 b1       	in	r24, 0x08	; 8
 262:	87 7e       	andi	r24, 0xE7	; 231
 264:	88 b9       	out	0x08, r24	; 8
			
			//Activo parpadeo y levanto barrera
			TCCR0B = (1 << CS02) | (1 << CS01) | (1 << CS00);
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	85 bd       	out	0x25, r24	; 37
			TIMSK0 = (1 << OCIE0A);
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
			OCR1AH = (3000 >> 8) & 0xFF;
 270:	8b e0       	ldi	r24, 0x0B	; 11
 272:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 3000 & 0x00FF;
 276:	88 eb       	ldi	r24, 0xB8	; 184
 278:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 27c:	20 c0       	rjmp	.+64     	; 0x2be <__vector_3+0x11c>
			
		} else if (entra_coche){
 27e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <entra_coche>
 282:	88 23       	and	r24, r24
 284:	e1 f0       	breq	.+56     	; 0x2be <__vector_3+0x11c>
			reposo = 1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			entra_coche = 0;
 28c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <entra_coche>
			
			//Enciendo semaforo
			PORTC |= (1 << PINC3) | (1 << PINC4);						//LED6 y LED7
 290:	88 b1       	in	r24, 0x08	; 8
 292:	88 61       	ori	r24, 0x18	; 24
 294:	88 b9       	out	0x08, r24	; 8
			
			//Apagar luz parpadeante
			TCCR0B = 0;
 296:	15 bc       	out	0x25, r1	; 37
			TIMSK0 = 0;
 298:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
			TCNT0 = 0;
 29c:	16 bc       	out	0x26, r1	; 38
			PORTB &= ~(1 << PINB2);
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	8b 7f       	andi	r24, 0xFB	; 251
 2a2:	85 b9       	out	0x05, r24	; 5
			
			//Bajar barrera
			OCR1AH = (3000 >> 8) & 0xFF;
 2a4:	8b e0       	ldi	r24, 0x0B	; 11
 2a6:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = 3000 & 0x00FF;
 2aa:	88 eb       	ldi	r24, 0xB8	; 184
 2ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			
			counter += 1;
 2b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2b4:	8f 5f       	subi	r24, 0xFF	; 255
 2b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			print(counter);
 2ba:	0e 94 53 00 	call	0xa6	; 0xa6 <print>
		}
	}
	for (int i = 0; i < 32000; i++){
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <__vector_3+0x124>
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	81 15       	cp	r24, r1
 2c8:	2d e7       	ldi	r18, 0x7D	; 125
 2ca:	92 07       	cpc	r25, r18
 2cc:	dc f3       	brlt	.-10     	; 0x2c4 <__vector_3+0x122>
		;
	}
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <main>:

int main(void)
{
    //Deshabilitar interrupciones
    cli(); 
 2f0:	f8 94       	cli
    
    /*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
    //Mascara para INT0
    EIMSK = 0x01;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	8d bb       	out	0x1d, r24	; 29
    
    //Activacion por flanco de bajada
    EICRA = 0x02;
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    
    //Limpieza del registro de flag
    EIFR = 0x00;
 2fc:	1c ba       	out	0x1c, r1	; 28
    
    /*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
    PCICR = (1<<PCIE0);
 2fe:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK0 = (1<<PCINT4) | (1<<PCINT3);							//Boton B y A
 302:	88 e1       	ldi	r24, 0x18	; 24
 304:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
    initLEDS();
 308:	0e 94 91 00 	call	0x122	; 0x122 <initLEDS>
	initTimers();
 30c:	0e 94 9b 00 	call	0x136	; 0x136 <initTimers>
    
    //Activar interrupciones
    sei();
 310:	78 94       	sei
	
	//Enciendo semaforo
	PORTC |= (1 << PINC3) | (1 << PINC4);						//LED6 y LED7
 312:	88 b1       	in	r24, 0x08	; 8
 314:	88 61       	ori	r24, 0x18	; 24
 316:	88 b9       	out	0x08, r24	; 8
 318:	ff cf       	rjmp	.-2      	; 0x318 <main+0x28>

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
