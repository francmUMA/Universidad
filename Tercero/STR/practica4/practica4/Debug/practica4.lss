
practica4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000328  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000039c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b6  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000684  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000318  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034d  00000000  00000000  00001b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7d 01 	call	0x2fa	; 0x2fa <main>
  88:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <digitalWrite>:
#include <avr/interrupt.h>

static uint8_t counter = 0;

void digitalWrite(unsigned char data){
	PORTB = ((data & 0x01) << PINB2) | (((data & 0x02) >> 1) << PINB1) | (((data & 0x04) >> 2) << PINB0);
  90:	28 2f       	mov	r18, r24
  92:	21 70       	andi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	a9 01       	movw	r20, r18
  98:	44 0f       	add	r20, r20
  9a:	55 1f       	adc	r21, r21
  9c:	44 0f       	add	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	98 2f       	mov	r25, r24
  a2:	94 70       	andi	r25, 0x04	; 4
  a4:	29 2f       	mov	r18, r25
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	35 95       	asr	r19
  aa:	27 95       	ror	r18
  ac:	35 95       	asr	r19
  ae:	27 95       	ror	r18
  b0:	98 2f       	mov	r25, r24
  b2:	92 70       	andi	r25, 0x02	; 2
  b4:	49 2b       	or	r20, r25
  b6:	24 2b       	or	r18, r20
  b8:	25 b9       	out	0x05, r18	; 5
	PORTD = (((data & 0x20) >> 5) << PIND4) | (((data & 0x10) >> 4) << PIND5) | (((data & 0x08) >> 3) << PIND7);
  ba:	48 2f       	mov	r20, r24
  bc:	40 72       	andi	r20, 0x20	; 32
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	55 95       	asr	r21
  c2:	47 95       	ror	r20
  c4:	55 95       	asr	r21
  c6:	47 95       	ror	r20
  c8:	55 95       	asr	r21
  ca:	47 95       	ror	r20
  cc:	55 95       	asr	r21
  ce:	47 95       	ror	r20
  d0:	55 95       	asr	r21
  d2:	47 95       	ror	r20
  d4:	ba 01       	movw	r22, r20
  d6:	62 95       	swap	r22
  d8:	72 95       	swap	r23
  da:	70 7f       	andi	r23, 0xF0	; 240
  dc:	76 27       	eor	r23, r22
  de:	60 7f       	andi	r22, 0xF0	; 240
  e0:	76 27       	eor	r23, r22
  e2:	98 2f       	mov	r25, r24
  e4:	90 71       	andi	r25, 0x10	; 16
  e6:	49 2f       	mov	r20, r25
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	55 95       	asr	r21
  ec:	47 95       	ror	r20
  ee:	55 95       	asr	r21
  f0:	47 95       	ror	r20
  f2:	55 95       	asr	r21
  f4:	47 95       	ror	r20
  f6:	55 95       	asr	r21
  f8:	47 95       	ror	r20
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	42 95       	swap	r20
 100:	52 95       	swap	r21
 102:	50 7f       	andi	r21, 0xF0	; 240
 104:	54 27       	eor	r21, r20
 106:	40 7f       	andi	r20, 0xF0	; 240
 108:	54 27       	eor	r21, r20
 10a:	98 2f       	mov	r25, r24
 10c:	98 70       	andi	r25, 0x08	; 8
 10e:	29 2f       	mov	r18, r25
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	35 95       	asr	r19
 114:	27 95       	ror	r18
 116:	35 95       	asr	r19
 118:	27 95       	ror	r18
 11a:	35 95       	asr	r19
 11c:	27 95       	ror	r18
 11e:	36 95       	lsr	r19
 120:	32 2f       	mov	r19, r18
 122:	22 27       	eor	r18, r18
 124:	37 95       	ror	r19
 126:	27 95       	ror	r18
 128:	46 2b       	or	r20, r22
 12a:	24 2b       	or	r18, r20
 12c:	2b b9       	out	0x0b, r18	; 11
	PORTC = (((data & 0x80) >> 7) << PINC3) | (((data & 0x40) >> 6) << PINC4);
 12e:	28 2f       	mov	r18, r24
 130:	22 1f       	adc	r18, r18
 132:	22 27       	eor	r18, r18
 134:	22 1f       	adc	r18, r18
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	98 2f       	mov	r25, r24
 146:	90 74       	andi	r25, 0x40	; 64
 148:	89 2f       	mov	r24, r25
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	08 2e       	mov	r0, r24
 14e:	89 2f       	mov	r24, r25
 150:	00 0c       	add	r0, r0
 152:	88 1f       	adc	r24, r24
 154:	99 0b       	sbc	r25, r25
 156:	00 0c       	add	r0, r0
 158:	88 1f       	adc	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	82 95       	swap	r24
 15e:	92 95       	swap	r25
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	98 27       	eor	r25, r24
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	98 27       	eor	r25, r24
 168:	82 2b       	or	r24, r18
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	08 95       	ret

0000016e <initLEDS>:
}

void initLEDS(){
	DDRB |= (1 << PINB2) | (1 << PINB1) | (1 << PINB0);
 16e:	84 b1       	in	r24, 0x04	; 4
 170:	87 60       	ori	r24, 0x07	; 7
 172:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PINC3) | (1 << PINC4);
 174:	87 b1       	in	r24, 0x07	; 7
 176:	88 61       	ori	r24, 0x18	; 24
 178:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PIND4) | (1 << PIND5) | (1 << PIND7);
 17a:	8a b1       	in	r24, 0x0a	; 10
 17c:	80 6b       	ori	r24, 0xB0	; 176
 17e:	8a b9       	out	0x0a, r24	; 10
 180:	08 95       	ret

00000182 <initTimers>:
}

void initTimers(){
	//Timer 0 en modo FastPWM
	TCCR0A |= (1<<WGM01) | (1<<WGM00);						//FastPWM
 182:	84 b5       	in	r24, 0x24	; 36
 184:	83 60       	ori	r24, 0x03	; 3
 186:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0A1);									//Non-Inverted
 188:	84 b5       	in	r24, 0x24	; 36
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);									//Preescalado de 256
 18e:	85 b5       	in	r24, 0x25	; 37
 190:	84 60       	ori	r24, 0x04	; 4
 192:	85 bd       	out	0x25, r24	; 37
	OCR0A = 16;												//256 microsgs
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	87 bd       	out	0x27, r24	; 39
	
	//Timer 1 en modo CTC
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);			//Preescalado = 1024 y top en OCR1A	
 198:	8d e0       	ldi	r24, 0x0D	; 13
 19a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 46875;											//3s
 19e:	8b e1       	ldi	r24, 0x1B	; 27
 1a0:	97 eb       	ldi	r25, 0xB7	; 183
 1a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//Timer 2 en modo CTC
	TCCR2A = (1<<WGM21);									//Modo CTC con top en OCRA
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);				//Preescalado de 1024
 1b0:	87 e0       	ldi	r24, 0x07	; 7
 1b2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 157;											//10ms
 1b6:	8d e9       	ldi	r24, 0x9D	; 157
 1b8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1bc:	08 95       	ret

000001be <__vector_1>:
}

ISR(INT0_vect){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
	digitalWrite(0);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
	TIMSK1 = (1<<OCIE1A);
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	//TIMSK2 = (0<<OCIE2A);
	//TIMSK0 = (1<<TOIE0);
}
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_11>:

ISR(TIMER1_COMPA_vect){
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	//Apagar leds y deshabilitar timer 1
	digitalWrite(0xFF);
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
	//TIMSK1 = (0<<OCIE1A);
	//Habilitar timer 2
	//TIMSK2 = (1<<OCIE2A);
	
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	counter += 1;
 27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	8f 5f       	subi	r24, 0xFF	; 255
 280:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	digitalWrite(counter);
 284:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
}
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__vector_3>:

ISR(PCINT0_vect){
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	digitalWrite(0);
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
	TIMSK1 = (1<<OCIE1A);
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	//TIMSK2 = (0<<OCIE2A);
	//TIMSK0 = (1<<TOIE0);
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <main>:

int main(void)
{
    //Deshabilitar interrupciones
    cli(); 
 2fa:	f8 94       	cli
    
    /*--------------------------------- INTERRUPCION EXTERNA -----------------------------------------*/
    //Mascara para INT0
    EIMSK = 0x01;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	8d bb       	out	0x1d, r24	; 29
    
    //Activacion por flanco de bajada
    EICRA = 0x02;
 300:	92 e0       	ldi	r25, 0x02	; 2
 302:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    
    //Limpieza del registro de flag
    EIFR = 0x00;
 306:	1c ba       	out	0x1c, r1	; 28
    
    /*---------------------------- INTERRUPCION POR CAMBIO DE PIN -------------------------------------*/
    PCICR = (1<<PCIE0);
 308:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK0 = (1<<PCINT4) | (1<<PCINT3);			//Boton B y A
 30c:	88 e1       	ldi	r24, 0x18	; 24
 30e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
    initLEDS();
 312:	0e 94 b7 00 	call	0x16e	; 0x16e <initLEDS>
	initTimers();
 316:	0e 94 c1 00 	call	0x182	; 0x182 <initTimers>
    
    //Activar interrupciones
    sei();
 31a:	78 94       	sei
	//Activar timer 1
	//TIMSK1 = (1<<OCIE1A);
	//Arrancan los LEDs 3 segundos
	digitalWrite(0xFF);
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
 322:	ff cf       	rjmp	.-2      	; 0x322 <main+0x28>

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
